{
  "heading": "# 色彩",
  "headingText": "你可以通过 **sass** 和 **javascript** 开箱即用 [Material Design spec](https://material.io/guidelines/style/color.html)。这些值可以在样式表、组件文件中使用，也可以通过 **color class** 系统在实际组件中使用。",
  "classesHeader": "## 类",
  "classesText": "规范中的每种色彩都会被转换为 **background** 和 **text** 变量以便在应用程序中通过一个类进行样式化，比如：`<div class=\"red\">` 或者 `<span class=\"red--text\">`。这些类的色彩定义在 [here](https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/styles/settings/_colors.scss)。",
  "classesText2": "文本色彩还可以使用 `text--{lighten|darken}-{n}` 来支持 **darken** 和 **lighten** 变量",
  "javascriptPackHeader": "## Javascript 色彩包",
  "javascriptPackText": "Vuetify 也有一个可选的色彩包，您可以在您的应用程序中导入和使用。这也可以用来帮助定义您的应用程序的主题。",
  "sassPackHeader": "## Sass 色彩包",
  "sassPackText": "虽然方便，但是色彩包增加了约 ~30kb 的大小的输出文件。有些项目可能只需要 Vuetify 在运行时引导创建的那些默认提供的类。要禁用此功能，你将不得不 _手动_ 导入并构建 **sass** 主文件。这将需要 [Sass loader](https://github.com/webpack-contrib/sass-loader) 和应该 `.sass`/`.scss` 文件条目。",
  "sassPackText2": "你创建的 `main.sass` 文件将需要包含在您的项目中。",
  "alert": "你 **必须** 配置你的 webpack 安装程序来使用 `sass`。如果你正在使用 [pre-made template](/getting-started/quick-start#new-applications)，这些都已经为你完成了。",
  "sassPackText3": "这也可以在您的 **App.vue** 主文件中完成。请记住，根据您的项目设置，这 _将_ 增加每次更新输入文件时的构建时间，因为 sass 文件将会被重新生成。",
  "colorHeader": "## Material 色彩表",
  "colorText": "下面是按基色分组的 Material design 调色板列表"
}
