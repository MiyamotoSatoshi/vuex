{
  "heading": "# 日历",
  "headingText": "`v-calendar` 组件用于在每日、每周或每月视图中显示信息。每日视图有一个全天或定时元素的插槽，每周和每月视图有一个每天的插槽。您可以选择传入一个事件数组，它们将在适当的日期和时间内呈现。",
  "examples": {
    "usage": {
      "desc": "日历具有类型和值，该类型和值决定在多长时间内显示何种类型的日历。这显示了最简单的配置，一个带有 `name`, `start` 和 `end` 属性的事件数组。 `end` 是可选的，它默认为 `start`。如果 `start`定义了时间，那么它被认为是一个定时事件，并将相应地显示在日视图中。事件可以跨越数天，并将相应地呈现。"
    },
    "slots": {
      "heading": "### 插槽",
      "desc": "插槽允许您定义每天的内容、每日视图的时间间隔和各种标签。"
    },
    "events": {
      "heading": "### 事件",
      "desc": "这是一个带有附加事件处理程序和控制日历显示的外部组件的计划器示例。"
    },
    "weekly": {
      "heading": "### 每周",
      "desc": "这是一个事件日历示例，其中包含类型为 `week` 的全天事件和定时事件。"
    },
    "daily": {
      "heading": "### 每日",
      "desc": "这是一个日历示例，每个间隔时段都有内容，类型为 `day`。"
    }
  },
  "props": {
    "dayFormat": "将某日中出现的月字符串的日期格式化为指定区域设置",
    "end": "日历的结束日期（包括），格式为 `YYYY-MM-DD。根据日历的 `type`，这可能会被忽略。",
    "eventColor": "所有事件的背景色或接受传递给日历的事件对象以返回颜色的函数。",
    "eventEnd": "设置 *event* 的结束时间戳的属性。",
    "eventHeight": "事件的高度（以像素为单位）在 `month` 视图和 `day` 视图的顶部。",
    "eventMarginBottom": "事件底部边距",
    "eventMore": "在给定日期内事件太多的日历上是否显示更多 'button'。它将显示类似于 '5 more' 的内容，当单击时会生成一个 `click:more` 事件。",
    "eventMoreText": "在给定隐藏事件数量的情况下，在更多 'button' 中显示的文本。",
    "eventName": "设置 *event* 的显示名称的属性，或接受作为第一个参数传递给日历的事件对象的函数，并设置一个标志，指示该名称是用于一个定时事件 (true) 或是一个超过一天的事件。",
    "eventOverlapThreshold": "以分钟为单位的值，用于确定两个定时事件应在彼此相邻的列中放置还是应视为稍微重叠的事件。",
    "eventRipple": "应用 `v-ripple` 指令。",
    "events": "事件对象数组，具有开始时间戳（可选）和名称及结束时间戳的属性。 如果未提供结束时间戳，则将使用开始值。 如果没有给出名称，则必须为 `event` \n 插槽提供一个实现。",
    "eventStart": "设置 *event* 的启动时间戳的属性。",
    "eventTextColor": "所有事件的文本颜色，或接受传递给日历的事件对象以返回颜色的函数。",
    "firstInterval": "在 `day` 视图中显示的第一个间隔。如果 `intervalMinutes` 设置为 60，而这个设置为 9，则视图中的第一次是上午9点。",
    "hideHeader": "`day` 视图顶部的头部是否应该可见。",
    "intervalCount": "在 `day` 视图中显示的间隔数。",
    "intervalFormat": "将出现在 `day` 和 `week` 视图的间隔栏中的一天中的时间字符串格式化为指定的区域设置",
    "intervalHeight": "`day` 视图中间隔的高度（以像素为单位）。",
    "intervalMinutes": "间隔在 `day` 视图中的分钟数。普通间隔为 60 分钟，因此间隔为 1 小时。",
    "intervalStyle": "返回要应用于间隔的 CSS 样式。",
    "locale": "日历的区域设置。",
    "maxDays": "如果未设置 `end` 天，则在自定义日历中显示最大天数。",
    "minWeeks": "在 `month` 或 `week` 视图中显示的最小周数。",
    "monthFormat": "将日期中出现的月份字符串格式化为指定的区域设置",
    "now": "覆盖现在考虑的日期和时间。格式为 `YYYY-MM-DD hh:mm:ss`。日历是根据现在的情况设计的。",
    "shortIntervals": "如果为 true，则 `day` 视图中的间隔将为上午 9：00，而不是上午 09：00",
    "shortMonths": "是否应使用一个月的简短版本 (Jan vs January)。",
    "shortWeekdays": "是否应使用工作日的简短版本 (Mon vs Monday)。",
    "showIntervalLabel": "检查给定的日期和时间是否应显示在 `day` 视图的间隔栏中。",
    "showMonthOnFirst": "是否应在该月的第一天显示该月的名称。",
    "start": "日历上的开始日期（包括），格式为 `YYYY-MM-DD`。 根据日历的 `type`，可以将其忽略。",
    "type": "字符串，可以是 `month`, `week`, `day`, `4day`, `custom-weekly`, 和 `custom-daily` 中的一个。自定义类型查看传递给组件的 `start` 和 `end` 日期，而不是 `value`。",
    "v-model": "设置 `value` 属性，但当点击某一天的链接时也更新它。",
    "value": "`YYYY-MM-DD` 格式的日期，用于确定日历的时间跨度。",
    "weekdayFormat": "将标题中显示的星期几字符串格式设置为指定的区域设置",
    "weekdays": "指定一周中要显示的日期。如果只显示周一到周五，可以使用 `[1, 2, 3, 4, 5]` \n 的值。要显示周一开始的一周，可以使用值 `[1, 2, 3, 4, 5, 6, 0]`。"
  },
  "functions": {
    "checkChange": "检查开始日期和结束日期的更改。 更新并发出更改事件（如果已更改）。",
    "formatTime": "一个实用工具函数，用于获取一个时间戳对象（至少具有小时和分钟属性）并以字符串形式生成时间。",
    "getFormatter": "一个实用函数，给出了传递给 Intl.DateTimeFormat 的选项。并返回一个函数，该函数可以将日期格式化为字符串。",
    "minutesToPixels": "将 `day` 视图的分钟数转换为 y轴 上的像素值。 如果视图不是 `day`，则返回-1。",
    "move": "一个通用函数，它将日历向前移动（如果数量为正）或向前移动（如果数量为负）。",
    "next": "用日期触发输入事件，该日期会使日历前进到下一个时间跨度。 如果类型为 `month`，则将在下个月返回一天；如果类型为 `4day`，则将在 `value` /`v-model` 之后 4 天返回日期，依此类推。",
    "prev": "使用日期触发输入事件，该日期会使日历前进到前一个时间跨度。 如果类型为 `month`，则将返回上个月的一天；如果类型为 `4day`，则将返回 `value`/`v-model` 之前 4 天的日期，依此类推。",
    "scrollToTime": "将 `day` 视图中的可滚动区域滚动到给定时间。 如果时间格式无效，或者日历不在 `day` 视图中，则返回 false。",
    "timeToY": "将 `day` 视图的时间转换为 y轴 上的像素值。 如果时间格式无效，或者日历不在 `day` 视图中，则返回 false。",
    "updateEventVisibility": "如果日历中包含事件，并且 `event-more` 被启用，那么具有太多事件的日子将包含一个 'button' 以表示必须隐藏多少事件。",
    "updateTimes": "现在和今天在日历中更新，可能会更新日历中的样式。"
  },
  "slots": {
    "day-body": "放置在可滚动间隔容器的 `day` 视图中的内容。day & time 对象通过此插槽作用域传递。",
    "day-header": "顶部容器中 `day` 视图中放置的内容。day & time 对象通过此插槽作用域传递。",
    "day-label": "在 `week` 或 `month` 视图中放置在月份的第几天的内容。day & time 对象通过此插槽作用域传递。",
    "day-month": "在 `week` 或 `month` 视图中放置在月份空间的内容。day & time 对象通过此插槽作用域传递。",
    "day": "放置在 `week` 或 `month` 视图中的内容。day & time 对象通过此插槽作用域传递。",
    "event": "放置在事件中的内容。 提供以下变量：event, day, outside, start, end, timed。",
    "interval": "在 `day` 视图中放置在间隔空间中的内容。day & time 对象通过此插槽作用域传递。"
  },
  "events": {
    "change": "日历上显示的天数范围已更改。这在初始化时触发。传递的事件是一个具有开始日期和结束日期对象的对象。",
    "click:date": "月中某天的单击事件链接。传递的事件是日期和时间对象。",
    "click:day": "某天的单击事件。传递的事件是 day 对象。",
    "click:event": "特定事件上的单击事件。传递的事件是 day & time 对象。",
    "click:interval": "`day` 视图中特定间隔标签的点击事件。传递的事件是 day & time 对象。",
    "click:more": "一天中有太多事件的视图中的 `X more` 按钮上的点击事件。",
    "click:time": "`day` 视图中特定时间的点击事件。传递的事件是 day & time 对象。",
    "contextmenu:date": "该月中某一天的右击事件。传递的事件是 day & time 对象。",
    "contextmenu:day": "某一天的右键事件。传递的事件是 day 对象。",
    "contextmenu:event": "事件上的右键单击事件。 传递的事件是 day & time 对象。",
    "contextmenu:interval": "`day` 视图中特定间隔标签的右键事件。传递的事件是 day & time 对象。",
    "contextmenu:time": "`day` 视图中特定时间的右键事件。传递的事件是 day & time 对象。",
    "input": "用于支持 v-model 的 `click:date` 事件的别名。",
    "mousedown:day": "一天中的 mousedown 事件。传递的事件是 day 对象。",
    "mousedown:event": "事件上的鼠标按下事件。 传递的事件是 day & time 对象。",
    "mousedown:interval": "`day` 视图中特定间隔标签处的 mousedown 事件。传递的事件是 day & time 对象。",
    "mousedown:time": "`day` 视图中特定时间的 mousedown 事件。传递的事件是 day & time 对象。",
    "mouseenter:day": "一天中的 mouseenter 事件。传递的事件是 day 对象。",
    "mouseenter:event": "事件上的鼠标移入事件。 传递的事件是 day & time 对象。",
    "mouseenter:interval": "`day` 视图中特定间隔标签处的 mouseenter 事件。传递的事件是 day & time 对象。",
    "mouseenter:time": "`day`视图中特定时间的 mouseenter 事件。传递的事件是 day & time 对象。",
    "mouseleave:day": "一天的 mouseleave 事件。传递的事件是 day 对象。",
    "mouseleave:event": "事件上的鼠标移出事件。 传递的事件是 day & time 对象。",
    "mouseleave:interval": "`day` 视图中特定间隔标签处的 mouseleave 事件。传递的事件是 day & time 对象。",
    "mouseleave:time": "`day`视图中特定时间的 mouseleave 事件。传递的事件是 day & time 对象。",
    "mousemove:day": "一天的 mousemove 事件。传递的事件是 day 对象。",
    "mousemove:event": "事件上的鼠标移动事件。 传递的事件是 day & time 对象。",
    "mousemove:interval": "`day` 视图中特定间隔标签处的 mousemove 事件。传递的事件是 day & time 对象。",
    "mousemove:time": "`day` 视图中特定时间的 mousemove 事件。传递的事件是 day & time 对象。",
    "mouseup:day": "一天的 mouseup 事件。传递的事件是 day 对象。",
    "mouseup:event": "事件上的鼠标松开事件。传递的事件是 day & time 对象。",
    "mouseup:interval": "`day` 视图中特定间隔标签处的 mouseup 事件。传递的事件是 day & time 对象。",
    "mouseup:time": "`day` 视图中特定时间的 mouseup 事件。传递的事件是 day & time 对象。",
    "moved": "调用了函数 `next`、`prever` 和 `move` 中的一个。传递的事件是为移动计算的 day 对象。",
    "touchend:day": "一天的 touchend 事件。传递的事件是 day 对象。",
    "touchend:event": "视图上的触摸结束事件。 传递的事件是 day & time 对象。",
    "touchend:interval": "`day` 视图中特定间隔标签处的 touchend 事件。传递的事件是 day & time 对象。",
    "touchend:time": "`day` 视图中特定时间的 touchend 事件。传递的事件是 day & time 对象。",
    "touchmove:day": "一天的 touchmove 事件。传递的事件是 day 对象。",
    "touchmove:event": "在 `event` 视图上的触摸移动事件。 传递的事件是 day & time 对象。",
    "touchmove:interval": "`day` 视图中特定间隔标签处的 touchmove 事件。传递的事件是 day & time 对象。",
    "touchmove:time": "`day` 视图中特定时间的 touchmove 事件。传递的事件是 day & time 对象。",
    "touchstart:day": "一天的 touchstart 事件。传递的事件是 day 对象。",
    "touchstart:event": "事件视图上的触摸开始事件。 传递的事件是 day & time 对象。",
    "touchstart:interval": "`day` 视图中特定间隔标签处的 touchstart 事件。传递的事件是 day & time 对象。",
    "touchstart:time": "`day` 视图中特定时间的 touchstart 事件。传递的事件是 day & time 对象。"
  }
}
