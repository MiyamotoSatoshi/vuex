{
  "heading": "# 快速入门",
  "headingText": "使用其中一个 Vuetify Vue CLI 安装包 _(基于官方示例)_ 立即开始您的项目。 Vuetify 支持 **SSR**（服务端渲染）,**SPA**（单页应用程序）,**PWA**（渐进式Web应用程序）和标准 **HTML** 页面。",
  "vueCliHeader": "## Vue CLI 3 安装",
  "vueCliText1": "Vue CLI 3 是下一代 cli 工具，目标是更容易地入门。当你使用 Vue CLI 3 启动应用程序时，你可以很轻松的获得官方 webpack 的更新、配置更改，以及 Vuetify 更新。",
  "vueCliText2": "如何使用 Vue CLI 3，请查阅 [官方文档](https://cli.vuejs.org/zh/guide/)",
  "vueCliText3": "**提示**：如果你已经安装了 **Vue CLI**，你可以在终端键入 <kbd>vue --version</kbd> 来检查是否是最新版本。",
  "vueCliText4": "安装 vue-cli 之后，您可以使用新的项目脚手架。除非你需要安装特定的包例如 （vuex 或 vue-roter），否则请选择默认选项安装。这样将根据你的选项创建一个新的项目。",
  "vueCliText5": "现在你已经实例化了一个项目，你可以使用 vue-cli 添加 [vuetify package](https://github.com/vuetifyjs/vue-cli-plugin-vuetify)",
  "vueCliText6": "这将为您提供一组自定义安装的选项。默认预置已经为你启用了 [a-la-carte](/custom/a-la-carte)。",
  "vueCliText7": "安装后，您可以在`package.json`中运行npm开发脚本。 这将在 **https://localhost:8080**启动本地开发服务器。",
  "uiHeader": "## Vue UI 安装",
  "uiText1": "Vuetify 还可以使用 **Vue UI** 安装,，这是 _@vue/cli_ 的 Web 应用程序。确保您安装了最新版本的 Vue CLI，然后在终端中键入：",
  "uiText2": "接着 Vue UI 就会启动了, 在浏览器中打开一个 [新窗口](http://localhost:8000) 。找到屏幕的左侧的 **插件** 按钮并点击。进入之后，只需在输入字段中搜索 _Vuetify_。",
  "uiImg1": "安装 Vuetify 插件",
  "uiImg2": "配置你的 Vuetify",
  "uiText3": "安装之后，你可以使用选项按钮来配置项目默认的 Vuetify 设置。",
  "browserHeader": "## 支持的浏览器",
  "browserText": "Vuetify是一个渐进式的框架，希望能将前端开发提升到一个新的水平。为了这个目标，就不得不牺牲老版本IE浏览器的支持。下列清单并不详尽，我们只列出了主要支持的浏览器。",
  "cdnHeader": "## 使用 CDN",
  "cdnText": "要在不安装 Vue CLI 模板的情况下使用 Vuetify.js 进行测试，请将下面的代码复制到您的 `index.html` 中。这将拉取最新版本的 Vue 和 Vuetify，从而允许你开始使用组件。您还可以在 codepen 上使用 [Vuetify starter](https://template.vuetifyjs.com) 。虽然不建议这样做，但是如果需要在 _生产_ 环境中使用 cdn，请对包的版本进行范围限定。有关如何做到这一点的更多信息，请浏览 [jsdelivr](https://www.jsdelivr.com/) 。",
  "newHeader": "## 对于全新应用",
  "existingHeader": "## 对于已有应用",
  "existingAlert": "如果您现有的应用程序正在使用 Vue CLI 3，请参考 [上面的指南](#new-applications) 了解如何安装 Vuetify 。",
  "existingText1": "如果想将 Vuetify 引入到已有项目中，你必须使用 `npm` 或者 `yarn` 来安装 _npm package_。这些包管理器可以让你管理项目所需要引入的资源。",
  "existingText2": "如果你想知道 `npm` 是如何运作的，请参阅 [npm 官方文档](https://docs.npmjs.com/getting-started/what-is-npm) 。如果你使用的是 `yarn`，也能够在 [yarn 官方文档](https://yarnpkg.com/lang/en/docs/) 找到更多信息。设置完成后，可以在 cli 中使用任一命令。",
  "existingText3": "一旦 Vuetify 安装完毕，请在你的 `src` 目录中创建一个名字为 `plugins` 的文件夹。在里面添加一个 **vuetify.js** 文件。这个文件将帮助 Vuetify 为你的项目处理所有的引导和设置。",
  "existingText3a1": "如果你无法使用 **Vue CLI 3** 包，你可以通过 **vue.config.js** 或者 **webpack** 的配置来手动安装 **Vue CLI 3** 包，更多关于手动安装的信息，请参阅到 [A-la-carte page](/customization/a-la-carte) 。",
  "existingText3b": "无需使用 **vuetify-loader**， 你也可以手动导入个别组件。这是 **A-la-carte** 的手册。",
  "existingText3c": "最后一个方法将导入 **所有** 的 Vuetify 特性和设置。但是如果有条件的话，仍然 **建议** 你使用 **vuetify-loader**。对于完整安装来说，你需要 _手动_ 导入 Vuetify 的样式。 这将通过浏览器安装 Vuteify 而不是进行后端编译。你可以在我们的 [快速开始](https://codepen.io/johnjleider/pen/bgJOrX) 中观察浏览器中的安装。",
  "webpackHeader1": "### Webpack 安装",
  "webpackText1": "在使用webpack时，您使用上述选项（**完整安装** 或者 **A-la-carte 安装**） 。但是，您需要为 sass 文件配置一个 webpack 规则 (或修改一个现有的规则)。您可以通过安装必要的依赖项开始：",
  "webpackText2": "一旦安装，请找到你的 `webpack.config.js` 文件，并将下面的片段复制到 **rules** 。如果已经存在 **sass** 规则，您可能需要应用下面的一些或所有的更改。如果您希望使用 **vuetify-loader** ，您可以在 [A-la-carte](/customization/a-la-carte#vueconfigjs-installation) 页面中找到更多关于此项的设置。",
  "existingHeader4": "## 启动 Vutifiefy 对象",
  "existingText4": "一旦您设置了你的 `src/plugins/vuetify.js` 文件中的 Vuetify 选项，你必须将该对象进行挂载。这个安装过程类似于 **vue-router** 和 **vuex**",
  "existingHeader5": "## 字体安装",
  "existingText5": "Vuetify 遵守 [Material Design Specification](https://material.io/design/typography/the-type-system.html) 使用 Google Roboto font。使用这种字体最简单的方式就是在 `index.html` 中的 `<head>` 标签添加一个 `<link>` 元素",
  "existingText6": "你还可以使用 [webfontloader](https://github.com/typekit/webfontloader) 异步加载字体。",
  "existingHeader7": "### MDI Iconfont",
  "existingText7": "Vuetify 使用 [Material Designics](https://materialsidesignicon.com/) 作为其默认的 iconfont。使用 `npm` 就能轻松安装。",
  "existingText8": "一旦安装了该软件包，只需将其导入到你 plugins 文件夹中的 Vuetify 文件中即可。",
  "existingText9": "有关不同支持图标字体和高级实现的更多信息，请参阅 [Icons](/custom/Icons) 。",
  "alert2": "*警告*：虽然 Vuetify 已经尽可能避免导致 css 冲突，但是也不能保证您自定义的样式和 Vuetify 集成时不会有任何不正常的样式体现。",
  "edgeHeader": "## Edge 支持",
  "edgeText1": "`vuetify/lib` 现在使用ES6，在 Edge 浏览器（非 chromium 引擎）中将会触发一些脚本错误。此外，为了支持 vue-cli-3 中的 **modern mode**，`vuetify/lib` 并没有被替换。要解决这些状况，你必须告诉 vue-cli 来转换`vuetify`。在 vue-cli-plugin-vuetify 等待 vue-cli-3 漏洞修复之后将会自动处理。",
  "ie11Header": "## 支持 IE11 和 Safari 9",
  "ie11Text": "Vuetify 利用了 ES2015/2017 的一些特性，这些特性在 **Internet Explorer 11** 和 **Safari 9/10** 中要使用 polyfills 进行处理。如果您正在使用 Vue CLI 3，那么将会自动为你解决。否则，在你的项目目录中，你可以安装 `babel-polyfill`：",
  "ie11Text1": "Vuetify 利用了 ES2015/2017 的一些特性，这些特性在 **Internet Explorer 11** 和 **Safari 9/10** 中要使用 polyfills 进行处理。如果您正在使用 Vue CLI 3，那么将会自动为你解决。否则，在你的项目目录中，你可以安装 `babel-polyfill`：",
  "ie11Text2": "重要的是，要尽早将插件纳入你的主文件 **index.js**。如果使用 Vuetify SSR ，这将加载为 **client-entry.js** 文件",
  "ie11Text3": "建议使用 `babel-preset-env` 以及相应的 polyfill 来确保向应用程序添加必要的 polyfill。有关 `babel-preset-env` 的更多信息，[请参阅文档](https://babeljs.io/docs/en/next/babel-preset-env.html)",
  "ie11Text4": "安装完成后，在你的 `.babelrc` 或者 `babel.config.js` 配置 preset",
  "ie11Text5": "不幸的是，Vue CLI 3 并没有自动键入 IE11，你可能会在其中遇到各种错误（例如<i>符号没有定义</i>）。为了解决这些错误，你可能需要在vue.config.js 中手动添加 `transpileDependencies` 参数。",
  "ie11Text6": "由于 Internet Explorer 对 `<template>` 标签的支持有限，你必须将完全编译后的 dom 元素发送到浏览器。这可以通过提前构建 Vue 代码或通过创建辅助组件来替换 dom 元素来完成。如果不经过处理就发送给 IE 浏览器，那么在通常情况下都会失败。",
  "browserSupport": {
    "supported": "支持",
    "notSupported": "不支持",
    "polyfill": "需要 polyfill"
  }
}
