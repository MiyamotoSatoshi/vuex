{
  "heading": "# 成为伟大事业的一部分！",
  "headingText": "Vuetify 是由一个惊人的社区打造的，社区中提交问题，创建拉取请求，并提供宝贵的反馈才使 Vuetify 成为可能。这是我们的工作，使你能够创建惊人的应用程序。很多时候，你会遇到一些可以做得更好的事情。也许你发现了一个 bug，或者你对附加功能有了一个想法。太好了！要开始在开发环境中工作，只需克隆 Vuetify 存储库即可。",
  "issueHeader": "## 报告问题",
  "issue1": "仓库的工单列表是专门用来提交 bug 报告和特性请求的。其它无关紧要的问题将会被立即关闭。",
  "issue2": "一般性问题,请加入 [community](https://chat.vuetifyjs.com)。",
  "issue3": "尝试搜索您的工单，它或许已获得回答。",
  "issue4": "看看错误是否可用最新版本重现。",
  "issue5": "如果可重现，请提供一个简单的 [codepen](https://template.vuetifyjs.com) 或者是可被克隆并产生预期行为的仓库。",
  "issue6": "请使用 [issue creator](https://issues.vuetifyjs.com) 来创建一个新的工单。",
  "localHeader": "## 开发环境预先准备",
  "localText1": "Vuetify 包含一个本地开发环境，你可以启动该环境来测试新特性、功能和组件。然而，在你开始之前，你需要安装一些东西来帮助你管理 vuetify 的许多方面。",
  "localSubHeader1": "### 预先准备：安装 Commitizen",
  "localText2": "Vuetify 团队对所有库的提交都使用 [Commitizen](https://github.com/commitizen/cz-cli)。这将帮助阅读和组织代码，只需对常规提交函数进行最小的更改。使用 npm 全局安装 Commitizen：",
  "localTextWarning": "有时，使用 cmd 创建 .czrc 无法工作，如果出错，请尝试使用 VS code 在主目录中创建文件",
  "localText3": "恭喜！Commitizen 已经安装！当你提交时，请像往常一样添加文件，并将`git commit -m \"your message\"` 替换为 `git cz`，然后按照提示操作。",
  "localText4": "提交指南见下面的 \"Commit Guidelines w/Commitizen\"",
  "localSubHeader2": "### 安装PM2（可选）",
  "localText5": "如果你愿意，你可以使用 PM2 同时运行和管理 Vuetify monrepo 的多个部分 (Playground, Docs, 等等)。根目录中包含一些 PM2 配置文件，它们将引导并管理 Vuetify 提供的所有配置。你需要启动 PM2：",
  "setupHeader": "## 设置开发环境",
  "setupText1": "设置你自己的开发环境非常简单！克隆 [Vuetify](https://github.com/vuetifyjs/vuetify) 到你的仓库即可。",
  "setupText2": "现在可以启动开发环境了！",
  "startupHeader": "## 启动开发环境",
  "startupText1": "有几种方法可以在 Vuetify mono-repo 中启动开发环境：",
  "startupSubHeader1": "### Yarn",
  "startupSubHeader2": "### PM2",
  "startupText4": "要导入预配置的 PM2 实例，请使用以下命令",
  "startupText5": "下面是一些与 PM2 一起用于启动/停止/重启实例的命令",
  "startupText6": "目前只有两个主要的进程名：`vuetify` (playground) 和 `vuetify-docs`",
  "commitHeader": "## 提交指南 w/Commitizen",
  "commitText1": "Commitizen 为处理语义版本控制提供了一个流畅的接口。这提供了一个很好的样板文件，使得编写提交注释更加容易。",
  "commitText2": "如上所述，所有提交都应该使用 [commitizen](https://github.com/commitizen/cz-cli) 和 [conventional-changelog](https://www.npmjs.com/package/cz-conventional-changelog)。提交应遵循格式 `<type>: <subject>` or `<type>(scope): <subject>`",
  "commitSubHeader1": "### 提交类型",
  "commitText3": "- **feat:** 提交一个新特性或功能。向后兼容的特性将在下一个 **次要** 中发布，而中断更改将在下一个 **主要** 中发布。带有中断更改的提交主体必须以 `中断更改` 开头，然后描述 API 是如何更改的。",
  "commitText4": "**fix:** 提交为 vuetify 的代码库中的 bug 提供修复。",
  "commitText5": "- **docs:** 提交提供对文档的更新。",
  "commitText6": "- **style:** 提交不影响代码运行方式的代码，这些只是对格式的更改。",
  "commitText7": "- **refactor:** 提交既没有修复 bug 也没有添加特性。",
  "commitText8": "- **perf:** 提交提高性能的修改。",
  "commitText9": "- **test:** 提交添加丢失的或正确的现有测试。",
  "commitText10": "- **chore:** 其他不修改 src 或测试文件的提交。",
  "commitText11": "- **revert:** 恢复以前的提交。",
  "changesHeader": "## 提交更改/Pull requests",
  "changesText1": "在进行任何提交之前，你会想要从开发中拉取最新和最好的。从这里开始，合并，并解决分支和开发之间的任何冲突。随着开发的不断推进，频繁地拉取是一个很好的经验法则。",
  "changesText2": "在 git 中，添加所有相关的文件。",
  "changesText3": "利用 commitizen 命令 `git cz` 提交。在一系列的选项中，请确保选择恰当的类型（参阅上面的 **提交指南 w/Commitizen**）",
  "changesText4": "最后，`git push` 并且打开一个 Pull requests。",
  "changesSubHeader1": "### Pull Requests For Vuetify",
  "changesText7": "Pull requests 与 Vuetify 有关的问题： \n* 对于 **bug fixes** 和 **documentation updates** 的提交请合并至 `master`。     \n* 对于 **new features** 和 **enhancements** 的提交请合并至 `dev`   \n* 对于 **bugs** 和 **critical fixes** 有关 **v1.5/LTS** 的提交请合并至 `stable`   \n* 对于任何 包含 **breaking changes** 的 **features** 提交提交请合并至 \n `next` ",
  "changesSubHeader2": "### Pull Requests For Docs",
  "changesText8": "对于任何与 Vuetify 文档相关的 pull requests，请将你的 pull requests 提交至 `master` 分支。"
}
