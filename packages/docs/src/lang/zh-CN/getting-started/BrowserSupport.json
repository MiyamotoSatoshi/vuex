{
  "heading": "# 浏览器支持",
  "headingText": "Vuetify是一个渐进式的框架，希望能将前端开发提升到一个新的水平。为了这个目标，就不得不牺牲老版本IE浏览器的支持。下列清单并不详尽，我们只列出了主要支持的浏览器。",
  "browserHeader": "## 支持的浏览器",
  "browserText": "Vuetify是一个渐进式的框架，希望能将前端开发提升到一个新的水平。为了这个目标，就不得不牺牲老版本IE浏览器的支持。下列清单并不详尽，我们只列出了主要支持的浏览器。",
  "browserSupport": {
    "supported": "受支持的",
    "notSupported": "不受支持的",
    "polyfill": "需要 polyfill"
  },
  "ie11Header": "## 支持 IE11 和 Safari 9",
  "ie11Text": "Vuetify 利用了 ES2015/2017 的一些特性，这些特性在 **Internet Explorer 11** 和 **Safari 9/10** 中要使用 polyfills 进行处理。如果您正在使用 Vue CLI 3，那么将会自动为你解决。否则，在你的项目目录中，你可以安装 `babel-polyfill`：",
  "ie11Text1": "Vuetify 利用了 ES2015/2017 的一些特性，这些特性在 **Internet Explorer 11** 和 **Safari 9/10** 中要使用 polyfills 进行处理。如果您正在使用 Vue CLI 3，那么将会自动为你解决。否则，在你的项目目录中，你可以安装 `babel-polyfill`：",
  "ie11Text2": "重要的是，要尽早将插件纳入你的主文件 **index.js**。如果使用 Vuetify SSR ，这将加载为 **client-entry.js** 文件",
  "ie11Text3": "建议使用 `babel-preset-env` 以及相应的 polyfill 来确保向应用程序添加必要的 polyfill。有关 `babel-preset-env` 的更多信息，[请参阅文档](https://babeljs.io/docs/en/next/babel-preset-env.html)",
  "ie11Text4": "安装完成后，在你的 `.babelrc` 或者 `babel.config.js` 配置 preset",
  "ie11Text5": "不幸的是，Vue CLI 3 并没有自动为 IE11 提供兼容支持，在这种情况下，你可能遇到各种错误（例如<i>Symbol is not defined</i>）。要解决这些错误的话你可能需要在 `vue.config.js` 文件中添加 `transpileDependencies` 参数。",
  "ie11Text6": "由于 Internet Explorer 对 `<template>` 标签的支持有限，你必须将完全编译后的 dom 元素发送到浏览器。这可以通过提前构建 Vue 代码或通过创建辅助组件来替换 dom 元素来完成。如果不经过处理就发送给 IE 浏览器，那么在通常情况下都会失败。"
}
