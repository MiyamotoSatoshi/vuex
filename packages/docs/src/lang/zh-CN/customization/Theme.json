{
  "heading": "# 主题",
  "headingText": "轻松更改你的应用程序的颜色。重建默认样式表，并根据你的特定需求自定义框架的各个方面。",
  "lightAndDarkHeader": "## 浅色和深色",
  "lightAndDarkText1": "Vuetify 同时支持 Material Design spec 中的 **light** 和 **dark** 变量。这个指定从根组件的 `v-app` 开始，大多数组件都支持它。默认情况下，你的应用程序将会使用 **light** 主题，但是你也可以轻松的在主题服务中使用 **dark** 选项来改变它。",
  "lightAndDarkText2": "当你指定一个组件为浅色或暗色时，除非另有指定，所有子组件将继承并应用同样的组件。 你可以手动打开 **dark** 开关，方法是将 `this.$vuetify.theme.dark` 更改为 **true** 或 **false** 。",
  "customizingHeader": "## 自定义",
  "customizingText1": "默认情况下，Vuetify 具有适用于所有组件的标准主题。",
  "customizingText2": "这也可以很容易地修改。只需简单地将 **theme** 属性传递给 `Vue.use` 函数即可。你可以选择修改全部或仅部分主题的属性，其余部分会继承默认配置。",
  "customizingText3": "你也可以使用预定义的 material 色彩。",
  "customizingText3a": "默认情况下，主题服务将使用你应用程序的主颜色为 **anchor** 标签。 你可以通过向主题 anchor 属性来覆盖它：",
  "customizingText4": "深入原理，Vuetify 将会根据这些可以在 DOM 中访问的值生成 CSS 类。这些类将遵循与其他助手类相同的标记，例如 `primary` 或者 `secondary--text`。如果提供整个颜色对象（如上述 `colors.purple` 中的颜色），则 lighten/darken 变量将立即使用来代替生成。",
  "customizingText5": "这些值会在 **theme** 属性下的 **$vuetify** 对象示例中可用。这可以让你动态地修改你的主题，Vuetify 将在后台重新生成并更新你的主题类，无缝更新你的应用程序。",
  "optionHeader": "## 选项",
  "optionText1": "Vuetify 会在 SPA 和 SSR 的运行时生成主题。 生成的样式将放入一个 `<style>` 标签，标记为 **vuetify-theme-stylesheet** 的 **id**。",
  "optionHeader2": "### 压缩",
  "optionText3": "对于 SSR 应用，你可以将回调函数传递给 **$vuetify.theme.options.minifyTheme** 以减少初始页面大小。当使用此选项时，建议同时使用 **themeCache**。",
  "optionHeader3": "### 缓存",
  "optionText4": "可以提供一个自定义缓存对象(与 **minifyTheme** 配合工作)来提高 SSR 的效率。 对象必须包含 **get** 和 **set** 方法。下面是一个使用 [LRU cache](https://www.npmjs.com/package/lru-cache) 的示例。",
  "optionHeader4": "### 自定义属性",
  "optionText5": "启用 `customProperties` 也会为每个主题颜色生成一个 css 变量，然后你可以在组件 `<style>` 块中使用。",
  "optionHeader5": "### CSP Nonce",
  "optionText6": "启用了 `script-src` CSP 规则的页面可能需要为嵌入样式标签指定 **nonce** 。 ",
  "themeGeneratorHeader": "## 主题生成器",
  "themeGeneratorText1": "使用我们的 [Theme Generator](https://theme-generator.vuetifyjs.com) 工具为你的 **Vuetify** 应用程序发现和生成新的颜色主题。",
  "variantsSubheader": "### 自定义主题变量",
  "variantsText1": "虽然 Vuetify 会自动生成主题颜色的 _lighten_ 和 _darken_ 变量，但你可能想要自己控制这个东西。 只需传递一个包含你想要修改的变量的主题对象。不需要提供任何东西就为你生成。",
  "variantsText2": "你现在可以导入你的自定义主题对象并将其应用到 Vuetify",
  "variantsText3": "下面是主题对象上可覆盖键的完整列表：",
  "disableSubheader": "### 禁用主题",
  "disableText1": "您可以使用值为 **true** 的 **disable** 属性来禁用主题功能 。这将禁止创建 Vuetify 样式表。"
}
