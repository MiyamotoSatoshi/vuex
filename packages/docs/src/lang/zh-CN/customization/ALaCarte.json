{
  "heading": "# A-la-carte (treeshaking)",
  "headingText": "作为一个组件框架，Vuetify 总是横向增长。根据你的项目，一个小的 **package size** 可能是一个需求。A la carte 系统让你能够选择要导入哪些组件来彻底 _缩小_ 你的应用程序的构建大小。使用 [Vue CLI 3 plugin](/getting-started/quick-start#new-applications) 创建的新项目默认已启用此功能。",
  "treeshakeWarning": "Treeshaking 只工作在 **production mode** 中的 Webpack 4。当使用 Vue CLI 3 时是这些都是自动配置的。",
  "loaderHeader1": "## vuetify-loader",
  "loaderText1a": "跟踪正在使用的所有组件可能是一件很麻烦的事。[vuetify-loader](https://github.com/vuetifyjs/vuetify-loader) 通过自动导入你使用的所有 Vuetify 组件来减轻这种痛苦。这也将使代码的分割更加有效，因为 webpack 只加载显示该块所需的组件。",
  "loaderHeader2": "### Importing",
  "loaderText2a": "为了利用 a la-carte 组件，你必须从 **vuetify/lib** 中导入 Vuetify。",
  "optionsInfo": "作为第二个参数对象传递给 **Vue.use** 的选项也可以包含组件,指令和过渡属性。",
  "loaderHeader3": "### vue.config.js 安装",
  "loaderText3a": "虽然不建议这样做， 但你可以选择不使用 Vue CLI 3 插件，然后通过 [configure webpack](https://cli.vuejs.org/config/#configurewebpack) 手动配置加载程序。",
  "loaderHeader4": "### Webpack 安装",
  "loaderText4a": "你还可以显式地安装基于 webpack 的项目的加载程序。与 vue.config.js 设置类似，只需将加载程序添加到项目的 webpack 插件中即可。",
  "loaderHeader5": "## 所需样式",
  "loaderText5a": "当你从 `vuetify/lib` 导入时，基线框架样式也被引入。每个组件都单独负责它们的样式，并且将以相同的方式进行编译。如果你使用 Vue CLI 3 和 `vue-cli-plugin-vuetify` 插件，这些都会被自动完成，你可以 **跳过** 这部分。如果您在无法访问 cli 的项目中工作，则可以手动包含所需的软件包。",
  "sassInfo": "欲了解如何设置你的应用程序来处理 SASS，请浏览 [theme page](/customization/theme)。",
  "loaderText5b": "安装后，你仍然需要配置你的 webpack.config.js 来解析 .sass 文件。 关于如何使用 **fibers** 做这件事，请浏览 [official documentation](https://webpack.js.org/loaders/sass-loader/)。",
  "loaderHeader6": "## 自定义动态导入",
  "loaderText6a": "Vuetify-loader 同样也允许你写入自定义匹配函数来导入你自己的项目组件。这可以在 Vue CLI 3 和 webpack 项目中完成。",
  "loaderHeader7": "## 局限性",
  "loaderText7a": "当使用 `vuetify-loader` 时，有几种情况需要手动导入组件。",
  "loaderHeader8": "### 动态组件",
  "loaderText8a": "`v-data-iterator` 可以通过内容标签属性使用任何组件。此组件必须注册为 [globally](#markup-js-a-la-carte-manual)：",
  "loaderText8b": "使用 `<component :is=\"my-component\">` 的动态组件可以注册为 [locally](#markup-js-a-la-carte-destructuring)：",
  "loaderHeader9": "### 函数组件",
  "loaderText9a": "函数组件是在运行时使用 vue 嵌入的，在他们的选项中不能有 **components** 属性。 无论在哪里使用自定义组件，在自定义功能组件中使用的任何 Vuetify 组件都必须在全球注册（推荐），或者在本地注册。",
  "loaderHeader10": "## 手动导入",
  "loaderText10a": "当不使用 Vuetify 加载器时，组件可以手动导入。 当你使用动态组件和 **vuetify-loader** 时，您还需要这样做，因为它只能解析显式用法。 这通常发生在内建 Vue `<component is=\"my-component\" />` 时。关于动态组件的更多信息在官方的 Vue [documentation](https://vuejs.org/v2/guide/components.html#Dynamic-Components)。",
  "loaderText10b": "您也可以从 .vue 文件中导入组件。"
}
