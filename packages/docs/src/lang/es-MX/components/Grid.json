{
    "header": "Grid system",
    "headerText": "Vuetify tiene un sistema de _grid_ de 12 puntos. Construido usando <kbd>flex-box</kbd>, el grid se utiliza para la distribución del contenido de la aplicación. Contiene 5 tipos de _media breakpoints_ que se usan para tamaños de pantalla u orientaciones específicas. Las props para los componentes _grid_ son en realidad clases que se derivan de sus propiedades definidas. Esto te permite especificar fácilmente las clases auxiliares como props, manteniendo la posibilidad de usar clases en cualquier parte.",
    "components": [
        "v-container",
        "v-layout",
        "v-flex",
        "v-spacer"
    ],
    "examples": [
        {
            "grid": {
                "header": "Uso",
                "desc": "El `v-container` puede ser usado para una página enfocada en el centro, o se le puede agregar la prop `fluid` para que se exitienda a todo el ancho. `v-layout` se usa para separar secciones y contiene `v-flex`. La estructura de tu distribución (layout) se describe a continuación: **v-container** &raquo; **v-layout** &raquo; **v-flex**. Cada parte de la cadena del grid es un elemento flex-box. El último `v-flex` automáticamente hace que sus hijos sean <kbd>flex: 1 1 auto</kbd>.",
                "uninverted": true
            },
            "offset": {
                "header": "Desplazamiento",
                "desc": "Los desplazamientos son útiles para compensar el espacio de elementos que no son visibles aún, o para controlar la posición del contenido. Al igual que con los _breakpoints_, puedes configurar un desplazamiento para cualquiera de los tamaños disponibles. Esto te permite modificar de manera precisa la distribución de tu aplicación para que cumpla con tus necesidades.",
                "uninverted": true
            },
            "order": {
                "header": "Orden",
                "desc": "Puedes controlar el orden de los elementos del grid. Como con los desplazamientos, puedes configurar diferente orden para diferentes tamaños. Diseña distribuciones de pantalla especializadas para cada pantalla en cualquier aplicación.",
                "uninverted": true
            },
            "directionAndAlign": {
                "header": "Dirección y Alineación",
                "desc": "Indica la dirección y la alineación de diferentes maneras. Todas las opciones de la api de <kbd>flex-box</kbd> está disponible a través de props auxiliares intuitivas.",
                "uninverted": true
            },
            "rowColumnBreakpoint": {
                "header": "Breakpoints para fila y columna",
                "desc": "Cambia dinámicamente tu distribución dependiendo de la resolución. **(cambia el tamaño de la ventana y mira cómo cambia la distribución a `row` para breakpoints más pequeños)**",
                "uninverted": true
            },
            "nestedGrid": {
                "header": "Grid anidado",
                "desc": "Los grids pueden anidarse, tal como en otros frameworks, para poder lograr distribuciones muy personalizadas.",
                "uninverted": true
            },
            "uniqueLayouts": {
                "header": "Distribuciones únicas",
                "desc": "El poder y la flexibilidad del sistema de grid de Vuetify te permite crear interfaces de usuario asombrosas.",
                "uninverted": true
            },
            "spacer": {
                "header": "v-spacer",
                "desc": "El componente `v-spacer` es útil cuando quieres llenar el espacio disponible o crear espacio entre dos componentes."
            },
            "tags": {
                "header": "Etiquetas HTML",
                "desc": "A veces querrás definir un elemento de distribución tan específico como una etiqueta, tal como `section` o `li`."
            }
        }
    ],
    "props": {
        "tag": "Mixins.Routable.props.tag",
        "alignBaseline": "Alinear los elmentos a la línea base.",
        "alignCenter": "Alinear los elementos al centro.",
        "alignContentCenter": "Alinear el contenido al centro.",
        "alignContentEnd": "Alinear los contenidos al final.",
        "alignContentSpaceAround": "Alinear el contenido al espacio alrededor.",
        "alignContentSpaceBetween": "Alinear el contenido al espacio en medio.",
        "alignContentStart": "Alinear el contenido al inicio.",
        "alignEnd": "Alinear los elementos al final.",
        "alignStart": "Alinear los elementos al principio.",
        "d-{type}": "Especifica que un elemento se muestra como flex/inline-flex/block, etc. La sintaxis es `d-{type}`. Por ejemplo `d-flex`.",
        "fillHeight": "Asegura que la altura del elemento _col_ se rellena con el padre e hijo. Importante para Safari/Firefox si el hijo es un elemento columna.",
        "justifyCenter": "Justify content to the center.",
        "justifyEnd": "Justificar el contenido al final.",
        "justifySpaceAround": "Justificar el contenido al espacio alrededor.",
        "justifySpaceBetween": "Justificar el contenido al espacio en medio.",
        "justifyStart": "Justificar el contenido al principio.",
        "reverse": "Invierte la dirección seleccionada actual (column, row).",
        "wrap": "Permite que los hijos \"salten de línea\" dentro del contenedor si los elementos ocupan más del 100%.",
        "v-container": {
            "fluid": "Quita los breakpoints de tamaño del viewport"
        },
        "v-flex": {
            "offset-(size)(1-12)": "offset-xs: extra pequeño, offset-sm: pequeño, offset-md: mediano, offset-lg: grande, offset-xl: extra grande. Ejemplo: offset-xs3",
            "order-(size)(1-12)": "order-xs: extra pequeño, order-sm: pequeño, order-md: mediano, order-lg: grande, order-xl: extra grande. Ejemplo: order-xs3",
            "(size)(1-12)": "xs: extra pequeño, sm: pequeño, md: mediano, lg: grande, xl: extra grande - 1 hasta 12"
        },
        "v-layout": {
            "row": "Configura la dirección de flex a _row_",
            "column": "Configura la dirección de flex a _column_"
        }
    },
    "breakpointHeader": "Objeto _breakpoint_",
    "breakpointText1": "Vuetify convierte los _breakpoints_ disponibles en un objeto accesible desde tu aplicación. Esto permitirá que asignes/apliques propiedades específicas y atributos basados en el tamaño del _viewport_. El objeto puede ser accesado desde:",
    "breakpointText2": "Este objeto contiene las mismas propiedades semánticas a las que estás acostumbrado a usar en el sistema del grid. Intentemos con un ejemplo del mundo real. Tienes un componente `v-dialog` que quieres convertir en un diálogo de **pantalla completa** en dispositivos móviles. Normalmente tendrías que agregar _watchers_ para el tamaño del viewport y/o revisar cuando la página cargue.",
    "breakpointText3": "Eso es mucho código sólo para el comienzo. Aún si decidieras usar la directiva [v-resize](/directives/resizing), tendrías que definir de todos modos un método para el cambio de tamaño. Con el objeto **breakpoint** puedes brincarte por completo esta lógica y dedicarte a construir tu aplicación.."
}
