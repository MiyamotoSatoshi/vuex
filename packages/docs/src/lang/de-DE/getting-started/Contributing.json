{
  "heading": "# Anleitung zur Mitarbeit",
  "headingText": "Vuetify wird durch eine erstaunliche Community ermöglicht, die Probleme meldet, Pull-Requests erstellt und wertvolles Feedback liefert. Es ist unsere Aufgabe, Ihnen die Erstellung einzigartiger Anwendungen zu ermöglichen. Die meiste Zeit stößt man auf etwas, das besser gemacht werden kann. Vielleicht finden Sie einen Fehler oder haben eine Idee für zusätzliche Funktionen. Das ist großartig! Es ist so einfach wie das Klonen des Vuetify-Repositorys, um mit der Arbeit in einer Entwicklungsumgebung zu beginnen.",
  "issueHeader": "## Probleme melden",
  "issue1": "Die Problemliste dieses Repos ist ausschließlich für Fehlerberichte und Funktionsanforderungen vorgesehen. Nicht konforme Probleme werden sofort geschlossen.",
  "issue2": "Bei allgemeinen Fragen treten Sie bitte der [Community](https://chat.vuetifyjs.com) bei.",
  "issue3": "Versuchen Sie, nach Ihrem Problem zu suchen. Möglicherweise wurde es beantwortet.",
  "issue4": "Überprüfen Sie, ob der Fehler mit der neuesten Version reproduzierbar ist.",
  "issue5": "Wenn reproduzierbar, stellen Sie bitte einen einfachen [Codepen](https://template.vuetifyjs.com) oder ein Repository bereit, welches geklont werden kann, um das erwartete Verhalten zu erzielen.",
  "issue6": "Verwenden Sie den [Issue Creator](https://issues.vuetifyjs.com), um ein neues Problem zu melden.",
  "localHeader": "## Voraussetzungen für die Entwicklungsumgebung",
  "localText1": "Vuetify enthält eine lokale Entwicklungsumgebung, die Sie starten können, um neue Features, Funktionen und Komponenten zu testen. Bevor Sie jedoch beginnen können, müssen Sie einige Dinge installieren, die Sie bei der Verwaltung der vielen Aspekte von vuetify unterstützen.",
  "localSubHeader1": "### Voraussetzung: Commitizen installieren",
  "localText2": "Das Vuetify-Team benutzt [Commitizen](https://github.com/commitizen/cz-cli) für alle Repository-Commits. Dies ermöglicht einfach zu lesende und organisierte Commits mit minimalen Änderungen an normalen Commit-Funktionen. So installieren Sie Commitizen mit npm global:",
  "localTextWarning": "Manchmal funktioniert das Erstellen von .czrc nicht mit cmd. Wenn Sie unerwartete Ergebnisse erhalten, versuchen Sie, die Datei in Ihrem Home-Verzeichnis mit VS-Code zu erstellen",
  "localText3": "Glückwunsch! Commitizen ist installiert! Wenn Sie Commits ausführen, fügen Sie Ihre Dateien wie gewohnt hinzu und ersetzen Sie `git commit -m\" Ihre Nachricht \"` durch `git cz` und befolgen Sie die Anweisungen.",
  "localText4": "Beachten Sie ebenso den \"Commit Leitfaden mit Commitizen\" weiter unten",
  "localSubHeader2": "### PM2 installieren (optional)",
  "localText5": "Wenn Sie möchten, können Sie PM2 verwenden, um mehrere Teile des Vuetify-Mono-Repos gleichzeitig auszuführen und zu verwalten (Playground, Docs, usw.). Im Stammverzeichnis sind einige PM2-Konfigurationsdateien enthalten, die alles, was Vuetify zu bieten hat hochfahren und organisieren. Um loszulegen, müssen Sie PM2 starten:",
  "setupHeader": "## Entwicklungsumgebung einrichten",
  "setupText1": "Das Einrichten Ihrer Entwicklungsumgebung ist einfach! Um zu starten forken Sie [Vuetify](https://github.com/vuetifyjs/vuetify) in Ihr eigenes Repository.",
  "setupText2": "Jetzt können Sie Ihre Entwicklungsumgebung starten!",
  "startupHeader": "## Die Entwicklungsumgebung starten",
  "startupText1": "Es gibt verschiedene Möglichkeiten, die Entwicklungsumgebungen im Vuetify Mono-Repo zu starten:",
  "startupSubHeader1": "### Yarn",
  "startupSubHeader2": "### PM2",
  "startupText4": "Verwenden Sie Folgendes, um eine vorkonfigurierte PM2-Instanz zu importieren",
  "startupText5": "Hier sind einige Befehle, die mit PM2 zum Starten/Stoppen/Neustarten von Instanzen verwendet werden können",
  "startupText6": "Derzeit gibt es nur 2 Hauptprozessnamen: `vuetify` (playground) und `vuetify-docs`",
  "commitHeader": "## Commit Leitfaden mit Commitizen",
  "commitText1": "Commitizen bietet eine flüssige Schnittstelle für die semantische Versionierung. Dies bietet eine großartige Boilerplate, die das Schreiben von Patchnotizen erleichtert.",
  "commitText2": "Wie bereits genannt sollten alle Commits [commitizen](https://github.com/commitizen/cz-cli) mit dem [conventional-changelog](https://www.npmjs.com/package/cz-conventional-changelog) benutzen. Commits sollten im Format `<type>: <subject>` oder `<type>(scope): <subject>` geschrieben werden",
  "commitSubHeader1": "### Commit Typen",
  "commitText3": "- **feat:** Commits, die zu neuen Features oder Funktionen führen. Abwärtskompatible Funktionen werden mit dem nächsten **MINOR** veröffentlicht, während wichtige Änderungen im nächsten **MAJOR** vorgenommen werden. Der Hauptteil eines Commits mit fehlerhaften Änderungen muss mit `BREAKING CHANGE` beginnen, gefolgt von einer Beschreibung, wie sich die API geändert hat.",
  "commitText4": "- **fix:** Commits, die Fehlerbehebungen in der Codebasis von vuetify beheben.",
  "commitText5": "- **docs:** Commits, die Aktualisierungen der Dokumente bereitstellen.",
  "commitText6": "- **style:** Commits, die keinen Einfluss auf die Ausführung des Codes haben, diese sind lediglich Änderungen an der Formatierung.",
  "commitText7": "- **refactor:** Commits, die weder einen Fehler beheben noch eine Funktion hinzufügen.",
  "commitText8": "- **perf:** Commits, die die Leistung verbessern.",
  "commitText9": "- **test:** Commits, die fehlende Tests hinzufügen oder vorhandene Tests korrigieren.",
  "commitText11": "- **revert:** Commits, die vorherige Commits rückgängig machen.",
  "changesHeader": "## Änderungen / Pull-Requests einreichen",
  "changesText1": "Bevor Sie Commits ausführen, sollten Sie das Neueste und Beste von dev herunterladen. Führen Sie von hier aus Konflikte zwischen Ihrem Zweig und dem Entwickler zusammen und korrigieren Sie diese. Es ist eine gute Faustregel, häufig zu aktualisieren, da die Entwicklung ständig stattfindet.",
  "changesText4": "Zuletzt, `git push` und Eröffnen eines Pull Requests.",
  "changesSubHeader1": "### Pull Requests für Vuetify",
  "changesText7": "Für Pull Requests, die sich auf Vuetify beziehen:\n* Für **Fehlerbehebungen** und **Aktualisierung der Dokumentation** wird der Pull Request  unter `master` eingereicht.\n* Für **neue Feature** und **Verbesserungen** wird der Pull Request unter `dev` eingereicht\n* Für **Fehler** and **kritische Korrekturen** bezogen auf **v1.5/LTS** werden die Pull Requests unter `stable` eingereicht\n* Für alle **Feature**, die **Breaking Changes** beinhalten wird der Pull Request unter `next` eingereicht ",
  "changesSubHeader2": "### Pull Requests für Docs",
  "changesText8": "Alle Pull Requests, die sich auf Vuetify docs beziehen werden im `master`-Branch eingereicht."
}
