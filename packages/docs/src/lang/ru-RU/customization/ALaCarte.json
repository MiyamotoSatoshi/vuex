{
  "heading": "# A-la-carte (treeshaking)",
  "treeshakeWarning": "Treeshaking работает только с Webpack 4 в **production mode**. Это автоматически доступно при использовании Vue CLI.",
  "loaderHeader1": "## vuetify-loader",
  "loaderText1a": "Отслеживание всех компонентов, которые вы используете, может быть настоящим ужасом. [vuetify-loader](https://github. om/vuetifyjs/vuetify-loader) смягчает эту боль, автоматически импортируя все компоненты Vuetify, где вы их используете. Это также сделает code-splitting более эффективным, так как webpack будет загружать только компоненты, необходимые для отображения чанка.",
  "loaderHeader2": "### Импорт",
  "loaderText2a": "Чтобы воспользоваться компонентами a-la-carte, вы должны импортировать Vuetify из **vuetify/lib**.",
  "optionsInfo": "Объект параметров, который вы передаете в качестве второго аргумента **Vue.use** также может включать components, directives и transitions property.",
  "loaderHeader3": "### Установка vue.config.js",
  "loaderText3a": "Хотя это не рекомендуется, вы можете отказаться от использования Vue CLI плагина и вместо этого вручную настроить загрузчик через [configure webpack](https://cli. uejs.org/config/#configurewebpack) из Vue CLI.",
  "loaderHeader4": "### Установка Webpack",
  "loaderText4a": "Вы также можете явно установить loader для проектов на основе webpack. Подобно настройке vue.config.js, вы просто добавляете loader в webpack plugins вашего проекта.",
  "loaderHeader5": "## Требуемые стили",
  "loaderText5a": "Когда вы импортируете из `vuetify/lib`, также используются базовые стили фреймворка. Каждый компонент индивидуально отвечает за свои стили и будет скомпилирован точно так же. Если вы используете Vue CLI и плагин `vue-cli-plugin-vuetify`, это делается для вас автоматически, и вы можете **пропустить** этот раздел. Если вы работаете в проекте, где у вас нет доступа к клиенту, вы можете вручную включить необходимые пакеты.",
  "sassInfo": "Для более подробной информации о том, как настроить ваше приложение для обработки SASS, перейдите на [страницу темы](/customization/theme).",
  "loaderText5b": "После установки вам необходимо настроить webpack.config.js для разбора файлов .sass. Для получения дополнительной информации о том, как сделать это с **fibers**, ознакомьтесь с [официальной документацией](https://webpack.js.org/loaders/sass-loader/).",
  "loaderHeader6": "## Custom dynamic imports",
  "loaderText6a": "Vuetify-loader также позволяет написать собственные пользовательские функции для импорта компонентов вашего проекта. Это может быть сделано как в Vue CLI, так и в webpack проектах.",
  "loaderHeader7": "## Ограничения",
  "loaderText7a": "При использовании `vuetify-loader` существует несколько сценариев, требующих ручного импорта компонентов.",
  "loaderHeader8": "### Динамические компоненты",
  "loaderText8a": "`v-data-iterator` может использовать любой компонент через prop. Этот компонент должен быть зарегистрирован [глобально](#markup-js-a-la-carte-manual):",
  "loaderText8b": "Динамические компоненты, используемые с `<component :is=\"my-component\">`, могут быть зарегистрированы [локально](#markup-js-a-la-carte-destructuring):",
  "loaderHeader9": "### Функциональные компоненты",
  "loaderHeader10": "## Ручной импорт",
  "loaderText10a": "Компоненты могут быть импортированы вручную, если не используется загрузчик Vuetify. Вы также захотите сделать это при использовании динамических компонентов и **vuetify-loader**, поскольку он анализирует только явное использование. Это обычно происходит при использовании встроенного в Vue `<component is=\"my-component\" />`. Более подробная информация о динамических компонентах находится в официальной Vue [документации](https://vuejs.org/v2/guide/components.html#Dynamic-Components).",
  "loaderText10b": "Вы также можете импортировать компоненты в .vue файлы, как показано ниже."
}
