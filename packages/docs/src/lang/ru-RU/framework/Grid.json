{
  "heading": "# Система Grid",
  "headingText": "Vuetify имеет 12-точечную систему сеток. Построенная с использованием <kbd> flex-box </kbd>, сетка используется для компоновки содержимого приложения. Она содержит 5 типов точек прерывания, которые используются для ориентации определённых размеров экрана или ориентации. Реквизиты для компонентов сетки фактически являются классами, которые получены из их определённых свойств. Это позволяет вам легко указать эти вспомогательные классы в качестве свойства, при этом всё ещё предоставляя классы для использования в любом месте.",
  "examples": {
    "offset": {
      "heading": "### Смещение",
      "desc": "Смещения полезны для компенсации элементов, которые пока не видны. Так же, как и с точками останова, вы можете установить смещение для любых доступных размеров. Это позволяет вам точно настроить макет приложения.",
      "uninverted": true
    },
    "order": {
      "heading": "### Порядок",
      "desc": "Вы можете управлять порядком элементов сетки. Как и в случае смещений, вы можете устанавливать разный порядок для разных размеров. Дизайн специализированных макетов экрана, которые подходят для любого приложения.",
      "uninverted": true
    },
    "directionAndAlign": {
      "heading": "### Направление и выравнивание",
      "desc": "Назначьте направление и выравнивание различными способами. Все доступные <kbd> flex-box </kbd> api доступны через интуитивные вспомогательные props.",
      "uninverted": true
    },
    "rowColumnBreakpoint": {
      "heading": "### Точки останова строки и столбца",
      "desc": "Динамически изменяйте свой макет на основе разрешения. **(измените размер экрана и посмотрите, как изменится `row` на небольших контрольных точках)**",
      "uninverted": true
    },
    "nestedGrid": {
      "desc": "Grid могут быть вложенными, подобно другим фреймворкам, для того, чтобы достичь очень настраиваемых макетов.",
      "uninverted": true
    },
    "uniqueLayouts": {
      "desc": "Сила и гибкость сетки Vuetify позволяют создавать удивительные пользовательские интерфейсы.",
      "uninverted": true
    },
    "spacer": {
      "desc": "Компонент `v-spacer` полезно, когда вы хотите заполнить свободное пространство или сделать пространство между двумя компонентами."
    },
    "tags": {
      "desc": "Иногда вам нужно указать элемент макета в качестве определённого тега, например, элемент `section` или `li`."
    }
  },
  "props": {
    "alignBaseline": "Совместите элементы с базовым уровнем.",
    "alignCenter": "Выровняйте предметы по центру.",
    "alignContentCenter": "Совместите содержимое с центром.",
    "alignContentEnd": "Совместите содержимое до конца.",
    "alignContentSpaceAround": "Совместите содержимое с пространством.",
    "alignContentSpaceBetween": "Совместите содержимое с пространством между ними.",
    "alignContentStart": "Совместите содержимое с началом.",
    "alignEnd": "Выровняйте элементы до конца.",
    "alignStart": "Выровняйте элементы до начала.",
    "d-{type}": "Укажите, чтобы отобразить элемент как flex/inline-flex/block и т. Д. Синтаксис - `d- {type}`. Например, `d-flex`.",
    "fillHeight": "Убедитесь, что высота элемента col заполняется родительским и дочерним. Важно для Safari / Firefox, если дети являются элементом столбца.",
    "justifyCenter": "Выравнять контент по центру.",
    "justifyEnd": "Выравнять контент в конец",
    "justifySpaceAround": "Выравнять контент space around.",
    "justifySpaceBetween": "Выравнять контент space between.",
    "justifyStart": "Выравнять контент start.",
    "v-container": {
      "fluid": "Удаляет контрольные точки размера viewport"
    },
    "v-layout": {
      "row": "Устанавливает направление смещения в ряд",
      "column": "Устанавливает направление flex в столбец"
    }
  }
}
