{
  "header": "# Faites partie de quelque chose de plus grand !",
  "headerText": "Vuetify est rendu possible par une communauté extraordinaire qui soumet des tickets, crée des demandes de fusion et fournit des commentaires précieux. Notre travail consiste à vous permettre de créer des applications étonnantes. Souvent, vous rencontrez quelque chose qui peut être amélioré. Peut-être trouvez-vous un bug ou avez-vous une idée de fonctionnalités supplémentaires ? C'est génial ! Il suffit de cloner le projet Vuetify pour commencer à travailler dans un environnement de développement.",
  "issueHeader": "## Signaler des problèmes",
  "issue1": "La liste des tickets de ce projet est exclusivement destinée aux rapports de bugs et aux demandes de fonctionnalités. Les tickets non conformes seront fermés immédiatement.",
  "issue2": "Pour des questions générales, veuillez rejoindre la [community](https://chat.vuetifyjs.com).",
  "issue3": "Essayez de rechercher votre problème, il a peut-être déjà été résolu.",
  "issue4": "Vérifiez si l’erreur est reproductible avec la dernière version.",
  "issue5": "Si elle est reproductible, veuillez fournir un simple [codepen](https://template.vuetifyjs.com) ou un projet qui peut être cloné pour produire le comportement attendu.",
  "issue6": "Veuillez utiliser le [créateur de tickets](https://issues.vuetifyjs.com) pour créer un nouveau ticket.",
  "localHeader": "## Pré-requis pour l'environnement de développement",
  "localText1": "Vuetify contient un environnement de développement local que vous pouvez démarrer pour tester de nouvelles fonctionnalités, nouveautés et composants. Avant de commencer, vous devez installer quelques éléments qui vous aideront à gérer les nombreux aspects de vuetify.",
  "localSubHeader1": "### Pré-requis : installation de Commitizen",
  "localText2": "L’équipe de Vuetify utilise [Commitizen](https://github.com/commitizen/cz-cli) pour tous les commits du dépôt. Cela permet facilement de lire et d'organiser les commits avec un minimum de changement sur les fonctions de validation. Pour commencer, installer Commitizen globalement en utilisant npm :",
  "localTextWarning": "Parfois, la création de .czrc ne fonctionnera pas avec la ligne de commande. Si vous obtenez des résultats inattendus, essayez de créer le fichier dans votre répertoire home à l’aide de VS Code",
  "localText3": "Félicitations ! Commitizen est installé ! Lorsque vous effectuez des validations, ajoutez vos fichiers normalement et remplacez `git commit -m \"votre message\"` par `git cz` et suivez les instructions.",
  "localText4": "Voir \"Lignes directrices de modifications avec Commitizen\" ci-dessous pour connaître les instructions de modifications",
  "localSubHeader2": "### Installer PM2 (facultatif)",
  "localText5": "Si vous le souhaitez, vous pouvez utiliser PM2 pour exécuter et gérer plusieurs parties du dépôt monolithique (mono-repo) Vuetify simultanément (Playground, Docs, etc.). Le répertoire racine contient quelques fichiers de configuration PM2 qui démarrent et gèrent tout ce que Vuetify a à offrir. Pour commencer, vous devez démarrer PM2 :",
  "setupHeader": "## Configurer l'environnement de développement",
  "setupText1": "Configurer votre environnement de développement est facile ! Pour démarrer, dupliquez (fork) [Vuetify](https://github.com/vuetifyjs/vuetify) dans votre propre répertoire.",
  "setupText2": "Vous êtes maintenant prêt à démarrer votre environnement de développement !",
  "startupHeader": "## Démarrage de l'environnement de développement",
  "startupText1": "Il existe plusieurs façons de démarrer les environnements de développement dans Vuetify mono-repo :",
  "startupSubHeader1": "### Yarn",
  "startupSubHeader2": "### PM2",
  "startupText4": "Pour importer une instance PM2 pré-configurée, utilisez les éléments suivants",
  "startupText5": "Voici quelques commandes à utiliser avec PM2 pour démarrer / arrêter / redémarrer les instances",
  "startupText6": "Actuellement, il n'y a que 2 noms de processus majeurs : `vuetify` (playground) et `vuetify-docs`",
  "commitHeader": "## Lignes directrices de modifications avec Commitizen",
  "commitText1": "Commitizen fournit une interface fluide pour gérer le contrôle de version sémantique. Ceci fournit un excellent passe-partout facilitant la rédaction de notes de patch.",
  "commitText2": "Tous les commits doivent utiliser [commitizen](https://github.com/commitizen/cz-cli) avec le [conventional-changelog](https://www.npmjs.com/package/cz-conventional-changelog), comme indiqué dans la note au-dessus. Les validations doivent suivre le format `<type>: <sujet>` ou `<type> (portée): <sujet>`",
  "commitSubHeader1": "### Types de commits",
  "commitText3": "– **feat: ** Commits qui donnent lieu à de nouvelles fonctionnalités. Les fonctionnalités rétrocompatibles seront publiées avec la prochaine version **MINEURE**, tandis que les modifications les plus importantes seront apportées à la prochaine version **MAJEURE**. Le corps d'un commit avec des changements importants doit commencer par `BREAKING CHANGE`, suivi d'une description de la façon dont l'API a changé.",
  "commitText4": "– **fix : ** Commits qui corrigent des bugs dans le code de Vuetify.",
  "commitText5": "– **docs :** Commits fournissant des mises à jour de la documentation.",
  "commitText6": "– **style :** Commits n'affectant pas le fonctionnement du code, il s'agit simplement de modifications de la mise en forme.",
  "commitText7": "– **refactor :** Commits qui ne corrigent ni un bug ni ajoute une fonctionnalité.",
  "commitText8": "– **perf: ** Commits qui améliorent les performances.",
  "commitText9": "– **test :** Commits qui ajoutent des tests ou corrigent ceux existants.",
  "commitText10": "– **chore :** Autres commits qui ne modifient pas les fichiers src et test.",
  "commitText11": "– **revert :** Commits qui annulent les commits précédents.",
  "changesHeader": "## Soumission de modifications / demandes de fusions",
  "changesText1": "Avant de faire des commits, vous aurez besoin de récupérer les dernières nouveautés de la branche dev. À partir de là, fusionnez et résolvez tous les conflits entre votre branche et dev. C'est une bonne pratique de récupérer fréquemment les modifications car le développement se produit constamment.",
  "changesText2": "Dans git, ajoutez tous les fichiers pertinents.",
  "changesText3": "Commitez avec commitizen en utilisant la commande `git cz`. De là, vous suivrez une série de choix. Assurez-vous de sélectionner le type approprié (voir **Lignes directrices de modifications avec Commitizen** ci-dessus)",
  "changesText4": "Enfin, `git push` et ouvrez une demande de fusion.",
  "changesSubHeader1": "### Demandes de fusion pour Vuetify",
  "changesSubHeader2": "### Demandes du fusion pour la documentation",
  "changesText8": "Pour toute demande de fusion liée à la documentation de Vuetify, soumettez votre demande d'extraction à la branche `master`."
}
