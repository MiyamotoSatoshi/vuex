{
  "heading": "# Test unitaire",
  "headingText": "Les tests unitaires sont une partie importante (et parfois ignorée) du développement d'applications. Ils nous aident à sécuriser nos processus et nos flux de travail, en veillant à ce que les parties les plus critiques de nos projets soient protégées contre les erreurs accidentelles ou les surbrillances dans notre développement. C'est pourquoi Vue a son propre utilitaire de test appelé [vue-test-utils](https://vue-test-utils.vuejs.org/). Il fournit des fonctionnalités utiles pour interagir avec les composants Vue et travaille avec de nombreux lanceurs de test populaires.",
  "alert": "Vuetify utilise Typescript et doit actuellement importer et étendre l'objet Vue. Cela a le potentiel dans certaines applications pour générer un avertissement **$attrs** ou **$listeners** est en lecture seule. Il y a en ce moment une [discussion Github](https://github.com/vuetifyjs/vuetify/issues/4068) avec de potentiels contournements dans une variété de cas d'utilisation. Si vous avez des questions supplémentaires, veuillez nous rejoindre dans notre [communauté en ligne](https://community.vuetifyjs.com).",
  "runnerHeader": "## Mise en place du lanceur de tests",
  "runnerText1": "Vous trouverez d'autres informations sur la façon de configurer un lancement de test avec Vue CLI 3 sur la [documentation officielle](https://vue-test-utils.vuejs.org/guides/getting-started.html). En un coup d'oeil, Vue CLI 3 a commencé des dépôts pour les lanceurs de test suivants :",
  "runnerText2": [
    "[Jest](https://github.com/vuejs/vue-test-utils-jest-example)",
    "[Mocha](https://github.com/vuejs/vue-test-utils-mocha-webpack-example)",
    "[tape](https://github.com/eddyerburgh/vue-test-utils-tape-example)",
    "[AVA](https://github.com/eddyerburgh/vue-test-utils-ava-example)"
  ],
  "setupHeading": "## Bootstrapping Vuetify",
  "setupText1": "Afin d'utiliser correctement Typescript, Vuetify étend l'objet Vue. Ceci a le potentiel de [cause problèmes](https://github.com/vuetifyjs/vuetify/issues/4068) comme indiqué dans l'alerte ci-dessus. Au lieu d'utiliser une [instance localVue](https://vue-test-utils.vuejs.org/api/options.html#localvue), nous devons plutôt installer Vuetify globalement dans le fichier de configuration des tests unitaires. Cela peut varier entre les coureurs de test. Assurez-vous de consulter la documentation appropriée sur les fichiers de configuration.",
  "specHeader": "## Tests de Spec",
  "specText1": "La création de tests unitaires dans Vuetify est similaire à **vuex** et **vue-router** en ce sens que vous utiliserez l'objet Vuetify dans une instance **localVue** et passerez une instance aux options de la fonction mount.",
  "specText2": "Créons un exemple de cas d'utilisation de test que nous pourrions trouver dans notre application.",
  "specText3": "Dans l'exemple ci-dessus, nous avons créé un composant personnalisé avec un prop **title** et un `v-btn` qui émet un event personnalisé lorsque cliqué. Nous voulons maintenant créer des tests qui assurent que ce comportement fonctionne correctement et continue à le faire après des changements futurs. Les exemples ci-dessous sont créés avec le lanceur de tests [Jest](https://jestjs.io/).",
  "specAlert": "Si vous êtes coincé et avez des questions supplémentaires sur les tests ou besoin d'aide en général, veuillez nous rejoindre dans notre [communauté en ligne](https://community.vuetifyjs.com).",
  "efficiencyHeader": "### Tester efficacement",
  "efficiencyText1": "Lorsque vous écrivez des tests, vous vous retrouverez souvent à répéter les mêmes choses. Dans ce cas, il est avantageux de créer des fonctions d'aide pour réduire la duplication de chaque test unitaire. Fondamentalement, appliquer le principe [DRY](https://fr.wikipedia.org/wiki/Don%27t_repeat_yourself) à notre code.",
  "efficiencyText2": "L'une des duplications de code les plus courantes dans les tests unitaires sont les fonctions mount. Cela peut facilement être réduit en une fonction réutilisable pour chaque lancement.",
  "mockHeader": "### Mocking Vuetify",
  "mockText1": "Beaucoup de composants de Vuetify utilisent l'objet `$vuetify` global pour obtenir des paramètres tels que des informations par défaut sur le texte ou le point d'arrêt. Lorsque vous testez ces composants, vous devrez fournir un objet mock `vue-test-utils`.",
  "mockText2": "Gardez à l'esprit, vous **devez seulement étouffer** les services qui sont utilisés. tels que **lang** ou **application**. Vous pouvez également importer ces services manuellement.",
  "mockText3": "Une liste complète de tous les services disponibles est listée ci-dessous :",
  "mockList": [
    "[application](https://github.com/vuetifyjs/vuetify/tree/master/packages/vuetify/src/services/application)",
    "[breakpoint](https://github.com/vuetifyjs/vuetify/tree/master/packages/vuetify/src/services/breakpoint)",
    "[goto](https://github.com/vuetifyjs/vuetify/tree/master/packages/vuetify/src/services/goto)",
    "[icons](https://github.com/vuetifyjs/vuetify/tree/master/packages/vuetify/src/services/icons)",
    "[lang](https://github.com/vuetifyjs/vuetify/tree/master/packages/vuetify/src/services/lang)",
    "[theme](https://github.com/vuetifyjs/vuetify/tree/master/packages/vuetify/src/services/theme)"
  ],
  "e2eHeader": "## Tests E2E",
  "e2eText1": "Vuetify passe les attributs `data-*` des composants aux éléments HTML pertinents, ce qui permet de localiser facilement le cadre de test E2E.",
  "e2eText2": "Par exemple, [Cypress](https://docs.cypress.io/guides/references/best-practices.html#How-It-Works) recommande d'ajouter des attributs `data-cy` pour rendre les éléments cibles faciles."
}
