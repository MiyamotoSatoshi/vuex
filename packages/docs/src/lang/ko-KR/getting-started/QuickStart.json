{
  "heading": "빠른 시작",
  "headingText": "Vuetify 프로젝트를 바로 시작하려면 _(공식 예제를 바탕으로한)_ Vuetify Vue CLI 패키지를 사용하세요. Vuetify는 **SSR** (서버사이드 렌더링), **SPA** (싱글페이지 어플리케이션), **PWA** (프로그레시브 웹 어플리케이션)와 단독 **HTML** 페이지를 지원합니다.",
  "vueCliText1": "Vue CLI 3 은 이전 보다 더욱 쉽게 시작할 수 있도록 도와주기 위해 만들어진 다음 세대의 cli 툴 입니다. Vue CLI 3를 가지고 당신의 앱을 시작하면 힘든 업데이트 절차 없이 Vuetify 의 업데이트는 물론이고 공식적인 웹팩 업데이트와 config 변경사항들을 얻을 수 있습니다.",
  "vueCliText2": "Vue CLI 3을 사용하기 위한 더 많은 정보는. [official documentation](https://cli.vuejs.org/guide/) 에 방문해 보세요.",
  "vueCliText3": "**팁**: 만약 이미 **Vue CLI** 가 설치되어 있다면, 터미널에서 <kbd>vue --version</kbd> 명령을 입력해 최신 버전이 설치되어 있는지 확인할 수 있습니다.",
  "vueCliText4": "Cli 가 설치되고 나면, 당신은 새로운 프로젝트 스케폴드를 생성할 수 있습니다. 특별히 포함해야할 패키지들(예를들면 _vuex_ 나 _vue-router_)이 존재하지 않는다면 _default install_ 을 선택하세요. 이것은 당신이 선택한 옵션들과 함께 시작할 준비가된 새로운 Vue 프로젝트를 생성합니다.",
  "vueCliText5": "이제 프로젝트가 초기화 되었으므로, cli 를 사용해서 [Vuetify 패키지](https://github.com/vuetifyjs/vue-cli-plugin-vuetify) 를 추가할 수 있다.",
  "vueCliText6": "이것은 설치를 위한 몇 가지 옵션을 제공한다. [a-la-carte](/customization/a-la-carte) 을 가진 기본 프리셋이 이미 활성화 되어있다.",
  "vueCliText7": "설치가 완료된 후에 간단하게 <kbd>yarn serve</kbd> 혹은 <kbd>npm run serve</kbd> 명령을 실행하여 어플리케이션을 시작한다.",
  "uiText1": "Vuetify 는 _@vue/cli_를 위한 새로운 비주얼 어플리케이션인, **Vue UI** 를 사용해서도 설치 할 수 있다. 최신 버전의 Vue CLI 가 설치되어있는지 확인하고 터미널에서 다음을 입력한다:",
  "browserHeader": "지원하는 브라우져",
  "browserText": "Vuetify는 웹개발의 다음 단계로 나아가는 것을 추구하는 진보적인 프레임워크입니다. 이 과업을 성취하기 위해, 오래된 버전의 인터넷 익스플로러를 지원하지 않는 다소의 희생이 있어야만 했습니다. 이 리스트는 호환되는 브라우저에 대한 완벽한 리스트는 아니지만 주로 지원하는 브라우저들입니다.",
  "newHeader": "새로운 어플리케이션",
  "existingHeader": "기존 어플리케이션",
  "existingText1": "Vuetify를 기존 프로젝트에 적용하려면 Vuetify를 node_modules에 반드시 설치해야 합니다. 이를 위해 `npm` 이나 `yarn`을 사용할 수 있습니다. 이 두 패키지 매니져는 당신의 어플리케이션에 사용되는 리소스를 관리할 수 있도록 해줍니다.",
  "alert2": "경고: Vuetify 는 css 충돌을 최대한 줄이려고 노력하지만, Vuetify 를 기존의 프로젝트의 추가할때 당신의 커스텀 스타일들과 문제를 만들지 않을 거라고 보장하지는 못합니다.",
  "ie11Header": "IE11 & Safari 9 지원",
  "ie11Text2": "인터넷 익스플로러 `<template>` 태그를 제대로 지원하지 못하기 때문에 항상 완전히 컴파일된 DOM 요소들을 브라우져로 보내야 합니다. This can be done by either building your Vue code in advance or by creating helper components to replace the dom elements. For instance, if sent directly to IE, this will fail:",
  "browserSupport": {
    "supported": "지원됨",
    "notSupported": "지원되지 않음",
    "polyfill": "폴리필(polyfill)로 지원"
  }
}
