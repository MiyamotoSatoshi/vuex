{
  "heading": "# Contributing Guide",
  "headingText": "Vuetify is made possible by an amazing community that submits issues, creates pull requests, and provides invaluable feedback. It is our job to enable you to create amazing applications. A lot of the time, you come across something that can be made better. Maybe you find a bug, or you have an idea for additional functionality. That's great! It's as easy as cloning the Vuetify repository to get started working in a development environment.",
  "reportingHeading": "## Reporting Issues",
  "reportingText1": "The issue list of this repo is exclusively for bug reports and feature requests. Non-conforming issues will be closed immediately. Before reporting an issue, ensure that:",
  "reportingText2": [
    "Search for a similar [issues](https://github.com/vuetifyjs/vuetify/issues), it may have been answered.",
    "Try to reproduce with the [latest](https://github.com/vuetifyjs/vuetify/releases/latest) or [lts](https://github.com/vuetifyjs/vuetify/tree/stable) (long-term-support) version in a [codepen](https://template.vuetifyjs.com/) or repository that can be be cloned to produced the expected behavior.",
    "The reproduction is **MINIMAL** and concise"
  ],
  "reportingText3": "These steps ensure that we have all of the information *necessary* to quickly triage and resolve your issue. Once your reproduction is complete, submit a new issue using the [Vuetify Issue Creator](https://issues.vuetifyjs.com/).",
  "setupHeader": "## Setting up your environment",
  "setupText1": "If you are making a [Pull Request](https://github.com/vuetifyjs/vuetify/pulls), please [fork the Vuetify repository](https://github.com/vuetifyjs/vuetify) before continuing; More information on forking repositories is located in the [Fork a Repo](https://help.github.com/en/github/getting-started-with-github/fork-a-repo) documentation. Otherwise you can simply click the <kbd>Clone or download</kbd> option on the Vuetify repository page.",
  "setupText1a": "If you are new to the process of contributing to Open Source, it's recommended that you clone using **https**. More information on [Which remote URL](https://help.github.com/en/github/using-git/which-remote-url-should-i-use) to use can be found on the GitHub documenation page.",
  "setupText1b": "Once cloned, navigate to the folder by typing <kbd>cd vuetify</kbd> and then running the following commands:",
  "setupText2": "The build process compiles all of the Vuetify packages for development and may take awhile (grab some â˜•). Once the packages are built, start your local development server by running <kbd>yarn dev</kbd> in the terminal. ",
  "startingHeading": "## Starting your environment",
  "startingText1": "There are a few ways to startup the dev environments in Vuetify mono-repo. If you are using our [PM2 guide](#process-manager-2-pm-2), you can skip this section. ",
  "recHeading": "## Recommended packages",
  "recText1": "The following are recommended packages to use when developing in Vuetify:",
  "czHeading": "### Commitizen",
  "czText1": "The [Vuetify team](https://vuetifyjs.com/introduction/meet-the-team/) uses [Commitizen](https://github.com/commitizen/cz-cli) for all repository commits. This allows for easy to read and organized commits with minimal change to normal commit functions. To get started, [globally install the commitizen package](https://github.com/commitizen/cz-cli#conventional-commit-messages-as-a-global-utility) using [yarn](https://yarnpkg.com/) by running the following commands in your terminal:",
  "czTextWarning": "Sometimes creating a `.czrc` file does not work using the **command prompt**. If you get unexpected results, create the file in your user folder located in the home directory. This is typically located on your primary harddrive in the `Users` folder.",
  "czText2": "Congrats! Commitizen is installed! When you do commits, add your files like normal and replace `git commit -m \"your message\"` with `git cz` and follow the prompts.",
  "czText3": "More information on [Commit Guidelines w/Commitizen](#commit-guidelines-w-commitizen) can be found below.",
  "pm2Heading": "### Process Manager 2 (PM2)",
  "pm2Text1": "When working with Vuetify it is common to have the Playground, Documentation, and Build running at the same time. [PM2](https://pm2.keymetrics.io/) improves this process by running the dev processes for **each** package automatically. To get started, globally install the [pm2](https://github.com/Unitech/pm2) package by running the folowing commands:",
  "pm2Text2": "Once installed, start the Vuetify [ecosystem file](https://pm2.keymetrics.io/docs/usage/application-declaration/) with the following commands:",
  "pm2Text3": "You can check the status and many other options for your PM2 instances by using any of the following commands:",
  "commitHeader": "## Commit Guidelines w/Commitizen",
  "commitText1": "Commitizen provides a fluid interface for handling semantic versioning. This provides a great boilerplate making it easier to write patch notes.",
  "commitText2": "All commits should use [commitizen](https://github.com/commitizen/cz-cli) with the [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) as noted above. Commits should follow the format `<type>: <subject>` or `<type>(scope): <subject>`",
  "commitSubHeader1": "### Commit types",
  "commitText3": "- **feat:** Commits that result in a new features or functionalities. Backwards compatible features will release with the next **MINOR** whereas breaking changes will be in the next **MAJOR**. The body of a commit with breaking changes must begin with `BREAKING CHANGE`, followed by a description of how the API has changed.",
  "commitText4": "- **fix:** Commits that provide fixes for bugs within vuetify's codebase.",
  "commitText5": "- **docs:** Commits that provide updates to the docs.",
  "commitText6": "- **style:** Commits that do not affect how the code runs, these are simply changes to formatting.",
  "commitText7": "- **refactor:** Commits that neither fixes a bug nor adds a feature.",
  "commitText8": "- **perf:** Commits that improve performance.",
  "commitText9": "- **test:** Commits that add missing or correct existing tests.",
  "commitText10": "- **chore:** Other commits that don't modify src or test files.",
  "commitText11": "- **revert:** Commits that revert previous commits.",
  "changesHeader": "## Submitting Changes / Pull Requests",
  "changesText1": "Before doing any commits, you will want to pull down the latest and greatest from dev. From here, merge, and resolve any conflicts between your branch and dev. Its a good rule of thumb to pull frequently as development is constantly happening.",
  "changesText2": "In git, add all relevant files.",
  "changesText3": "Commit with commitizen using the command `git cz`. From here you will follow through a series of props. Make sure to select the appropriate type (see **Commit Guidelines w/Commitizen** above)",
  "changesText4": "Lastly, `git push` and open a pull request.",
  "changesSubHeader1": "### Pull Requests For Vuetify",
  "changesText7": "Pull requests related to Vuetify:   \n* For **bug fixes** and **documentation updates** submit pull requests to `master`.   \n* For **new features** and **enhancements** submit pull requests to `dev`   \n* For **bugs** and **critical fixes** related to **v1.5/LTS** submit pull requests to `stable`   \n* For any **features** that contain **breaking changes** submit pull requests to `next` ",
  "changesSubHeader2": "### Pull Requests For Docs",
  "changesText8": "For any pull requests related to Vuetify docs, submit your pull request to the `master` branch.",
  "changesSubHeader3": "### Pull Requests For Docs - Language",
  "changesText9": "We do not accept PR's for any doc changes pertaining to language other than `en`. All changes for languages other than `en` are to be submitting through our Crowdin project. To get started simply select `Help Translate` in the language drop down of the docs. Languages will not be added until having more than 15% of their translations completed."
}
