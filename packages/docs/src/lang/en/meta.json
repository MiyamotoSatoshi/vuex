{
  "": {
    "title": "Vue Material Design Component Framework",
    "description": "Vuetify is a Material Design component framework for Vue.js. It aims to provide all the tools necessary to create beautiful content rich applications.",
    "keywords": "vue, material design components, vue components, material design components, vuetify, vuetify.js, component framework"
  },
  "404": {
    "title": "Whoops, 404",
    "description": "Whoops, looks like whatever you are looking for is not there!",
    "keywords": ""
  },
  "getting-started/quick-start": {
    "title": "Quick start",
    "description": "Get started with Vue and Vuetify in no time. Support for Vue CLI 3, Webpack, Nuxt and more.",
    "keywords": "quick start, vuetify templates, installing vuetify, install vuetify"
  },
  "getting-started/pre-made-layouts": {
    "title": "Application layouts",
    "description": "Select from a multitude of Vuetify Material Design layouts built to help kickstart your application.",
    "keywords": "pre-defined layouts, layouts, application layout, material design layouts"
  },
  "getting-started/unit-testing": {
    "title": "Unit testing",
    "description": "Learn how to create unit tests with vue-test-utils and Vuetify components in your Vue application.",
    "keywords": "unit testing vuetify, testing vuetify, vuetify spec tests"
  },
  "getting-started/why-vuetify": {
    "title": "Why Vuetify?",
    "description": "Vuetify has an extremely active community, provides easy to use Material Design components and is consistently updated.",
    "keywords": "why vuetify, why choose vuetify, best vue framework, best ui framework"
  },
  "getting-started/frequently-asked-questions": {
    "title": "Frequently asked questions",
    "description": "Stuck on a problem? Check out the most frequently asked questions by the Vuetify community.",
    "keywords": "frequently asked questions, faq"
  },
  "getting-started/meet-the-team": {
    "title": "Meet the team",
    "description": "Meet the team responsible for building Vuetify. These are the core individuals who drive the vision of the framework.",
    "keywords": "vuetify dev team, vuetify core team"
  },
  "getting-started/sponsors-and-backers": {
    "title": "Sponsors and backers",
    "description": "Help support Vuetify by backing the project. This helps with the maintenance of existing features and the development of new ones.",
    "keywords": "sponsor, backer, donations, patron, supporting vuetify, vuetify support"
  },
  "getting-started/long-term-support": {
    "title": "Long-term support",
    "description": "Vuetify provides long-term support to the last major release for 12 months for critical bugs and security vulnerabilities.",
    "keywords": "lts, long-term support"
  },
  "getting-started/contributing": {
    "title": "Contributing",
    "description": "Contributing to open source helps developers access amazing tools for free. Learn how you can help develop in the Vuetify framework.",
    "keywords": "contribute, contributing, feature request"
  },
  "getting-started/roadmap": {
    "title": "The Vuetify Roadmap",
    "description": "The upcoming planned features and new functionality coming to Vuetify. New components, new directives, and much much more!.",
    "keywords": "vuetify roadmap, future plans, new vuetify features"
  },
  "getting-started/consulting-and-support": {
    "title": "Consulting and support",
    "description": "Get professional help, support and guidance for your Vuetify application from the creator, John Leider.",
    "keywords": "vuetify consulting, vuetify support, vuetify help"
  },
  "getting-started/enterprise": {
    "title": "Vuetify for enterprise",
    "description": "Get the tools you need to continuously catalog and understand the open source software that your application depends on with the Tidelift subscription.",
    "keywords": "vuetify enterprise, tidelift enterprise, tidelift vuetify"
  },
  "customization/accessibility": {
    "title": "Accessibility",
    "description": "See examples and the advantages of having accessibility (a11y) support in Vuetify components.",
    "keywords": "a11y, accessibility, usability"
  },
  "customization/a-la-carte": {
    "title": "A-la-carte (treeshaking)",
    "description": "A La Carte provides automatic treeshaking via the vuetify-loader. Use only the features that you need and drastically reduce your package bundle size.",
    "keywords": "a la carte, a-la-carte, vuetify single import, vuetify import, component importing, reduce vuetify size"
  },
  "customization/breakpoints": {
    "title": "Breakpoints",
    "description": "Access the Vuetify grid system inside of components using the Breakpoint service.",
    "keywords": "breakpoints, grid breakpoints"
  },
  "customization/icons": {
    "title": "Icons",
    "description": "Vuetify supports Material Design Icons, Font awesome and other icon sets through prefixes and global options.",
    "keywords": "vue icon component, iconfont, icon libraries, vuetify icons"
  },
  "customization/internationalization": {
    "title": "Internationalization (i18n)",
    "description": "Vuetify supports language Internationalization (i18n) from a wide range of locales and easily integrates vue-i18n.",
    "keywords": "i18n, language, internationalization"
  },
  "customization/rtl": {
    "title": "RTL (bidirectionality)",
    "description": "Vuetify is configurable and compatible with RTL languages.",
    "keywords": "rtl, right-to-left, bidirectionality"
  },
  "customization/sass-variables": {
    "title": "SASS variables",
    "description": "Customize Vuetify's internal styles by modifying SASS variables.",
    "keywords": "sass variables, scss variables, modifying Vuetify styles"
  },
  "customization/theme": {
    "title": "Theme",
    "description": "Setup your application's theme and supplemental colors in a flash.",
    "keywords": "themes"
  },
  "styles/text": {
    "title": "CSS Text helpers",
    "description": "Text helpers assist in modifying your application layout on varying viewport sizes with pre-configured css classes.",
    "keywords": "Text helper classes, text classes, alignment helpers"
  },
  "styles/colors": {
    "title": "Material color palette",
    "description": "Learn about the colors of Material Design. Consume the javascript color pack directly in your application.",
    "keywords": "colors, material design colors, vuetify color pack, material color classes"
  },
  "styles/content": {
    "title": "Content styles",
    "description": "Vuetify provides custom styling for various HTML elements.",
    "keywords": "content, html, markup"
  },
  "styles/display": {
    "title": "CSS Display helpers",
    "description": "Display helper classes allow you to control when elements should display based upon viewport.",
    "keywords": "display helper classes, display classes, vuetify display"
  },
  "styles/float": {
    "title": "CSS Float helpers",
    "description": "Float helper classes allow you to control the float property of an element based upon the viewport size.",
    "keywords": "float helper classes, float classes, vuetify float"
  },
  "styles/elevation": {
    "title": "CSS Elevation helpers",
    "description": "Elevation helper classes allow you to control relative depth, or distance, between two surfaces along the z-axis.",
    "keywords": "elevation helper classes, elevation classes, vuetify elevation"
  },
  "styles/flex": {
    "title": "CSS Flex helpers",
    "description": "Flex helper classes allow you to modify flexbox parents and children.",
    "keywords": "flex helper classes, flex classes, vuetify flex"
  },
  "styles/scroll": {
    "title": "Smooth scrolling",
    "description": "Using the goTo helper you can smoothly scroll to any location or component on the page.",
    "keywords": "scrolling, scroll, smooth scroll, transitions"
  },
  "styles/spacing": {
    "title": "CSS Spacing helpers",
    "description": "Spacing helper classes allow you to apply margin or padding to any element in increments from 1 to 5.",
    "keywords": "spacing helper classes, spacing classes, vuetify spacing"
  },
  "styles/transitions": {
    "title": "Transitions",
    "description": "Utilize Vuetify's built in CSS and Javascript transitions within components.",
    "keywords": "motion, transitions, vuetify transitions"
  },
  "styles/typography": {
    "title": "Application typography",
    "description": "View the various typography styles. From headings to captions, with various weights, sizes and italics.",
    "keywords": "typography, headings, titles"
  },
  "framework/sandbox": {
    "title": "Sandbox",
    "description": "Play around with the available configuring options using Vuetify layout components.",
    "keywords": "sandbox, vuetify, layout sandbox, vuetify layout"
  },
  "components/api-explorer": {
    "title": "API explorer",
    "description": "Search the API of Vuetify components or browse common categories.",
    "keywords": "material design components, components api, vuetify api, vuetify component categories"
  },
  "components/categories/forms": {
    "title": "Forms category",
    "description": "A collection of Vuetify components that are commonly used when building forms.",
    "keywords": "forms category, vuetify form components"
  },
  "components/categories/navigation": {
    "title": "Navigation category",
    "description": "A collection of Vuetify components that are associated with navigation and drawers.",
    "keywords": "navigation category, vuetify navigation components"
  },
  "components/categories/layout": {
    "title": "Layout category",
    "description": "Vuetify Components that are useful when building layouts",
    "keywords": "layout category, vuetify layout components"
  },
  "components/categories/buttons": {
    "title": "Buttons & Indicators category",
    "description": "A collection of Vuetify components that are used to provide elements that the user can interact with.",
    "keywords": "buttons and indicators category, vuetify button and indicator components"
  },
  "components/categories/modals": {
    "title": "Popups & Modals category",
    "description": "A collection of Vuetify components that are used to draw the users attention to an action or task. Typically related to modals and alerts.",
    "keywords": "popups and modals category, vuetify popup and modal components"
  },
  "components/categories/tables": {
    "title": "Tables category",
    "description": "A collection of Vuetify components that are used to consolidate and display tabulated or grouped data.",
    "keywords": "tables category, vuetify table components"
  },
  "components/alerts": {
    "title": "Alert component",
    "description": "The v-alert component is used to convey information to the user. Designed to stand out, the alerts come in four contextual styles.",
    "keywords": "alerts, vue alert component, vuetify alert component"
  },
  "components/application": {
    "title": "Application service",
    "description": "Vuetify comes equipped with a default markup that makes it easy to create layouts (boilerplate) for any Vue application.",
    "keywords": "default layout, vuetify default markup, vuetify default layout"
  },
  "components/app-bars": {
    "title": "App-bar component",
    "description": "The app bar component is a supercharged toolbar with advanced scrolling techniques and application layout support.",
    "keywords": "app bars, vuetify app bar component, vue app bar component"
  },
  "components/aspect-ratios": {
    "title": "Aspect ratios",
    "description": "The responsive component is used as a wrapper component to force custom aspect ratios for its children.",
    "keywords": "ratio, responsive, aspect ratios"
  },
  "components/autocompletes": {
    "title": "Autocomplete component",
    "description": "The autocomplete component provides type-ahead autocomplete functionality and provides a list of available options.",
    "keywords": "autocomplete, vuetify autocomplete component, vue autocomplete component"
  },
  "components/avatars": {
    "title": "Avatar component",
    "description": "The avatar component is used to control the size and border radius of an image. It can be used with numerous components to provide better visual context.",
    "keywords": "avatars, vuetify avatar component, vue avatar component"
  },
  "components/badges": {
    "title": "Badge component",
    "description": "The badge component is a small status descriptor for elements. This typically contains a small number or short set of characters.",
    "keywords": "badges, vuetify badge component, vue badge component"
  },
  "components/banners": {
    "title": "Banner component",
    "description": "The banner component displays an important and succint message for a user to address. It can also provide actions for user to take.",
    "keywords": "banners, vuetify banner component, vue banner component"
  },
  "components/breadcrumbs": {
    "title": "Breadcrumbs component",
    "description": "The breadcrumbs component is a navigational helper for pages. It can accept a Material Icons icon or characters as a divider.",
    "keywords": "breadcrumbs, vuetify breadcrumbs component, vue breadcrumbs component, v-breadcrumbs component"
  },
  "components/bottom-navigation": {
    "title": "Bottom navigation component",
    "description": "The bottom navigation component is used for mobile devices and acts as the primary navigation for your application.",
    "keywords": "bottom navigation, vuetify bottom navigation component, vue bottom navigation component"
  },
  "components/bottom-sheets": {
    "title": "Bottom sheet component",
    "description": "The bottom sheet component is used for elevating content above other elements in a dialog style fashion.",
    "keywords": "bottom sheets, vuetify bottom sheet component, vue bottom sheet component"
  },
  "components/calendars": {
    "title": "Calendar component",
    "description": "The calendar component is a clean and simple adaptation to the popular Google Calendar application.",
    "keywords": "calendars, vuetify calendar component, vue calendar component"
  },
  "components/cards": {
    "title": "Card component",
    "description": "The card component provides an elevatable sheet of paper to display content and provide actions on a single topic.",
    "keywords": "cards, vuetify card component, vue card component"
  },
  "components/buttons": {
    "title": "Button component",
    "description": "The button component communicates actions that a user can take and are typically placed in dialogs, forms, cards and toolbars.",
    "keywords": "buttons, vuetify button component, vue button component"
  },
  "components/button-groups": {
    "title": "Button group component",
    "description": "The button group component allows you to combine a series of selectable buttons together in a single-line.",
    "keywords": "button groups, vuetify button group component, vue button group component"
  },
  "components/floating-action-buttons": {
    "title": "FAB component",
    "description": "The floating action button (or FAB) component is a promoted action that is elevated above the UI or attached to an element such as a card.",
    "keywords": "floating action button, fab, vuetify fab component, vue fab component"
  },
  "components/carousels": {
    "title": "Carousel component",
    "description": "The carousel component is used to cycle through visual content such as images or slides of text.",
    "keywords": "carousels, vuetify carousel component, vue carousel component"
  },
  "components/chips": {
    "title": "Chip component",
    "description": "The chip component allows a user to enter information, make selections, filter content or trigger actions.",
    "keywords": "chips, vuetify chip component, vue chip component"
  },
  "components/chip-groups": {
    "title": "Chip group component",
    "description": "The chip group component combines numerous selectable chips into single or multiple lines.",
    "keywords": "chip groups, vuetify chip group component, vue chip group component"
  },
  "components/color-pickers": {
    "title": "Color picker component",
    "description": "The color picker component allows users to select a from pre-defined or custom colors using a variety of different inputs and formats.",
    "keyword": "color pickers, vuetify color picker component, vue color picker component"
  },
  "components/combobox": {
    "title": "Combobox component",
    "description": "The combobox component provides type-ahead autocomplete functionality and allows users to provide a custom values beyond the provided list of options.",
    "keywords": "comboboxes, vuetify combobox component, vue combobox component"
  },
  "components/dividers": {
    "title": "Divider component",
    "description": "The divider component is a thin line commonly used to separate groups of content in lists or layouts.",
    "keywords": "dividers, vuetify divider component, vue divider component"
  },
  "components/data-iterators": {
    "title": "Data iterator component",
    "description": "The data iterator component is used for filter and displaying data including sorting, searching, pagination, and selection.",
    "keywords": "data iterators, vuetify data iterator component, vue data iterator component"
  },
  "components/data-tables": {
    "title": "Data table component",
    "description": "The data table component is used for displaying tabular data in a way that is easy for users to scan. It includes sorting, searching, pagination and selection.",
    "keywords": "data tables, vuetify data table component, vue data table component"
  },
  "components/dialogs": {
    "title": "Dialog component",
    "description": "The dialog component informs a user about a specific task and may contain critical information or require the user to take a specific action.",
    "keywords": "dialogs, vuetify dialog component, vue dialog component"
  },
  "components/expansion-panels": {
    "title": "Expansion panel component",
    "description": "The expansion panel component is a lightweight container that hides information behind expandable and contractable containers.",
    "keywords": "expansion panels, vuetify expansion panel component, vue expansion panel component"
  },
  "components/footer": {
    "title": "Footer component",
    "description": "The footer component provides a container for displaying additional navigation information about a site.",
    "keywords": "footers, vuetify footer component, vue footer component"
  },
  "components/grids": {
    "title": "Grid system",
    "description": "Vuetify supports the 12 point Material Design grid for laying out and controlling breakpoints for your application.",
    "keywords": "grids, vuetify grid component, layout component, flex component"
  },
  "components/grid-lists": {
    "title": "Grid list component",
    "description": "Grid lists allow you to specify the gutter used when separating grid items.",
    "keywords": "grid lists, vuetify grid list component, vue grid list component"
  },
  "components/file-inputs": {
    "title": "File input component",
    "description": "The file input component is a specialized input that provides a clean interface for selecting files, showing detailed selection information and upload progress.",
    "keywords": "file input, file upload, file field"
  },
  "components/forms": {
    "title": "Form component",
    "description": "The form component provides a wrapper that makes it easy to process and control validation states of input components.",
    "keywords": "forms, vuetify form component, vue form component, form validation"
  },
  "components/hover": {
    "title": "Hover component",
    "description": "The hover component makes it easy respond when the user hover events by wrapping selectable content.",
    "keywords": "hover, vuetify hover component, vue hover component"
  },
  "components/icons": {
    "title": "Icon component",
    "description": "The icon component is compatible with multiple common iconfonts such as Material Design Icons, Font Awesome and more.",
    "keywords": "icons, vuetify icon component, vue icon component"
  },
  "components/images": {
    "title": "Image component",
    "description": "The image component provides a flexible interface for displaying different types of images.",
    "keywords": "images, vuetify image component, vue image component"
  },
  "components/inputs": {
    "title": "Input component",
    "description": "The input component is the baseline functionality for all of Vuetify's form components and provides a baseline for custom implementations.",
    "keywords": "inputs, vuetify input component, vue input component"
  },
  "components/item-groups": {
    "title": "Item group component",
    "description": "The item group components provides the ability to create a group of selectable items out of any component.",
    "keywords": "item groups, vuetify item group component, vue item group component"
  },
  "components/lists": {
    "title": "List component",
    "description": "The list component is a continous group of text, images and icons that may contain primary or supplemental actions.",
    "keywords": "lists, vuetify list component, vue list component"
  },
  "components/list-item-groups": {
    "title": "List item group component",
    "description": "The list item group component provides an interface for displaying a series of content using list items.",
    "keywords": "list-groups, vuetify list item group component, vue list item group component"
  },
  "components/menus": {
    "title": "Menu component",
    "description": "The menu component exposes a drop down of potential selections or actions that the user can make.",
    "keywords": "menus, vuetify menu component, vue menu component"
  },
  "components/navigation-drawers": {
    "title": "Navigation drawer component",
    "description": "The navigation drawer component contains internal navigation links for an application and can be permanently on-screen or controlled programmatically.",
    "keywords": "navigation drawer, vuetify navigation drawer component, vue navigation drawer component"
  },
  "components/overflow-btns": {
    "title": "Overflow button component",
    "description": "The overflow button component creates an interface for a select that contains additional features and functionality.",
    "keywords": "overflow buttons, vuetify overflow button component, vue overflow button component"
  },
  "components/overlays": {
    "title": "Overlay component",
    "description": "The overlay component makes it easy to create a scrim or hovering effect over components or your entire application.",
    "keywords": "overlays, vuetify overlay component, vue overlay component"
  },
  "components/paginations": {
    "title": "Pagination component",
    "description": "The pagination component is used to separate long sets of data so that it is easier for a user to consume information.",
    "keywords": "pagination, vuetify pagination component, vue pagination component"
  },
  "components/parallax": {
    "title": "Parallax component",
    "description": "The parallax component creates a 3d effect that makes an image appear to scroll slower than the window.",
    "keywords": "parallax, vuetify parallax component, vue parallax component"
  },
  "components/date-pickers": {
    "title": "Date picker component",
    "description": "The date picker component is a stand-alone interface that allows the selection of a date, month and year.",
    "keywords": "date pickers, vuetify date picker component, vue date picker component"
  },
  "components/time-pickers": {
    "title": "Time picker component",
    "description": "The time picker component is a stand-alone interface that allows the selection of hours and minutes in AM/PM and 24hr formats.",
    "keywords": "time pickers, vuetify time picker component, vue time picker component"
  },
  "components/progress-circular": {
    "title": "Progress circular component",
    "description": "The progress circular component is useful for displaying a visual indicator of numerical data in a circle.",
    "keywords": "progress circular, vuetify progress circular component, vue progress circular component, circular progress"
  },
  "components/progress-linear": {
    "title": "Progress linear component",
    "description": "The progress-linear component is useful for displaying a visual indicator of numerical data in a straight line.",
    "keywords": "progress linear, vuetify progress linear component, vue progress linear component, linear progress"
  },
  "components/ratings": {
    "title": "Star rating component",
    "description": "The star rating component is a specialized widget for collecting user feedback via ratings.",
    "keywords": "star ratings, vuetify star rating component, vue star rating component, rating component"
  },
  "components/sheets": {
    "title": "Sheet component",
    "description": "The sheet component is the default paper element in Vuetify and serves as the baseline for many Material Design implementations.",
    "keywords": "sheets, vuetify sheet component, vue sheet component"
  },
  "components/simple-tables": {
    "title": "Simple table component",
    "description": "The simple table component is a lightweight wrapper around the table element that provides a Material Design feel without all the baggage.",
    "keywords": "simple table, vuetify simple table component, vue simple table component, table component"
  },
  "components/sliders": {
    "title": "Slider component",
    "description": "The slider component is a better visualization of the number input. It is used for gathering numerical user data.",
    "keywords": "sliders, vuetify slider component, vue slider component"
  },
  "components/slide-groups": {
    "title": "Slide group component",
    "description": "The slide group component is similar to item groups in that you can make selectable content out of elements but does so in a single line fashion.",
    "keywords": "slide groups, slideable groups, vuetify slide group component, vue slide group component"
  },
  "components/snackbars": {
    "title": "Snackbar component",
    "description": "The snackbar component informs user of a process that your application has performed is will perform. It can be temporary and often contains actions.",
    "keywords": "snackbars, vuetify snackbar component, vue snackbar component"
  },
  "components/sparklines": {
    "title": "Sparkline component",
    "description": "The sparkline component creates beautiful and expressive simple graphs for displaying numerical data.",
    "keywords": "sparklines, vuetify sparkline component, vue sparkline component, sparkline, graph, chart, line"
  },
  "components/steppers": {
    "title": "Stepper component",
    "description": "The stepper component provides a linear progression process for gathering and displaying information to a user, similar to a form wizard.",
    "keywords": "steppers, vuetify stepper component, vue stepper component"
  },
  "components/selection-controls": {
    "title": "Selection control components",
    "description": "Selection control components allows users to complete tasks that require the selection of various options, such as settings.",
    "keywords": "selection controls, vuetify selection controls, vuetify checkbox component, vuetify radio component, vuetify switch component"
  },
  "components/selects": {
    "title": "Select component",
    "description": "The select component provides a list of options that a user can make selections from.",
    "keywords": "selects, vuetify select component, vue select component"
  },
  "components/subheaders": {
    "title": "Subheader component",
    "description": "The subheader component is used to provide context of sections of content or filtering and sorting criteria.",
    "keywords": "subheaders, vuetify subheader component, vue subheader component"
  },
  "components/system-bars": {
    "title": "System-bar component",
    "description": "The system bar component creates an android style status bar that rests on the very top of your application.",
    "keywords": "system bars, vuetify system bar component, vue system bar component, android status bar, status bar"
  },
  "components/tabs": {
    "title": "Tabs component",
    "description": "The tabs component provides a way to organize and navigate between groups of content that are related at the same level of hierarchy.",
    "keywords": "tabs, vuetify tabs component, vue tabs component"
  },
  "components/timelines": {
    "title": "Timeline component",
    "description": "The timeline component is used to display chronological information horizontally.",
    "keywords": "timelines, vuetify timeline component, vue timeline component"
  },
  "components/textarea": {
    "title": "Textarea component",
    "description": "The textarea component is a text field that accepts lengthy textual input from users.",
    "keywords": "textareas, vuetify textarea component, vue textarea component"
  },
  "components/text-fields": {
    "title": "Text field component",
    "description": "The text field component accepts textual input from users.",
    "keywords": "text fields, vuetify text field component, vue text field component"
  },
  "components/toolbars": {
    "title": "Toolbar component",
    "description": "The toolbar component sits above the content that it affects and provides an area for labeling and additional actions.",
    "keywords": "toolbars, vuetify toolbar component, vue toolbar component"
  },
  "components/tooltips": {
    "title": "Tooltip component",
    "description": "The tooltip component displays textual information regarding the element it is attached to.",
    "keywords": "tooltips, vuetify tooltip component, vue tooltip component"
  },
  "components/treeview": {
    "title": "Treeview component",
    "description": "The treeview component is a user interface that is used to represent hierarchical data in a tree structure.",
    "keywords": "treeview, vuetify treeview component, vue treeview component"
  },
  "components/windows": {
    "title": "Window component",
    "description": "The window component is a wrapper container that allows transitioning between content. It serves as the baseline for tabs and carousels.",
    "keywords": "windows, vuetify window component, vue window component"
  },
  "directives/resizing": {
    "title": "Resizing directive",
    "description": "The resize directive provides the ability to conditionally invoke functions when the screen is resized.",
    "keywords": "resize, vuetify resize directive, vue resize directive, window resize directive"
  },
  "directives/ripples": {
    "title": "Ripple directive",
    "description": "The ripple directive adds touch and click feedback to any element in the form of a water ripple.",
    "keywords": "ripples, ink, vuetify ripple directive, vue ripple directive"
  },
  "directives/scrolling": {
    "title": "Scrolling directive",
    "description": "The scroll directive gives you the ability to conditionally invoke methods when the screen or an element are scrolled.",
    "keywords": "scroll, vuetify scroll directive, vue scroll directive, window scroll directive"
  },
  "directives/touch-support": {
    "title": "Touch Support directive",
    "description": "The touch directive provides an interface for responding to various user touch actions.",
    "keywords": "touch, vuetify touch directive, vue touch directive, mobile touch directive"
  },
  "examples/layouts/baseline": {
    "title": "Basic layout example",
    "description": "A basic application layout implemented using Vuetify components.",
    "keywords": "basic template, pre-made, vuetify layout"
  },
  "examples/layouts/baseline-flipped": {
    "title": "Basic flipped layout example",
    "description": "A basic flipped application layout implemented using Vuetify components.",
    "keywords": "basic template, pre-made, vuetify layout"
  },
  "examples/layouts/centered": {
    "title": "Centered layout example",
    "description": "A centered application layout implemented using Vuetify components.",
    "keywords": "centered template, pre-made, vuetify layout"
  },
  "examples/layouts/complex": {
    "title": "Complex layout example",
    "description": "A complex application layout implemented using Vuetify components.",
    "keywords": "complex template, pre-made, vuetify layout"
  },
  "examples/layouts/dark": {
    "title": "Dark layout example",
    "description": "A dark application layout implemented using Vuetify components.",
    "keywords": "dark template, pre-made, vuetify layout"
  },
  "examples/layouts/google-contacts": {
    "title": "Google contacts layout example",
    "description": "A Google Contacts application example implemented using Vuetify components.",
    "keywords": "google contacts template, pre-made, vuetify layout"
  },
  "examples/layouts/google-keep": {
    "title": "Google keep layout example",
    "description": "A Google Keep application example implemented using Vuetify components.",
    "keywords": "google keep template, pre-made, vuetify layout"
  },
  "examples/layouts/google-youtube": {
    "title": "Google youtube layout example",
    "description": "A Youtube application example implemented using Vuetify components.",
    "keywords": "youtube template, pre-made, vuetify layout"
  },
  "examples/layouts/sandbox": {
    "title": "Layout sandbox",
    "description": "A layout sandbox where you can try different variations of layout setups.",
    "keywords": "template, pre-made, vuetify layout, sandbox"
  },
  "themes/premium": {
    "title": "Premium & free themes",
    "description": "Vuetify offers numerous pre-build starter and premium themes. Kickstart your next application today, no design skills needed.",
    "keywords": "vuetify themes, pre-built material themes, premium themes"
  }
}
