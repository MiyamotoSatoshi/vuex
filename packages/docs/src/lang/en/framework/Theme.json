{
  "header": "# Theme",
  "headerText": "Easily change the colors of your application programmatically. Rebuild the default stylesheet and customize various aspects of the framework for your particular needs. If you are looking for the **Theme Generator**, please navigate [here](https://theme-generator.vuetifyjs.com).",
  "lightAndDarkHeader": "## Light and Dark",
  "lightAndDarkText1": "Vuetify supports both **light** and **dark** variants of the Material Design spec. This designation starts at the root application component, `v-app` and is supported by majority of components. By default, your application will use the **light** theme, but this can be easily overwritten by adding the **dark** prop.",
  "lightAndDarkText2": "When you designate a component as light or dark, all of its children will inherit and apply the same unless otherwise specified. Due to CSS specificity, there are certain combinations that might prompt you to manually assign the _theme_ for nested children. This is most likely to occur when using the **dark** theme.",
  "customizingHeader": "## Customizing",
  "customizingText1": "By default, Vuetify has a standard theme applied for all components.",
  "customizingText2": "This can be easily changed. Simply pass a **theme** property to the `Vue.use` function. You can choose to modify all or only some of the theme properties, with the remaining inheriting from the default.",
  "customizingText3": "You can also use the pre-defined material colors.",
  "customizingText4": "Under the hood, Vuetify will generate css classes based upon these values that will be accessible in the DOM. These classes will follow the same markup as other helper classes, `primary` or `secondary--text` for example. If you supply an entire color object (as in `colors.purple` above), the lighten/darken variations will be used directly instead of being generated.",
  "customizingText5": "These values will also be made available on the instance **$vuetify** object under the **theme** property. This allows you to _dynamically_ modify your theme. Behind the scenes, Vuetify will regenerate and update your theme classes, seamlessly updating your application.",
  "optionHeader": "## Options",
  "optionText1": "Vuetify generates theme styles at run-time for SPA's and server side for SSR applications. The generated styles will be placed in a `<style>` tag with the **id** of **vuetify-theme-stylesheet**.",
  "optionHeader2": "### Minification",
  "optionText3": "For SSR applications, you can pass a callback function to **$vuetify.options.minifyTheme** to reduce the initial page size. When using this option, it is recommended to also use **themeCache**.",
  "optionHeader3": "### Caching",
  "optionText4": "A custom caching object can be provided (works in tandem with **minifyTheme**) to increase SSR efficiency. The object must contain a **get** and a **set** method. Below is an example using [LRU cache](https://www.npmjs.com/package/lru-cache).",
  "optionHeader4": "### Custom Properties",
  "optionText5": "Enabling `customProperties` will also generate a css variable for each theme color, which you can then use in your components' `<style>` blocks.",
  "optionHeader5": "### CSP Nonce",
  "optionText6": "Pages with the `script-src` CSP rule enabled may require a **nonce** to be specified for embedded style tags. ",
  "sassHeader": "## Modifying SASS variables",
  "sassText1": "Starting with version **2.0**, Vuetify is built using **SASS/SCSS**. Using the data option in your `vue.config.js`, we can also pass in custom variables. A list of available variables is located in each components' folder. In order to build the SASS file, you will need to configure your application to support [SASS](https://sass-lang.com/dart-sass) and [Fibers](https://github.com/laverdet/node-fibers).",
  "sassAlert1": "SCSS is used for variable files to support maps using indented syntax.",
  "sassHeader2": "### Setup vue.config.js",
  "sassText2": "In the command line, run:",
  "sassText3": "This will setup the dependencies needed to import and parse SASS/SCSS files. Once installed, create a folder called `sass` in your src directory (or appropriate assets directory) with a file named `main.scss`. Keep in mind many of the Vuetify variables are using [SASS Lists](https://sass-lang.com/documentation/file.SASS_REFERENCE.html#lists) and must be updated with [map-merge](https://sass-lang.com/documentation/Sass/Script/Functions.html#map_merge-instance_method) as demonstrated below:",
  "sassText3a": "Now setup your **vue.config.js** file to load the file through the data option of the sass loader:",
  "sassText4": "The next time you run **yarn run serve**, vue-cli will inject the variables file and your changes will be represented in your application.",
  "sassAlert2": "If you are requiring the Vuetify stylesheet by a `<link>` tag in your index file, remove it.",
  "sassText5": "Under the hood, the new variables will be hoisted to the top of the compiled styles and used to override the default behavior.",
  "themeGeneratorHeader": "## Theme generator",
  "themeGeneratorText1": "Discover and generate new color themes for your **Vuetify** applications using our [Theme Generator](https://theme-generator.vuetifyjs.com) tool.",
  "variantsSubheader": "### Custom theme variants",
  "variantsText1": "While Vuetify automatically generates _lighten_ and _darken_ variants for theme colors, you may want to control this yourself. Simply pass a theme object that contains the variants that you wish to modify. Anything not provided will still be generated for you.",
  "variantsText2": "You can now import your custom theme object and apply it to Vuetify",
  "variantsText3": "Below is a full list of the overwritable keys on the theme object:"
}
