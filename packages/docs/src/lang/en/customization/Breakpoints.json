{
  "heading": "# Breakpoints",
  "headingText": "With Vuetify you can control the layout of your application depending on the window size. That can be achieved for example by using specific [grid](/components/grids) props or helper classes (i.e. [display](/styles/display)) that will target particular breakpoint. Vuetify provides 5 predefined breakpoints defined as described below, but you can easily change them to meet your needs.",
  "components": [
    "v-container",
    "v-layout",
    "v-flex",
    "v-spacer"
  ],
  "toc": [
    {
      "text": "Introduction",
      "href": "introduction"
    },
    {
      "text": "Usage",
      "href": "usage"
    },
    {
      "text": "API",
      "href": "api"
    },
    {
      "text": "Supplemental",
      "href": "supplemental"
    },
    {
      "text": "Examples",
      "href": "examples"
    },
    {
      "text": "Breakpoint object",
      "href": "breakpoint-object"
    },
    {
      "text": "Customize the breakpoints",
      "href": "customize-breakpoint-thresholds"
    }
  ],
  "breakpointHeader": "## Breakpoint service object",
  "breakpointText1": "Vuetify converts the available breakpoints into an accessible object from within your application. This will allow you to assign/apply specific properties and attributes based upon viewport size. The object is available at `$vuetify.breakpoint`.",
  "breakpointHeader1a": "## Usage",
  "breakpointText1a": "You can specify custom breakpoint thresholds and scrollbar width. Keep in mind that you will still need to update the css grid breakpoints to match.",
  "breakpointText2": "Let's try a real world example. You have a `v-dialog` component that you want to convert to a **full-screen** dialog on mobile devices. Normally you would need to bind watchers for the viewport size, and/or check whenever the page loads.",
  "breakpointText3": "That's a lot of boilerplate to write. Even if you opt to use the built in [v-resize](/directives/resizing) directive, you are still going to have to define a resize method. With the **breakpoint** object you can completely skip this logic and get back to building your application.",
  "customizeThresholdsText1": "You can define your own breakpoint threshold pixel values, but it is currently a two-step process: 1. To update the styles you will have to override the `$grid-breakpoints` SASS variables (please see [SASS variables](/customization/sass-variables)). 2. To use the same values on the javascript side of things you must pass them during the application bootstrap like so:"
}
