{
  "heading": "# Text fields",
  "headingText": "Text fields components are used for collecting user provided information.",
  "examples": {
    "usage": {
      "desc": "A simple text field with placeholder and/or label."
    },
    "single-line": {
      "heading": "### Single line",
      "desc": "Single line text fields do not float their label on focus or with data."
    },
    "shaped": {
      "heading": "### Shaped",
      "desc": "`shaped` text fields are rounded if they're `outlined` and have higher `border-radius` if `filled`."
    },
    "disabled-and-readonly": {
      "heading": "### Disabled and readonly",
      "desc": "Text fields can be `disabled` or `readonly`."
    },
    "dense": {
      "heading": "### Dense",
      "desc": "You can reduces the text field height with `dense` prop."
    },
    "icon": {
      "heading": "### Icons",
      "desc": "You can add icons to the text field with `prepend-icon`, `append-icon` and `append-outer-icon` props."
    },
    "clearable": {
      "heading": "### Clearable",
      "desc": "When `clearable`, you can customize the clear icon with `clear-icon`."
    },
    "icon-events": {
      "heading": "### Icon events",
      "desc": "`click:prepend`, `click:append`, `click:append-outer`, and `click:clear` will be emitted when you click on the respective icon. Note that these events will not be fired if the slot is used instead. "
    },
    "icon-slots": {
      "heading": "### Icon slots",
      "desc": "Instead of using prepend / append / append-outer icons you can use slots to extend input's functionality."
    },
    "label-slot": {
      "heading": "### Label slot",
      "desc": "Text field label can be defined in `label` slot - that will allow to use HTML content"
    },
    "character-counter": {
      "heading": "### Character counter",
      "desc": "Use a `counter` prop to inform a user of the character limit. The counter does not perform any validation by itself. You will need to pair it with either the internal validation system, or a 3rd party library. You can use it on regular, box or outlined text fields."
    },
    "password": {
      "heading": "### Password input",
      "desc": "A password input can be used with an appended icon and callback to control the visibility."
    },
    "validation": {
      "heading": "### Validation",
      "desc": "Vuetify includes simple validation through the `rules` prop. The prop accepts an array of callbacks. While validating rules, the current v-model value will be passed to the callback. This callback should return either `true` or a `String`, the error message."
    },
    "full-width-with-character-counter": {
      "heading": "### Full-width text field with character counter",
      "desc": "Full width text fields allow you to create boundless inputs. In this example, we use a `v-divider` to separate the fields."
    },
    "hint": {
      "heading": "### Hint text",
      "desc": "The `hint` property on text fields adds the provided string beneath the text field. Using `persistent-hint` keeps the hint visible when the text field is not focused. Hint prop is **not** supported in solo mode."
    },
    "hide-details": {
      "heading": "### Auto hiding details",
      "desc": "When `hide-details` is set to `auto` messages will be rendered only if there's a message (hint, error message, counter value etc) to display."
    },
    "prefixes-and-suffixes": {
      "heading": "### Prefixes & suffixes",
      "desc": "The `prefix` and `suffix` properties allows you to prepend and append inline non-modifiable text next to the text field."
    },
    "custom-validation": {
      "heading": "### Custom validation",
      "desc": "While the built in `v-form` or 3rd party plugin such as [vuelidate](https://github.com/monterail/vuelidate) or [vee-validation](https://github.com/logaretm/vee-validate) can help streamline your validation process, you can choose to simply control it yourself."
    },
    "box": {
      "heading": "### Box style",
      "desc": "Text fields can be used with an alternative box design. Append and prepend icon props are **not** supported in this mode."
    },
    "solo": {
      "heading": "### Solo style",
      "desc": "Text fields can be used with an alternative solo design."
    },
    "outlined": {
      "heading": "### Outlined style",
      "desc": "Text fields can be used with an alternative outlined design."
    },
    "custom-colors": {
      "heading": "### Custom colors",
      "desc": "You can optionally change a text field into any color in the Material design palette. Below is an example implementation of a custom form with validation."
    },
    "masks": {
      "heading": "### Masks (using vue-the-mask)",
      "desc": "You can add masking functionality using a 3rd party library such as vue-the-mask."
    },
    "progress-bar": {
      "heading": "### Progress bar",
      "desc": "You can display a progress bar instead of the bottom line. You can use the default indeterminate progress having same color as the text field or designate a custom one using the `progress` slot"
    }
  },
  "props": {
    "appendOuterIcon": "Appends an icon to the outside the component's input, uses same syntax as `v-icon`",
    "autoGrow": "Auto-grows the input. This option requires the use of **v-model**",
    "autofocus": "Enables autofocus",
    "filled": "Applies the alternate filled input style",
    "clearIcon": "Applied when using **clearable** and the input is dirty",
    "counter": "Creates counter for input length; if no number is specified, it defaults to 25. Does not apply any validation.",
    "dark": "Components.Inputs.props.dark",
    "flat": "Mixins.Soloable.props.flat",
    "fullWidth": "Designates input type as full-width",
    "multiLine": "Turns into textarea",
    "noResize": "Removes the resize handle, only applies to **multi-line** and **textarea** props",
    "outlined": "Applies the outlined style to the input",
    "placeholder": "Sets the inputâ€™s placeholder text",
    "prefix": "Displays prefix text",
    "prependInnerIcon": "Prepends an icon inside the component's input, uses the same syntax as `v-icon`",
    "reverse": "Reverses the input orientation",
    "rounded": "Adds a border radius to the input",
    "rows": "Controls the number of rows in a textarea",
    "rowHeight": "Designate a custom _row-height_. Used for determining input height when using **multi-line** or **textarea** props",
    "solo": "Mixins.Soloable.props.solo",
    "soloInverted": "Mixins.Soloable.props.soloInverted",
    "suffix": "Displays suffix text",
    "textarea": "Textarea text field with alternate style",
    "toggleKeys": "Array of key codes that will toggle the input (if it supports toggling)",
    "type": "Sets input type",
    "shaped": "Round if `outlined` and increase `border-radius` if `filled`. Must be used with either `outlined` or `filled`"
  },
  "slots": {
    "append-outer": "Appends an item inside input content",
    "prepend-inner": "Prepends an item inside input content"
  },
  "events": {
    "blur": "Emitted when the input is blurred",
    "change": "Emitted when the input is changed by user interaction",
    "click:append-outer": "Emitted when appended outer icon is clicked",
    "click:clear": "Emitted when clearable icon clicked",
    "click:prepend-inner": "Emitted when prepended inner icon is clicked",
    "focus": "Emitted when component is focused",
    "keydown": "Emitted when **any** key is pressed"
  }
}
