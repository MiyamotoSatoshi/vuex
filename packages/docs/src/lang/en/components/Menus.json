{
  "heading": "# Menus",
  "headingText": "The `v-menu` component shows a menu at the position of the element used to activate it.",
  "examples": {
    "usage": {
      "desc": "Remember to put the element that activates the menu in the `activator` slot.",
      "uninverted": true
    },
    "absolute": {
      "heading": "### Absolute position",
      "desc": "Menus can also be placed absolutely on top of the activator element using the `absolute` prop. Try clicking anywhere on the image.",
      "uninverted": true
    },
    "disabled": {
      "heading": "### Disabled",
      "desc": "You can disable the menu. Disabled menus can't be opened.",
      "uninverted": true
    },
    "offset-x": {
      "heading": "### X offset",
      "desc": "Menu can be offset by the X axis to make the activator visible.",
      "uninverted": true
    },
    "offset-y": {
      "heading": "### Y offset",
      "desc": "Menu can be offset by the Y axis to make the activator visible.",
      "uninverted": true
    },
    "close-on-click": {
      "heading": "### Close on click",
      "desc": "Menu can be closed when lost focus.",
      "uninverted": true
    },
    "close-on-content-click": {
      "heading": "### Close on content click",
      "desc": "You can configure whether `v-menu` should be closed when its content is clicked.",
      "uninverted": true
    },
    "absolute-without-activator": {
      "heading": "### Absolute position without activator",
      "desc": "Menus can also be used without an activator by using `absolute` together with the props `position-x` and `position-y`. Try right-clicking anywhere on the image.",
      "uninverted": true
    },
    "menu-activator-tooltip": {
      "heading": "### Menu with activator and tooltip",
      "desc": "With the new `v-slot` syntax, nested activators such as those seen with a `v-menu` and `v-tooltip` attached to the same activator button, need a particular setup in order to function correctly. **Note: this same syntax is used for other nested activators such as `v-dialog` w/ `v-tooltip`.**",
      "uninverted": true
    },
    "hover": {
      "heading": "### Hover",
      "desc": "Menus can be accessed using hover instead of clicking with the `open-on-hover` prop.",
      "uninverted": true
    },
    "menus": {
      "heading": "### Menus",
      "desc": "Menus can be placed within almost any component.",
      "uninverted": true
    },
    "custom-transition": {
      "heading": "### Custom transitions",
      "desc": "Vuetify comes with 3 standard transitions, **scale**, **slide-x** and **slide-y**. You can also create your own and pass it as the transition argument. For an example of how the stock transitions are constructed, visit [here](https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/helpers.ts).",
      "uninverted": true
    },
    "popover": {
      "heading": "### Popover menu",
      "desc": "A menu can be configured to be static when opened, allowing it to function as a popover. This can be useful when there are multiple interactive items within the menu contents.",
      "uninverted": true
    }
  },
  "props": {
    "closeOnClick": "Designates if menu should close on outside-activator click",
    "closeOnContentClick": "Designates if menu should close when its content is clicked",
    "dark": "Mixins.Themeable.props.dark",
    "light": "Mixins.Themeable.props.light",
    "disabled": "Disables the menu",
    "disableKeys": "Removes all keyboard interaction",
    "internalActivator": "Components.Dialogs.props.internalActivator",
    "offsetX": "Offset the menu on the x-axis. Works in conjunction with direction left/right",
    "offsetY": "Offset the menu on the y-axis. Works in conjunction with direction top/bottom",
    "maxHeight": "Sets the max height of the menu content",
    "openOnClick": "Designates whether menu should open on activator click",
    "openOnHover": "Designates whether menu should open on activator hover",
    "origin": "Mixins.Transitionable.props.origin",
    "returnValue": "The value that is updated when the menu is closed - must be primitive. Dot notation is supported",
    "transition": "Mixins.Transitionable.props.transition"
  }
}
