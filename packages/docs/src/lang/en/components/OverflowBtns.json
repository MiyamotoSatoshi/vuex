{
  "header": "# Overflow buttons",
  "headerText": "`v-overflow-btn` is used to give the user the ability to select items from the list. It has 3 variations: `editable`, `overflow` and `segmented`",
  "examples": {
    "usage": {
      "desc": "`v-overflow-btn` is used for creating selection lists"
    },
    "counter": {
      "header": "### Counter",
      "desc": "You can add a counter to `v-overflow-btn` to control the max char count"
    },
    "disabled": {
      "header": "### Disabled",
      "desc": "`v-overflow-btn` can be disabled in order to prevent a user from interacting with it"
    },
    "editable": {
      "header": "### Editable",
      "desc": "`editable` `v-overflow-btn` can be directly edited, just as `v-text-field`"
    },
    "filled": {
      "header": "### Filled",
      "desc": "Text fields can be used with an alternative box design. Append and prepend icon props are **not** supported in this mode."
    },
    "hint": {
      "header": "### Hint",
      "desc": "You can add a hint for the user using the `hint` property"
    },
    "loading": {
      "header": "### Loading",
      "desc": "`v-overflow-btn` can have `loading` state with a linear progress bar under them"
    },
    "menu-props": {
      "header": "### Menu props",
      "desc": "You can set underlying `v-menu` props using `menu-props` property"
    },
    "readonly": {
      "header": "### Read-only",
      "desc": "`v-overflow-btn` can be put into `readonly` mode, it'll become inactive but won't change the color"
    },
    "segmented": {
      "header": "### Segmented",
      "desc": "`segmented` `v-overflow-btn` has and additional divider between the content and the icon"
    }
  },
  "props": {
    "dark": "Components.Inputs.props.dark",
    "editable": "Creates an editable button",
    "overflow": "Creates an overflow button",
    "segmented": "Creates a segmented button",
    "value": "Components.Inputs.props.value"
  },
  "slots": {
    "append": "Components.Inputs.slots.append",
    "append-item": "Components.Selects.slots.append-item",
    "append-outer": "Components.TextFields.slots.append-outer",
    "item": "Components.Selects.slots.item",
    "no-data": "Mixins.Filterable.slots.noData",
    "prepend": "Components.Inputs.slots.prepend",
    "prepend-inner": "Components.TextFields.slots.prepend-inner",
    "prepend-item": "Components.Selects.slots.prepend-item",
    "selection": "Components.Selects.slots.selection"
  },
  "events": {
    "change": "Components.Inputs.events.change",
    "click:append": "Components.Inputs.events['click:append']",
    "click:append-outer": "Components.TextFields.events['click:append-outer']",
    "click:clear": "Components.TextFields.events['click:clear']",
    "click:prepend": "Components.Inputs.events['click:prepend']",
    "click:prepend-inner": "Components.TextFields.events['click:prepend-inner']",
    "update:error": "Mixins.Validatable.events['update:error']",
    "update:search-input": "The `search-input.sync` event"
  }
}
