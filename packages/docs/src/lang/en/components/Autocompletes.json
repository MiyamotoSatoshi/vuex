{
  "heading": "# Autocompletes",
  "headingText": "The `v-autocomplete` component offers simple and flexible type-ahead functionality. This is useful when searching large sets of data or even dynamically requesting information from an API.",
  "usageText": "The autocomplete component extends `v-select` and adds the ability to filter items.",
  "examples": {
    "api": {
      "heading": "### Searching an API",
      "desc": "Easily hook up dynamic data and create a unique experience. The `v-autocomplete`'s expansive prop list makes it easy to fine tune every aspect of the input."
    },
    "slots": {
      "heading": "### Slots",
      "desc": "With the power of slots, you can customize the visual output of the select. In this example we add a profile picture for both the chips and list items."
    },
    "customFilter": {
      "heading": "### Custom filter on autocomplete",
      "desc": "The `filter` prop can be used to filter each individual item with custom logic. In this example we filter items by name"
    },
    "asynchronous": {
      "heading": "### Asynchronous items",
      "desc": "Sometimes you need to load data externally based upon a search query. Use the `search-input` prop with the **.sync** modifier when using the `autocomplete` prop. We also make use of the new `cache-items` prop. This will keep a unique list of all items that have been passed to the `items` prop and is **REQUIRED** when using asynchronous items and the **multiple** prop."
    },
    "advanced": {
      "heading": "### Advanced slots",
      "desc": "The `v-autocomplete` component is extremely flexible and can fit in just about any use-case. Create custom displays for **no-data**, **item** and **selection** slots to provide a unique user experience. Using _slots_ enables you to easily customize the desired look for your application."
    },
    "stateSelector": {
      "heading": "### State selector",
      "desc": "Using a combination of `v-autocomplete` slots and transitions, you can create a stylish toggleable autocomplete field such as this state selector."
    },
    "dense": {
      "heading": "### Dense",
      "desc": "You can use `dense` prop to reduce autocomplete height and lower max height of list items."
    }
  },
  "props": {
    "allowOverflow": "Allow the menu to overflow off the screen",
    "autoSelectFirst": "When searching, will always highlight the first option",
    "dark": "Components.Inputs.props.dark",
    "filter": "The filtering algorithm used when searching. [example](https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VAutocomplete/VAutocomplete.ts#L36)",
    "hideNoData": "Hides the menu when there are no options to show.  Useful for preventing the menu from opening before results are fetched asynchronously.  Also has the effect of opening the menu when the `items` array changes if not already open.",
    "noFilter": "Do not apply filtering when searching. Useful when data is being filtered server side",
    "searchInput": "Search value. Can be use with `.sync` modifier."
  }
}
