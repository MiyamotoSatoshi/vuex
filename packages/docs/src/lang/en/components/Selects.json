{
  "header": "# Selects",
  "headerText": "Select fields components are used for collecting user provided information from a list of options.",
  "objectAlert": "When using objects for the **items** prop, you must associate **item-text** and **item-value** with existing properties on your objects. These values are defaulted to **text** and **value** and can be changed.",
  "examples": {
    "usage": {
      "desc": ""
    },
    "light": {
      "header": "### Light theme",
      "desc": "A standard single select has a multitude of configuration options."
    },
    "icons": {
      "header": "### Icons",
      "desc": "Use a custom prepended or appended icon."
    },
    "multiple": {
      "header": "### Multiple",
      "desc": "A multi-select can utilize `v-chip` as the display for selected items."
    },
    "custom-text-and-value": {
      "header": "### Customized item text and value",
      "desc": "You can specify the specific properties within your items array correspond to the text and value fields. By default, this is **text** and **value**. In this example we also use the `return-object` prop which will return the entire object of the selected item on selection."
    },
    "slots": {
      "header": "### Prepend/Append item slots",
      "desc": "The `v-select` components can be optionally expanded with prepended and appended items. This is perfect for customized **select-all** functionality."
    },
    "selection-appearance": {
      "header": "### Change selection appearance",
      "desc": "The `selection` slot can be used to customize the way selected values are shown in the input. This is great when you want something like `foo (+20 others)` or don't want the selection to occupy multiple lines."
    },
    "disabled": {
      "header": "### Disabled",
      "desc": "You cannot use disabled `v-select`."
    },
    "readonly": {
      "header": "### Read-only",
      "desc": "You cannot use read-only `v-select`, but it looks default."
    },
    "menu-props": {
      "header": "### Custom menu props",
      "desc": "Custom props can be passed directly to `v-menu` using `menuProps` prop. In this example menu is force directed to top and shifted to top."
    }
  },
  "props": {
    "attach": "Mixins.Detachable.props.attach",
    "autocomplete": "Filter the items in the list based on user input",
    "cacheItems": "Keeps a local _unique_ copy of all items that have been passed through the **items** prop.",
    "chips": "Changes display of selections to chips",
    "combobox": "The single select variant of **tags**",
    "contentClass": "Mixins.Detachable.props.contentClass",
    "dark": "Components.Inputs.props.dark",
    "debounceSearch": "Debounces the search input value being emitted",
    "deletableChips": "Adds a remove icon to selected chips",
    "dense": "Lowers max height of list items",
    "disabled": "Disables the input",
    "eager": "Mixins.Bootable.props.eager",
    "editable": " Creates an editable button - [spec](https://material.io/guidelines/components/buttons.html#buttons-dropdown-buttons)",
    "filter": "The function used for filtering items",
    "hideSelected": "Do not display in the select menu items that are already selected",
    "itemColor": "Sets color of selected items",
    "itemDisabled": "Set property of **items**'s disabled value",
    "items": "Can be an array of objects or array of strings. When using objects, will look for a text and value field. This can be changed using the **item-text** and **item-value** props.  Objects that have a **header** or **divider** property are considered special cases and generate a list header or divider; these items are not selectable.",
    "itemText": "Set property of **items**'s text value",
    "itemValue": "Set property of **items**'s value - **must be primitive**. Dot notation is supported",
    "menuProps": "Pass props through to the `v-menu` component. Accepts either a string for boolean props `menu-props=\"auto, overflowY\"`, or an object `:menu-props=\"{ auto: true, overflowY: true }\"`",
    "minWidth": "Sets the minimum width of the select's `v-menu` content",
    "multiple": "Changes select to multiple. Accepts array for value",
    "multiLine": "Causes label to float when the select component is focused or dirty",
    "noDataText": "Display text when there is no data",
    "openOnClear": "When using the **clearable** prop, once cleared, the select menu will either open or stay open, depending on the current state",
    "overflow": "Creates an overflow button - [spec](https://material.io/guidelines/components/buttons.html#buttons-dropdown-buttons)",
    "returnObject": "Changes the selection behavior to return the object directly rather than the value specified with **item-value**",
    "searchInput": "Use the **.sync** modifier to catch user input from the search input",
    "segmented": "Creates a segmented button - [spec](https://material.io/guidelines/components/buttons.html#buttons-dropdown-buttons)",
    "smallChips": "Changes display of selections to chips with the **small** property",
    "tags": "Tagging functionality, allows the user to create new values not available from the **items** prop",
    "valueComparator": "The comparison algorithm used for values. [More info](https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/util/helpers.ts)",
    "value": "Components.Inputs.props.value"
  },
  "slots": {
    "append": "Components.Inputs.slots.append",
    "append-item": "Adds an item after menu content",
    "append-outer": "Components.TextFields.slots.append-outer",
    "item": "Define a custom item appearance",
    "no-data": "Mixins.Filterable.slots.noData",
    "prepend": "Components.Inputs.slots.prepend",
    "prepend-inner": "Components.TextFields.slots.prepend-inner",
    "prepend-item": "Adds an item before menu content",
    "selection": "Define a custom selection appearance"
  },
  "events": {
    "blur": "Emitted when component is no longer focused",
    "change": "Components.Inputs.events.change",
    "click:append": "Components.Inputs.events['click:append']",
    "click:append-outer": "Components.TextFields.events['click:append-outer']",
    "click:clear": "Components.TextFields.events['click:clear']",
    "click:prepend": "Components.Inputs.events['click:prepend']",
    "click:prepend-inner": "Components.TextFields.events['click:prepend-inner']",
    "focus": "Emitted when component is focused",
    "update:error": "Mixins.Validatable.events['update:error']",
    "update:search-input": "The `search-input.sync` event"
  }
}
