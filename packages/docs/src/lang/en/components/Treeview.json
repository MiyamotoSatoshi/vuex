{
  "heading": "# Treeview",
  "headingText": "The `v-treeview` component is useful for displaying large amounts of nested data.",
  "examples": {
    "usage": {
      "desc": "A basic example"
    },
    "dense": {
      "heading": "### Dense mode",
      "desc": "Dense mode provides more compact layout with decreased heights of the items."
    },
    "color": {
      "heading": "### Color",
      "desc": "You can control the text and background color of the active treeview node."
    },
    "selected-color": {
      "heading": "### Checkbox color",
      "desc": "You can control the color of the selected node checkbox."
    },
    "shaped": {
      "heading": "### Shaped",
      "desc": "Shaped treeview's have rounded borders on one side of the nodes."
    },
    "rounded": {
      "heading": "### Rounded",
      "desc": "You can make treeview nodes rounded."
    },
    "item-disabled": {
      "heading": "### Disabling nodes",
      "desc": "Setting `item-disabled` prop allows to control which node's property disables the node when set to `true`."
    },
    "file-explorer": {
      "heading": "### Slots",
      "desc": "Using slots we are able to create an intuitive file explorer. Apart from the `prepend` slot, there is also one for the `label`, and an `append` slot."
    },
    "directory": {
      "heading": "### Async items",
      "desc": "You can dynamically load child data by supplying a _Promise_ callback to the `load-children` prop. This callback will be executed the first time a user tries to expand an item that has a children property that is an empty array."
    },
    "hotspots": {
      "heading": "### Custom selectable icons",
      "desc": "Customize the **on**, **off** and **indeterminate** icons for your selectable tree. Combine with other advanced functionality like API loaded items."
    },
    "human-resources": {
      "heading": "### Searching a directory",
      "desc": "Easily filter your treeview by using the **search** prop. You can easily apply your custom filtering function if you need case-sensitive or fuzzy filtering by setting the **filter** prop. This works similar to the [v-autocomplete](/components/autocompletes) component."
    },
    "selectable": {
      "heading": "### Selectable",
      "desc": "You can easily select treeview nodes and children."
    },
    "activatable": {
      "heading": "### Activatable",
      "desc": "Treeview nodes can be activated by clicking on them."
    },
    "hoverable": {
      "heading": "### Hoverable",
      "desc": "Treeview nodes can have a hover effect."
    },
    "open-all": {
      "heading": "### Open-all",
      "desc": "Treeview nodes can be pre-opened on page load."
    },
    "selection-type": {
      "heading": "### Selection type",
      "desc": "Treeview now supports two different selection types. The default type is **'leaf'**, which will only include leaf nodes in the v-model array, but will render parent nodes as either partially or fully selected. The alternative mode is **'independent'**, which allows one to select parent nodes, but each node is independent of its parent and children."
    }
  },
  "props": {
    "v-treeview": {
      "activatable": "Allows user to mark a node as active by clicking on it",
      "active": "Syncable prop that allows one to control which nodes are active. The array consists of the `item-key` of each active item.",
      "activeClass": "The class applied to the node when active",
      "color": "Sets the color of the active node",
      "dense": "Decreases the height of the items",
      "expandIcon": "Icon used to indicate that a node can be expanded",
      "hoverable": "Applies a hover class when mousing over nodes",
      "filter": "Custom item filtering function. By default it will use case-insensitive search in item's label.",
      "indeterminateIcon": "Icon used when node is in an indeterminate state. Only visible when `selectable` is `true`.",
      "itemChildren": "Property on supplied `items` that contains its children",
      "itemDisabled": "Property on supplied `items` that contains the disabled state of the item",
      "itemKey": "Property on supplied `items` used to keep track of node state. The value of this property has to be unique among all items.",
      "items": "An array of items used to build the treeview",
      "itemText": "Property on supplied `items` that contains its label text",
      "loadChildren": "A function used when dynamically loading children. If this prop is set, then the supplied function will be run if expanding an item that has a `item-children` property that is an empty array. Supports returning a Promise.",
      "loadingIcon": "Icon used when node is in a loading state",
      "multipleActive": "When `true`, allows user to have multiple active nodes at the same time",
      "offIcon": "Icon used when node is not selected. Only visible when `selectable` is `true`.",
      "onIcon": "Icon used when leaf node is selected or when a branch node is fully selected. Only visible when `selectable` is `true`.",
      "open": "Syncable prop that allows one to control which nodes are open. The array consists of the `item-key` of each open item.",
      "openAll": "When `true` will cause all branch nodes to be opened when component is mounted",
      "openOnClick": "When `true` will cause nodes to be opened by clicking anywhere on it, instead of only opening by clicking on expand icon. When using this prop with `activatable` you will be unable to mark nodes with children as active.",
      "returnObject": "When `true` will make `v-model`, `active.sync` and `open.sync` return the complete object instead of just the key",
      "rounded": "Provides an alternative active style for `v-treeview` node. Only visible when `activatable` is `true` and should not be used in conjunction with the `shaped` prop.",
      "search": "The search model for filtering results",
      "selectable": "Will render a checkbox next to each node allowing them to be selected",
      "selectedColor": "The color of the selection checkbox",
      "selectionType": "Controls how the treeview selects nodes. There are two modes available: 'leaf' and 'independent'",
      "shaped": "Provides an alternative active style for `v-treeview` node. Only visible when `activatable` is `true` and should not be used in conjunction with the `rounded` prop.",
      "transition": "Applies a transition when nodes are opened and closed",
      "value": "Allows one to control which nodes are selected. The array consists of the `item-key` of each selected item. Is used with `@input` event to allow for `v-model` binding."
    }
  },
  "slots": {
    "v-treeview": {
      "append": "Appends content after label",
      "label": "Label content",
      "prepend": "Prepends content before label"
    }
  },
  "functions": {
    "updateAll": "Opens or closes all nodes"
  },
  "events": {
    "input": "Emits the array of selected items when this value changes",
    "update:active": "Emits the array of active items when this value changes",
    "update:open": "Emits the array of open items when this value changes"
  }
}
