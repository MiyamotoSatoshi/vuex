{
  "heading": "# Sliders",
  "headingText": "The `v-slider` component is a better visualization of the number input. It is used for gathering numerical user data.",
  "usageText": "Sliders reflect a range of values along a bar, from which users may select a single value. They are ideal for adjusting settings such as volume, brightness, or applying image filters.",
  "examples": {
    "thumb": {
      "heading": "### Thumb",
      "desc": "You can display a `thumb-label` while sliding or always. It It can have a custom color by setting `thumb-color` and a custom size with `thumb-size`. With `always-dirty` its color will never change, even when on `min` value."
    },
    "custom-thumb": {
      "heading": "### Custom Range slider",
      "desc": " Using the `tick-labels` prop along with slots, you can create a very customized solution."
    },
    "ticks": {
      "heading": "### Ticks",
      "desc": "Tick marks represent predetermined values to which the user can move the slider."
    },
    "discrete": {
      "heading": "### Discrete",
      "desc": "Discrete sliders offer a thumb label that displays the exact current amount. Using the `step` prop you can disallow selecting values outside of steps."
    },
    "icons": {
      "heading": "### Icons",
      "desc": "You can add icons to the slider with the `append-icon` and `prepend-icon` props. With `@click:append` and `@click:prepend` you can trigger a callback function when click the icon."
    },
    "editable-numeric-value": {
      "heading": "### With an editable numeric value",
      "desc": "Sliders can be combined with other components for a better display."
    },
    "custom-colors": {
      "heading": "### Custom colors",
      "desc": "You can set the colors of the slider using the props `color`, `track-color` and `thumb-color`."
    },
    "validation": {
      "heading": "### Validation",
      "desc": "Vuetify includes simple validation through the `rules` prop. The prop accepts an array of callbacks. While validating rules, the current v-model value will be passed to the callback. This callback should return either `true` or a `String`, the error message."
    },
    "range": {
      "heading": "### Range",
      "desc": "Range sliders."
    },
    "min-max": {
      "heading": "### Min & Max values",
      "desc": "You can set `min` and `max` values of sliders."
    },
    "metronome": {
      "heading": "### Slots",
      "desc": "Use slots such as `prepend` and `append` to easily customize the `v-slider` to fit any situation."
    },
    "vertical": {
      "heading": "### Vertical sliders",
      "desc": "You can use `vertical` to switch sliders to a vertical orientation. If you need to change the height of the slider, use css."
    },
    "disabled": {
      "heading": "### Disabled",
      "desc": "You cannot interact with `disabled` sliders."
    },
    "readonly": {
      "heading": "### Readonly",
      "desc": "You cannot interact with `readonly` sliders, but they look as ordinary ones."
    },
    "inverse-label": {
      "heading": "### Inverse label",
      "desc": "`v-slider` with `inverse-label` property displays label at the end of it."
    }
  },
  "props": {
    "alwaysDirty": "When used with the **thumb-label** prop will always show the thumb label.",
    "dark": "Components.Inputs.props.dark",
    "inverseLabel": "Reverse the label position. Works with **rtl**.",
    "max": "Sets the maximum allowed value",
    "min": "Sets the minimum allowed value",
    "step": "If greater than 0, sets step interval for ticks",
    "thumbColor": "Sets the thumb and thumb label color",
    "thumbLabel": "Show thumb label. If `true` it shows label when using slider. If set to `'always'` it always shows label.",
    "thumbSize": "Controls the size of the thumb label.",
    "ticks": "Show track ticks. If `true` it shows ticks when using slider. If set to `'always'` it always shows ticks.",
    "tickLabels": "When provided with Array<string>, will attempt to map the labels to each step in index order",
    "tickSize": "Controls the size of **ticks**",
    "trackColor": "Sets the track's color",
    "trackFillColor": "Sets the track's fill color",
    "vertical": "Changes slider direction to vertical"
  },
  "events": {
    "end": "Slider value emitted at the end of slider movement",
    "start": "Slider value emitted at start of slider movement"
  },
  "slots": {
    "thumb-label": "Replaces the content inside the thumb label"
  }
}
