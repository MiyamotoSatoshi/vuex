{
  "header": "# Selection controls",
  "headerText": "Selection control components allow a user to select options. These components **must** be used with the `v-model` prop as they do not maintain their own state.",
  "examples": {
    "usage": {
      "desc": ""
    },
    "checkboxesBoolean": {
      "header": "### Checkboxes - Boolean",
      "desc": ""
    },
    "checkboxesArray": {
      "header": "### Checkboxes - Array",
      "desc": ""
    },
    "checkboxesStates": {
      "header": "### Checkboxes - States",
      "desc": ""
    },
    "checkboxesColors": {
      "header": "### Checkboxes - Colors",
      "desc": "Checkboxes can be colored by using any of the builtin colors and contextual names using the `color` prop."
    },
    "checkboxesInlineTexfield": {
      "header": "### Checkboxes - Inline with a textfield",
      "desc": ""
    },
    "radiosDefault": {
      "header": "### Radios - Default",
      "desc": "Radio-groups are by default mandatory. This can be changed with the `mandatory` prop."
    },
    "radiosDirection": {
      "header": "### Radios - Direction",
      "desc": "Radio-groups can be presented either as a row or a column, using their respective props. The default is as a column."
    },
    "radiosColors": {
      "header": "### Radios - Colors",
      "desc": "Radios can be colored by using any of the builtin colors and contextual names using the `color` prop."
    },
    "switchesBoolean": {
      "header": "### Switches - Boolean",
      "desc": ""
    },
    "switchesArray": {
      "header": "### Switches - Array",
      "desc": ""
    },
    "switchesStates": {
      "header": "### Switches - States",
      "desc": ""
    },
    "switchesColors": {
      "header": "### Switches - Colors",
      "desc": "Switches can be colored by using any of the builtin colors and contextual names using the `color` prop."
    },
    "switchesFlat": {
      "header": "### Switches - Flat",
      "desc": "You can make switch render without elevation of thumb using `flat` property."
    },
    "labelSlot": {
      "header": "### Label slot",
      "desc": "Selection controls' labels can be defined in `label` slot - that will allow to use HTML content"
    }
  },
  "props": {
    "column": "Displays radio buttons in column",
    "flat": "Display component without elevation. Default elevation for thumb is 4dp, `flat` resets it",
    "indeterminate": "Sets an indeterminate state for the checkbox",
    "indeterminateIcon": "The icon used when in an indeterminate state",
    "inputValue": "The **v-model** bound value",
    "inset": "Enlarge the `v-switch` track to encompass the thumb",
    "loading": "Displays circular progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - primary, secondary, success, info, warning, error) or a Boolean which uses the component color (set by color prop - if it's supported by the component) or the primary color",
    "mandatory": "Forces a selection on a `v-radio` child",
    "multiple": "Changes expected model to an array",
    "name": "Sets the component's name attribute",
    "offIcon": "The icon used when inactive",
    "onIcon": "The icon used when active",
    "row": "Displays radio buttons in row",
    "value": "Sets the value of the selection control component",
    "v-radio": {
      "disabled": "Mixins.Validatable.props.disabled",
      "label": "Components.Inputs.props.label",
      "readonly": "Mixins.Validatable.props.readonly"
    }
  },
  "slots": {
    "append": "Components.Selects.slots.append",
    "prepend": "Components.Selects.slots.prepend"
  },
  "events": {
    "change": "Components.Inputs.events.change",
    "update:error": "Mixins.Validatable.events['update:error']"
  }
}
