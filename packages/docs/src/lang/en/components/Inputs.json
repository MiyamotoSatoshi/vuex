{
  "header": "# Inputs",
  "headerText": "The `v-input` component gives you a baseline to create your own custom inputs. It consists of a prepend/append slot, messages, and a default slot. It is _recommended_ that you extend this component, but it can be used as a standalone.",
  "examples": {
    "usage": {
      "desc": "`v-input` has 4 main areas. The prepended slot, the appended slot, the default slot, and messages. These make up the core logic shared between all form components."
    },
    "loading": {
      "header": "### Loading",
      "desc": "`v-input` has `loading` state which can be used, e.g. for data loading indication. Note: `v-text-field` is used just for example."
    },
    "success": {
      "header": "### Success",
      "desc": "As any validatable Vuetify component, `v-input` can be set to success state using `success` prop, you can add message to it using `success-messages` prop."
    },
    "error": {
      "header": "### Error",
      "desc": "As any validatable Vuetify component, `v-input` can be set to error state using `error` prop, messages can be added using `error-messages` prop. You can determine error messages count to show using `error-count` property."
    },
    "multi-error": {
      "header": "### Multiple errors",
      "desc": "You can add multiple errors to `v-input` using `error-count` property."
    },
    "rules": {
      "header": "### Rules",
      "desc": "You can add custom validation rules to `v-input`, add them as functions returning `true`/error message. Note: `v-text-field` is used just for example."
    },
    "slot-events": {
      "header": "### Slot events",
      "desc": "`v-input` can have `click:append` and `click:prepend` events for its slots. Note: `v-text-field` is used just for example."
    },
    "slots": {
      "header": "### Slots",
      "desc": "`v-input` has `append` and `prepend` slots. You can place custom icons in them."
    },
    "hint": {
      "header": "### Hint",
      "desc": "`v-input` can have `hint` which can tell user how to use the input. `persistent-hint` prop makes the hint visible always if no messages are displayed."
    }
  },
  "props": {
    "appendIcon": "Appends an icon to the component, uses the same syntax as `v-icon`",
    "backgroundColor": "Changes the background-color of the input",
    "dark": "Applies the dark theme variant to the component. This will default the components color to _white_ unless you've configured your [application theme](/customization/theme) to **dark** or if you are using the **color** prop on the component. You can find more information on the Material Design documentation for [dark themes](https://material.io/design/color/dark-theme.html).",
    "hideDetails": "Hides hint, validation errors",
    "height": "Sets the height of the input",
    "hint": "Hint text",
    "label": "Sets input label",
    "loading": "Mixins.Loadable.props.loading",
    "persistentHint": "Forces hint to always be visible",
    "placeholder": "Sets the input's placeholder text",
    "prependIcon": "Prepends an icon to the component, uses the same syntax as `v-icon`",
    "required": "Designates the input as required; Adds an asterisk to the end of the label; Does not perform any validation.",
    "tabindex": "Tab index of input",
    "toggleKeys": "Array of key codes that will toggle the input (if it supports toggling)",
    "value": "Input value"
  },
  "slots": {
    "append": "Adds an item after input content",
    "label": "Replaces the default label",
    "prepend": "Adds an item before input content"
  },
  "events": {
    "blur": "Emitted when the input is blurred",
    "change": "Emitted when the input is changed by user interaction",
    "click": "Emitted when input is clicked",
    "click:append": "Emitted when appended icon is clicked",
    "click:prepend": "Emitted when prepended icon is clicked",
    "mousedown": "Emitted when click is pressed",
    "mouseup": "Emitted when click is released"
  }
}
