{
  "header": "# Slider",
  "headerText": "The `v-slider` component is a better visualization of the number input. It is used for gathering numerical user data.",
  "examples": {
    "usage": {
      "desc": "Sliders reflect a range of values along a bar, from which users may select a single value. They are ideal for adjusting settings such as volume, brightness, or applying image filters."
    },
    "thumb": {
      "header": "### Thumb",
      "desc": "You can display a `thumb-label` while sliding or always. It It can have a custom color by setting `thumb-color` and a custom size with `thumb-size`. With `always-dirty` its color will never change, even when on `min` value."
    },
    "customThumb": {
      "header": "### Custom Range slider",
      "desc": " Using the `tick-labels` prop along with a scoped slot, you can create a very customized solution."
    },
    "ticks": {
      "header": "### Ticks",
      "desc": "Tick marks represent predetermined values to which the user can move the slider."
    },
    "discrete": {
      "header": "### Discrete",
      "desc": "Discrete sliders offer a thumb label that displays the exact current amount. Using the `step` prop you can disallow selecting values outside of steps."
    },
    "icons": {
      "header": "### Icons",
      "desc": "You can add icons to the slider with the `append-icon` and `prepend-icon` props. With `@click:append` and `@click:prepend` you can trigger a callback function when click the icon."
    },
    "editableNumericValue": {
      "header": "### With an editable numeric value",
      "desc": "Sliders can be combined with other components for a better display."
    },
    "customColors": {
      "header": "### Custom colors",
      "desc": "You can set the colors of the slider using the props `color`, `track-color` and `thumb-color`."
    },
    "validation": {
      "header": "### Validation",
      "desc": "Vuetify includes simple validation through the `rules` prop. The prop accepts an array of callbacks. While validating rules, the current v-model value will be passed to the callback. This callback should return either `true` or a `String`, the error message."
    },
    "range": {
      "header": "### Range",
      "desc": "Range sliders."
    },
    "minMax": {
      "header": "### Min & Max values",
      "desc": "You can set `min` and `max` values of sliders."
    },
    "metronome": {
      "header": "### Metronome",
      "desc": "Use slotted _prepend_ and _append_ icons to easily customize the `v-slider` to fit any situation."
    }
  },
  "props": {
    "alwaysDirty": "When used with the **thumb-label** prop will always show the thumb label.",
    "inverseLabel": "Reverse the label position. Works with **rtl**.",
    "step": "If greater than 0, sets step interval for ticks",
    "thumbColor": "Sets the thumb and thumb label color",
    "thumbLabel": "Show thumb label",
    "thumbSize": "Controls the size of the **thumb-label**",
    "ticks": "",
    "tickLabels": "When provided with Array<string>, will attempt to map the labels to each step in index order",
    "tickSize": "Controls the size of **ticks**",
    "trackColor": "Sets the track fill color"
  },
  "events": {
    "change": "Components.Inputs.events.change",
    "click:append": "Components.Inputs.events['click:append']",
    "click:prepend": "Components.Inputs.events['click:prepend']",
    "end": "Slider value emitted at the end of slider movement",
    "start": "Slider value emitted at start of slider movement",
    "update:error": "Mixins.Validatable.events['update:error']"
  }
}
