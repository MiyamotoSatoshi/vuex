{
  "heading": "# A-la-carte (ツリーシェーキング)",
  "treeshakeWarning": "ツリーシェーキングは、**production mode** のWebpack 4でのみ機能します。 Vue CLI 3を使用する場合、自動的に適用されます。",
  "loaderHeader1": "## vuetify-loader",
  "loaderText1a": "使用しているすべてのコンポーネントを追跡するのは非常に面倒です。 [vuetify-loader](https://github.com/vuetifyjs/vuetify-loader) は使用するすべてのVuetifyコンポーネントを、使用する場所で自動的にインポートすることで、この苦痛を軽減します。また、webpackは表示するチャンクに必要なコンポーネントのみをロードするため、コード分割がより効果的になります。",
  "loaderHeader2": "### インポート",
  "loaderText2a": "アラカルトコンポーネントを利用するには、**vuetify/lib** からVuetifyをインポートする必要があります。",
  "optionsInfo": "**Vue.use** に 2 番目の引数として渡す options オブジェクトには、コンポーネント、ディレクティブ、およびトランジションプロパティを含めることもできます。",
  "loaderText3a": "推奨されませんが、Vue CLIプラグインの使用をオプトアウトし、代わりにVue CLIから[configure webpack](https://cli.vuejs.org/config/#configurewebpack) オプションを使用してローダーを手動で構成できます。",
  "loaderText4a": "webpackベースのプロジェクトのローダーを明示的にインストールすることもできます。 vue.config.jsのセットアップと同様に、プロジェクトのwebpackプラグインにローダーを追加するだけです。",
  "loaderText5a": "`vuetify/lib`からインポートすると、ベースラインフレームワークのスタイルも取り込まれます。各コンポーネントは個別にスタイルを担当し、同じようにコンパイルされます。Vue CLI と`vue-cli-plugin-vuetify` プラグインを使用している場合は、この処理が自動的に行われるため、このセクションは**スキップ**できます。cliにアクセスできないプロジェクトで作業している場合は、必要なパッケージを手動でインクルードすることができます。",
  "sassInfo": "SASSを扱うアプリケーションの設定方法については、[テーマページ](/customization/theme) に移動してください。",
  "loaderText5b": "インストール後も、.sassファイルをパースするように webpack.config.js を設定する必要があります。**fibers**でこれを行う方法の詳細については、[公式ドキュメント](https://webpack.js.org/loaders/sass-loader/) をチェックしてください。",
  "loaderText6a": "また、vuetify-loaderでは、独自のカスタムマッチ関数を記述して、独自のプロジェクトのコンポーネントをインポートすることもできます。これは、Vue CLI と webpack プロジェクトの両方で行うことができます。",
  "loaderHeader7": "## 制限事項",
  "loaderText7a": "`vuetify-loaderを使用する場合、コンポーネントの手動インポートが必要なシナリオがいくつかあります。",
  "loaderText8a": "`v-data-iterator` は、content-tag propを介して任意のコンポーネントを使用できます。このコンポーネントは [globally](#markup-js-a-la-carte-manual) に登録する必要があります。",
  "loaderText8b": "`<component :is=\"my-component\">`で使用される動的コンポーネントは [locally](#markup-js-a-la-carte-destructuring) で登録できます:",
  "loaderText9a": "機能コンポーネントは実行時に vue によってインライン化され、オプションに **components** プロパティを持つことはできません。カスタム機能コンポーネントで使用される Vuetify コンポーネントは、グローバルに登録するか (推奨)、またはカスタムコンポーネントを使用する場所にローカルで登録する必要があります。",
  "loaderHeader10": "## 手動インポート",
  "loaderText10a": "Vuetify loaderを使用していない場合は、コンポーネントを手動でインポートできます。また、明示的な使用法のみをパースするので、動的コンポーネントと **vuetify-loader** を使用する場合にもこれを行います。これは一般的に、Vue `<component is=\"my-component\" />` でビルドされたコンポーネントを使用している場合に発生します。動的コンポーネントの詳細については、公式 Vue [documentation](https://jp.vuejs.org/v2/guide/components.html#%E5%8B%95%E7%9A%84%E3%81%AA%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88) をご覧ください。",
  "loaderText10b": "以下に示すように、.vue ファイルのコンポーネントをインポートすることもできます。"
}
