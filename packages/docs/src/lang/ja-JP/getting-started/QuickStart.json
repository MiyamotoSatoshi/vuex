{
  "header": "# クイックスタート",
  "headerText": "Vuetify Vue CLI パッケージを使用すれば、_(公式ページの例を元に)_ プロジェクトの開発が今すぐ始められます。Vuetify は **SSR** (サーバーサイド・レンダリング)、**SPA** (シングルページ・アプリケーション)、**PWA** (プログレッシブ・ウェブアプリ)、そして、標準の **HTML** ページのすべてをサポートしています。",
  "vueCliHeader": "## Vue CLI 3 のインストール",
  "vueCliText1": "Vue CLI 3は、より簡単に開発を開始可能にする次世代のCLIツールです。Vue CLI 3を使ってアプリケーションを作ると、公式のwebpackアップデートとコンフィグの変更が利用可能になり、面倒なアップグレード作業をやらずにVuetifyを更新できるようになります。",
  "vueCliText2": "Vue CLI 3 の使用方法に関する情報については、[公式ドキュメント](https://cli.vuejs.org/guide/) を確認してください。",
  "vueCliText3": "**ヒント**: もしすでに **Vue CLI** がインストール済みである場合、ターミナルで <kbd>vue --version</kbd> とタイプして最新版に更新されているかどうかを確認してください。",
  "vueCliText4": "CLI のインストールが完了したら、新しいプロジェクトのテンプレートを生成することができます。特定のパッケージ \n(たとえば、_vuex_ や _vue-router_ など) を追加する必要がないのであれば、_デフォルトインストール_ を選択してください。これにより、選択したオプションが設定済みの新しい Vue プロジェクトが作成されます。",
  "vueCliText5": "プロジェクトの初期化が終わったら、CLI を使用して [Vuetify パッケージ](https://github.com/vuetifyjs/vue-cli-plugin-vuetify) を追加することができます。",
  "vueCliText6": "ここではインストール内容をカスタマイズするためのオプションを選択できます。デフォルトプリセットでは [a-la-carte](/customization/a-la-carte) が有効になっています。",
  "vueCliText7": "インストールが完了したら、<kbd>yarn serve</kbd> あるいは <kbd>npm run serve</kbd> を実行してアプリケーションをスタートしましょう。",
  "uiHeader": "## Vue UI のインストール",
  "uiText1": "Vuetify は _@vue/cli_ の新しいビジュアルアプリケーションである **Vue UI** を使用してインストールすることもできます。まず、Vue CLI の最新版がインストールされていることを確認します。そして、ターミナルに次のコマンドを入力します。",
  "uiText2": "これにより、Vue のユーザーインターフェイスが実行され、 [新規ウィンドウ](http://localhost:8000) がブラウザで開きます。ページ左側の **プラグイン** をクリックします。そして _Vuetify_ と入力して検索してください。",
  "uiImg1": "Vuetify プラグインのインストール",
  "uiImg2": "Vuetify インストールの設定",
  "uiText3": "インストールが完了したら、アプリケーションのデフォルトの Vuetify 設定を行うことができます。",
  "browserHeader": "## サポートしているブラウザ",
  "browserText": "Vuetify は、ウェブ開発を次のレベルへ進めるプログレッシブフレームワークです。この目的を達成するために、古いバージョンの Internet Explorer には一部制限があります。次の表は包括的なリストではありませんが、メインターゲットとしているブラウザの一覧です。",
  "cdnHeader": "## CDN の使用",
  "cdnText": "Vue CLIのテンプレートを使わずにVuetify.jsを試すには、下記のコードを`index.html`に貼り付けてください。最新のVueとVuetifyを使って、コンポーネントを試すことができます。codepenの[Vuetify starter](https://template.vuetifyjs.com)を使うこともできます。おすすめはされていませんが、もし本番環境でCDNパッケージを利用する場合は、アセットのバージョンを指定するようにしましょう。詳しいやり方は[jsdelivr](https://www.jsdelivr.com/)を参照してください。",
  "newHeader": "## 新しいアプリケーション",
  "existingHeader": "## 既存のアプリケーション",
  "existingAlert": "もしあなたのアプリケーションが`Vue CLI 3` を使用している場合、[上記のガイド](#new-applications) にしたがって Vuetify パッケージをインストールしてください。",
  "existingText1": "Vuetifyを既存のアプリケーションに追加するには、 _npm package_ をインストールする必要があります。 `npm` あるいは `yarn`のどちらを使っても追加できます。これらはアプリケーション上でどのようなリソースを利用可能にするかを管理するためのパッケージマネージャーです。",
  "existingText2": "`npm` の実行方法については、[npmの公式ドキュメント](https://docs.npmjs.com/getting-started/what-is-npm)を参照してください。yarnを使いたい場合は、[yarnの公式ドキュメント](https://yarnpkg.com/lang/en/docs/)を参照してください。セットアップ後、CLIからコマンドを実行できるようになります。",
  "existingText3": "Vuetifyがインストールされたら、`src`ディレクトリの下に`plugins`ディレクトリを作ってください。内部に **vuetify.js** ファイルを追加します。ここにVuetifyのブートストラップとセットアップに関する全てを記述していきます。",
  "existingHeader3a": "### vuetify-loader インストール",
  "existingText3a": "Vuetifyをインストールする方法は3つあります。1つ目の方法(おすすめ)は、自動 **A-la-carte** と呼んでいる[vuetify-loader](https://github.com/vuetifyjs/vuetify-loader)を使った方法です。この方法ではVuetifyの必要な機能とスタイルだけが利用されていることが確かめられつつ、コンパイル後のアプリケーションサイズが大きく削減されます。`vuetify/lib`からVuetifyをインポートすると、必要なスタイルも自動でインポートされることを覚えておいてください。",
  "existingText3a1": "もし**Vue CLI 3**パッケージを使えない理由がある場合は、**vue.config.js** あるいは **webpack** のconfigを使って手動でインストールすることもできます。詳しくは[A-la-carte page](/customization/a-la-carte)を参照してください。",
  "existingHeader3b": "### アラカルト・インストール",
  "existingText3b": "**vuetify-loader** を使用せずに、一つひとつのコンポーネントを手動でインポートして使用することも可能です。次は、手動で用意した **アラカルト** の一例です。",
  "existingHeader3c": "### フル・インストール",
  "existingText3c": "最後は、Vuetifyの**全て**の機能とスタイルをインポート・設定する方法です。ただし前述の通り、出来るだけ**vuetify-loader**を使ってインストールする方法が**おすすめ**されています。この方法では、手動でスタイルを読み込む必要があります。この方法は、実行時にブラウザからVuetifyを読み込み初期化するやり方でも使われます。ブラウザからVuetifyをインストールする方法については[cdn quickstart](https://codepen.io/johnjleider/pen/bgJOrX)を参照してください。",
  "webpackHeader1": "### Webpackでのインストール",
  "webpackText1": "**フル** / **A-la-carte**いずれの場合でも、Webpackを使ってアプリケーションの設定をすることができます。ただし、sassファイル用のルールを追加(あるいは既存のものを変更) する必要があります。まずは、必要な依存パッケージをインストールしましょう:",
  "webpackText2": "インストールが終わったら、`webpack.config.js`の**rules**に下のスニペットをコピーします。すでに**sass**のルールを設定している時は、下記のスニペットの一部あるいは全てを適用する必要があるかもしれません。**vuetify-loader**の利用を考えている場合は、[A-la-carte](/customization/a-la-carte#vueconfigjs-installation)にWebpackとあわせて利用する際の情報が記述されています。",
  "existingHeader4": "## Vuetifyオブジェクトのブートストラップ",
  "existingText4": "`src/plugins/vuetify.js`でVuetifyの設定をしたら、それをVueインスタンスに渡してあげます。この処理の流れは **vue-router** や **vuex** と同様です。",
  "existingHeader5": "## フォントのインストール",
  "existingText5": "Vuetifyは[Material Design Specification](https://material.io/design/typography/the-type-system.html)に基づき、Google Robotoフォントを利用します。このフォントを利用する一番簡単な方法は、メインとなる`index.html`の`<head>`に`<link>`タグを追加することです。",
  "existingText6": "[webfontloader](https://github.com/typekit/webfontloader)を使って非同期で読み込ませることもできます。",
  "existingHeader7": "### MDI アイコンフォント",
  "existingText7": "Vuetifyは標準のアイコンフォントに[Material Design Icons](https://materialdesignicons.com/)を使用します。最もシンプルなインストール方法は`npm`を使ったインストールです。",
  "existingText8": "パッケージをインストールしたら、pluginsフォルダの`vuetify.js`内でシンプルにインポートします。",
  "existingText9": "他のアイコンフォントの使い方やさらなる情報については[Icons](/customization/icons) を参照してください。",
  "alert2": "*警告*: Vuetifyはできる限りCSSで衝突が発生しないように試みますが、既存のプロジェクト内であなたがカスタマイズしたスタイルに変化が起きないという保証はありません。",
  "edgeHeader": "## Edgeのサポート",
  "edgeText1": "vuetify/lib`はES6を使用していますが、これはEdgeブラウザ(非chromium) で問題を起こしてしまいます。また、`vuetify/lib`はVue CLI 3の**modern mode**をサポートするため、トランスパイルされません。なので、Vue CLIに`vuetify`パッケージをトランスパイルするように指示する必要があります。将来的にはこの対応は現在バグフィックスのため保留になっているvue-cli-plugin-vuetifyによって自動的に行われるようになる予定です。",
  "ie11Header": "## IE11とSafari 9のサポート",
  "ie11Text": "VuetifyはES2015/2017の機能を使用しており、**Internet Explorer 11**と**Safari 9/10**で動作させるためにPolyfillを使う必要があります。Vue CLI 3を使っている場合、この対応は自動的に行われます。使っていない場合はプロジェクトのディレクトリで`babel-polyfill`をインストールできます:",
  "ie11Text1": "VuetifyはES2015/2017の機能を使用しており、**Internet Explorer 11**と**Safari 9/10**で動作させるためにPolyfillを使う必要があります。Vue CLI 3を使っている場合、この対応は自動的に行われます。使っていない場合はプロジェクトのディレクトリで`babel-polyfill`をインストールできます:",
  "ie11Text2": "その際、メインとなる**index.js**ファイルで可能な限り早いタイミングでプラグインをインクルードするのが重要です。Vuetify SSRパッケージの場合は, **client-entry.js**ファイルになります。",
  "ie11Text3": "`babel-preset-env`と対応するPolyfillを使って、アプリケーションに必要なPolyfillのみが追加されていることを確認するのをおすすめします。詳しい情報は[ドキュメント](https://babeljs.io/docs/en/next/babel-preset-env.html)を参照してください。",
  "ie11Text4": "インストールが終わったら、`.babelrc` または `babel.config.js`にプリセットを追加します。",
  "ie11Text5": "残念ながら、Vue CLI 3はIE11対応を自動的には行わないため、<i>Symbol is not defined</i>のようなエラーに直面する可能性があります。それらのエラーを解決するには、`vue.config.js`に手動で`transpileDependencies`パラメータを追加する必要があるかもしれません。",
  "ie11Text6": "Internet Explorerは`<template>`タグへの対応が限定的なので、完全なコンパイル済みのDOMをブラウザに送る必要があります。これは、Vueコードをあらかじめビルドしておくか、DOM要素を置き換えるためのヘルパーコンポーネントを作ることで対応できます。例えば、IEに直接下記のようなコードを送るとエラーになります:",
  "browserSupport": {
    "supported": "対応",
    "notSupported": "非対応",
    "polyfill": "Polyfillで対応"
  }
}
