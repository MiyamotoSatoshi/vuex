{
  "heading": "# フォーム",
  "headingText": "フォームのバリデーションに関して、Vuetifyには多数の機能が組み込まれています。なお、サードパーティのバリデーションプラグインである[Vee-validate](https://github.com/baianat/Vee-validate)や[vuelidate](https://github.com/monterail/vuelidate)も使用することができます。",
  "examples": {
    "usage": {
      "desc": "内蔵された `v-form`コンポーネントにより、フォーム入力にバリデーションを簡単に追加できます。すべての入力コンポーネントには、関数の配列を受け取る `rules` propがあります。これらの関数を使用すると、フィールドが_valid_または_invalid_になる条件を指定できます。入力の値が変更されるたびに、配列内の各関数は新しい値を受け取ります。関数がfalseまたは文字列を返す場合、バリデーションは失敗しています。"
    },
    "rules": {
      "desc": "ルールを使用すると、すべてのフォーム コンポーネントにカスタムバリデーションを適用できます。これらは順次検証され、一度に 1 エラーの **maximum** が表示されるので、それに応じてルールを並べてください。"
    },
    "validation-with-submit-and-clear": {
      "desc": "`v-form` コンポーネントには、コンポーネントに _ref_ を設定することでアクセスできる **3つの関数** があります。 refを使用すると、コンポーネントの内部メソッドにアクセスできます。たとえば、 `<v-form ref=\"form\">`です。 **this.$refs.form.validate()** はすべての入力をバリデーションし、それらがすべて有効かどうかを返します。 **this.$refs.form.reset()** はすべての入力をクリアし、バリデーションエラーをリセットします。 **this.$refs.form.resetValidation()**は入力バリデーションのみをリセットし、状態を変更しません。"
    },
    "vuelidate": {
      "heading": "### Vuelidate",
      "desc": "**vuelidate** は Vue.js のシンプルで軽量なモデル ベースのバリデーションです。[ドキュメント](https://vuelidate.netlify.com/)"
    },
    "vee-validate": {
      "heading": "### Vee-validate",
      "desc": "**vee-validate** は Vue.js のテンプレートベースのバリデーションフレームワークです。[ドキュメント](https://logaretm.github.io/vee-validate/)"
    }
  },
  "props": {
    "lazyValidation": "有効にすると、表示されるバリデーションエラーが無い限り、 **value** は常に _true_ となります。"
  },
  "events": {
    "submit": "フォーム送信（Submit）時に発生します。"
  },
  "functions": {
    "reset": "（フォーム内の）登録されたすべての入力の状​​態を、配列では **{}** に、その他のすべての値では **null** にリセットします。 **lazy-validation** propを使用しているときにエラーバッグをリセットします。",
    "validate": "全ての入力値をバリデートし結果を返します。"
  }
}
