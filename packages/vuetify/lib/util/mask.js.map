{"version":3,"sources":["../../src/util/mask.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * Default delimiter RegExp\n *\n * @type {RegExp}\n */\nexport const defaultDelimiters = /[-!$%^&*()_+|~=`{}[\\]:\";'<>?,./\\\\ ]/\n\n/**\n *\n * @param {String} char\n *\n * @return {Boolean}\n */\nexport const isMaskDelimiter = char => char && defaultDelimiters.test(char)\n\n/**\n * Mask keys\n *\n * @type {Object}\n */\nconst allowedMasks = {\n  '#': {\n    test: char => char.match(/[0-9]/)\n  },\n  'A': {\n    test: char => char.match(/[A-Z]/i),\n    convert: char => char.toUpperCase()\n  },\n  'a': {\n    test: char => char.match(/[a-z]/i),\n    convert: char => char.toLowerCase()\n  },\n  'N': {\n    test: char => char.match(/[0-9A-Z]/i),\n    convert: char => char.toUpperCase()\n  },\n  'n': {\n    test: char => char.match(/[0-9a-z]/i),\n    convert: char => char.toLowerCase()\n  },\n  'X': {\n    test: isMaskDelimiter\n  }\n}\n\n/**\n * Is Character mask\n *\n * @param  {String} char\n *\n * @return {Boolean}\n */\nconst isMask = char => allowedMasks.hasOwnProperty(char)\n\n/**\n * Automatically convert char case\n *\n * @param  {String} mask\n * @param  {String} char\n *\n * @return {String}\n */\nconst convert = (mask, char) => {\n  return allowedMasks[mask].convert ? allowedMasks[mask].convert(char) : char\n}\n\n/**\n * Mask Validation\n *\n * @param  {String} mask\n * @param  {String} char\n *\n * @return {Boolean}\n */\nconst maskValidates = (mask, char) => {\n  if (char == null || !isMask(mask)) return false\n  return allowedMasks[mask].test(char)\n}\n\n/**\n * Mask Text\n *\n * Takes a string or an array of characters\n * and returns a masked string\n *\n * @param {*} text\n * @param {Array|String} masked\n * @param {Boolean} [dontFillMaskBlanks]\n *\n * @return {String}\n */\nexport const maskText = (text, masked, dontFillMaskBlanks) => {\n  if (text == null) return ''\n  text = String(text)\n  if (!masked.length || !text.length) return text\n  if (!Array.isArray(masked)) masked = masked.split('')\n\n  let textIndex = 0\n  let maskIndex = 0\n  let newText = ''\n\n  while (maskIndex < masked.length) {\n    const mask = masked[maskIndex]\n\n    // Assign the next character\n    const char = text[textIndex]\n\n    // Check if mask is delimiter\n    // and current char matches\n    if (!isMask(mask) && char === mask) {\n      newText += mask\n      textIndex++\n    // Check if not mask\n    } else if (!isMask(mask) && !dontFillMaskBlanks) {\n      newText += mask\n    // Check if is mask and validates\n    } else if (maskValidates(mask, char)) {\n      newText += convert(mask, char)\n      textIndex++\n    } else {\n      return newText\n    }\n\n    maskIndex++\n  }\n\n  return newText\n}\n\n/**\n * Unmask Text\n *\n * @param {String} text\n *\n * @return {String}\n */\nexport const unmaskText = text => {\n  return text ? String(text).replace(new RegExp(defaultDelimiters, 'g'), '') : text\n}\n"],"sourceRoot":""}