{"version":3,"sources":["../../../../src/components/VMenu/mixins/menu-keyable.js"],"names":[],"mappings":";;;;;;;;;AAUA;AACA,SAAS,QAAT,QAAyB,uBAAzB;AAEA;AACA,eAAe;AACb,UAAM;AAAA,eAAO;AACX,uBAAW,CAAC,CADD;AAEX,mBAAO;AAFI,SAAP;AAAA,KADO;AAMb,WAAO;AACL,gBADK,oBACK,GADL,EACQ;AACX,gBAAI,CAAC,GAAL,EAAU,KAAK,SAAL,GAAiB,CAAC,CAAlB;AACX,SAHI;AAIL,iBAJK,qBAIM,IAJN,EAIY,IAJZ,EAIgB;AACnB,gBAAI,QAAQ,KAAK,KAAjB,EAAwB;AACtB,oBAAM,OAAO,KAAK,KAAL,CAAW,IAAX,CAAb;AACA,qBAAK,SAAL,CAAe,GAAf,CAAmB,2BAAnB;AACA,qBAAK,KAAL,CAAW,OAAX,CAAmB,SAAnB,GAA+B,KAAK,SAAL,GAAiB,KAAK,YAArD;AACD;AAED,oBAAQ,KAAK,KAAb,IACE,KAAK,KAAL,CAAW,IAAX,EAAiB,SAAjB,CAA2B,MAA3B,CAAkC,2BAAlC,CADF;AAED;AAbI,KANM;AAsBb,aAAS;AACP,iBADO,qBACI,CADJ,EACK;AACV,gBAAI,CACF,SAAS,IADP,EAEF,SAAS,EAFP,EAGF,SAAS,KAHP,EAIF,QAJE,CAIO,EAAE,OAJT,CAAJ,EAKE,EAAE,cAAF;AAEF,gBAAI,CAAC,SAAS,GAAV,EAAe,SAAS,GAAxB,EAA6B,QAA7B,CAAsC,EAAE,OAAxC,CAAJ,EAAsD;AACpD,uBAAO,KAAK,QAAL,GAAgB,KAAvB;AACD;AAED,iBAAK,eAAL,CAAqB,CAArB;AACD,SAdM;AAeP,uBAfO,2BAeU,CAfV,EAeW;AAChB;AACA,iBAAK,QAAL;AAEA,gBAAI,EAAE,OAAF,KAAc,SAAS,IAAvB,IAA+B,KAAK,SAAL,GAAiB,KAAK,KAAL,CAAW,MAAX,GAAoB,CAAxE,EAA2E;AACzE,qBAAK,SAAL;AACA;AACA;AACD,aAJD,MAIO,IAAI,EAAE,OAAF,KAAc,SAAS,EAAvB,IAA6B,KAAK,SAAL,GAAiB,CAAC,CAAnD,EAAsD;AAC3D,qBAAK,SAAL;AACD,aAFM,MAEA,IAAI,EAAE,OAAF,KAAc,SAAS,KAAvB,IAAgC,KAAK,SAAL,KAAmB,CAAC,CAAxD,EAA2D;AAChE,qBAAK,KAAL,CAAW,KAAK,SAAhB,EAA2B,KAA3B;AACD;AACF,SA5BM;AA6BP,gBA7BO,sBA6BC;AACN,iBAAK,KAAL,GAAa,KAAK,KAAL,CAAW,OAAX,CAAmB,gBAAnB,CAAoC,eAApC,CAAb;AACD;AA/BM;AAtBI,CAAf","sourcesContent":["/**\n * Menu keyable\n *\n * @mixin\n *\n * Primarily used to support VSelect\n * Handles opening and closing of VMenu from keystrokes\n * Will conditionally highlight VListTiles for VSelect\n */\n\n// Utils\nimport { keyCodes } from '../../../util/helpers'\n\n/* @vue/component */\nexport default {\n  data: () => ({\n    listIndex: -1,\n    tiles: []\n  }),\n\n  watch: {\n    isActive (val) {\n      if (!val) this.listIndex = -1\n    },\n    listIndex (next, prev) {\n      if (next in this.tiles) {\n        const tile = this.tiles[next]\n        tile.classList.add('v-list__tile--highlighted')\n        this.$refs.content.scrollTop = tile.offsetTop - tile.clientHeight\n      }\n\n      prev in this.tiles &&\n        this.tiles[prev].classList.remove('v-list__tile--highlighted')\n    }\n  },\n\n  methods: {\n    onKeyDown (e) {\n      if ([\n        keyCodes.down,\n        keyCodes.up,\n        keyCodes.enter\n      ].includes(e.keyCode)\n      ) e.preventDefault()\n\n      if ([keyCodes.esc, keyCodes.tab].includes(e.keyCode)) {\n        return this.isActive = false\n      }\n\n      this.changeListIndex(e)\n    },\n    changeListIndex (e) {\n      // For infinite scroll and autocomplete, re-evaluate children\n      this.getTiles()\n\n      if (e.keyCode === keyCodes.down && this.listIndex < this.tiles.length - 1) {\n        this.listIndex++\n        // Allow user to set listIndex to -1 so\n        // that the list can be un-highlighted\n      } else if (e.keyCode === keyCodes.up && this.listIndex > -1) {\n        this.listIndex--\n      } else if (e.keyCode === keyCodes.enter && this.listIndex !== -1) {\n        this.tiles[this.listIndex].click()\n      }\n    },\n    getTiles () {\n      this.tiles = this.$refs.content.querySelectorAll('.v-list__tile')\n    }\n  }\n}\n"],"sourceRoot":""}