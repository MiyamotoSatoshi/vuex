// Styles
import '../../stylus/components/_steppers.styl';
// Mixins
import { provide as RegistrableProvide } from '../../mixins/registrable';
import Themeable from '../../mixins/themeable';
/* @vue/component */
export default {
    name: 'v-stepper',
    mixins: [
        RegistrableProvide('stepper'),
        Themeable
    ],
    provide() {
        return {
            stepClick: this.stepClick,
            isVertical: this.vertical
        };
    },
    props: {
        nonLinear: Boolean,
        altLabels: Boolean,
        vertical: Boolean,
        value: [Number, String]
    },
    data() {
        return {
            inputValue: null,
            isBooted: false,
            steps: [],
            content: [],
            isReverse: false
        };
    },
    computed: {
        classes() {
            return {
                'v-stepper': true,
                'v-stepper--is-booted': this.isBooted,
                'v-stepper--vertical': this.vertical,
                'v-stepper--alt-labels': this.altLabels,
                'v-stepper--non-linear': this.nonLinear,
                ...this.themeClasses
            };
        }
    },
    watch: {
        inputValue(val, prev) {
            this.isReverse = Number(val) < Number(prev);
            for (let index = this.steps.length; --index >= 0;) {
                this.steps[index].toggle(this.inputValue);
            }
            for (let index = this.content.length; --index >= 0;) {
                this.content[index].toggle(this.inputValue, this.isReverse);
            }
            this.$emit('input', this.inputValue);
            prev && (this.isBooted = true);
        },
        value() {
            this.$nextTick(() => (this.inputValue = this.value));
        }
    },
    mounted() {
        this.inputValue = this.value || this.steps[0].step || 1;
    },
    methods: {
        register(item) {
            if (item.$options.name === 'v-stepper-step') {
                this.steps.push(item);
            }
            else if (item.$options.name === 'v-stepper-content') {
                item.isVertical = this.vertical;
                this.content.push(item);
            }
        },
        unregister(item) {
            if (item.$options.name === 'v-stepper-step') {
                this.steps = this.steps.filter(i => i !== item);
            }
            else if (item.$options.name === 'v-stepper-content') {
                item.isVertical = this.vertical;
                this.content = this.content.filter(i => i !== item);
            }
        },
        stepClick(step) {
            this.$nextTick(() => (this.inputValue = step));
        }
    },
    render(h) {
        return h('div', {
            'class': this.classes
        }, this.$slots.default);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlN0ZXBwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WU3RlcHBlci9WU3RlcHBlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTO0FBQ1QsT0FBTyx3Q0FBd0MsQ0FBQTtBQUUvQyxTQUFTO0FBQ1QsT0FBTyxFQUFFLE9BQU8sSUFBSSxrQkFBa0IsRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBQ3hFLE9BQU8sU0FBUyxNQUFNLHdCQUF3QixDQUFBO0FBRTlDLG9CQUFvQjtBQUNwQixlQUFlO0lBQ2IsSUFBSSxFQUFFLFdBQVc7SUFFakIsTUFBTSxFQUFFO1FBQ04sa0JBQWtCLENBQUMsU0FBUyxDQUFDO1FBQzdCLFNBQVM7S0FDVjtJQUVELE9BQU87UUFDTCxPQUFPO1lBQ0wsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUTtTQUMxQixDQUFBO0lBQ0gsQ0FBQztJQUVELEtBQUssRUFBRTtRQUNMLFNBQVMsRUFBRSxPQUFPO1FBQ2xCLFNBQVMsRUFBRSxPQUFPO1FBQ2xCLFFBQVEsRUFBRSxPQUFPO1FBQ2pCLEtBQUssRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7S0FDeEI7SUFFRCxJQUFJO1FBQ0YsT0FBTztZQUNMLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLFFBQVEsRUFBRSxLQUFLO1lBQ2YsS0FBSyxFQUFFLEVBQUU7WUFDVCxPQUFPLEVBQUUsRUFBRTtZQUNYLFNBQVMsRUFBRSxLQUFLO1NBQ2pCLENBQUE7SUFDSCxDQUFDO0lBRUQsUUFBUSxFQUFFO1FBQ1IsT0FBTztZQUNMLE9BQU87Z0JBQ0wsV0FBVyxFQUFFLElBQUk7Z0JBQ2pCLHNCQUFzQixFQUFFLElBQUksQ0FBQyxRQUFRO2dCQUNyQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsUUFBUTtnQkFDcEMsdUJBQXVCLEVBQUUsSUFBSSxDQUFDLFNBQVM7Z0JBQ3ZDLHVC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ZCxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87U0FDdEIsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ3pCLENBQUM7Q0FDRixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU3R5bGVzXG5pbXBvcnQgJy4uLy4uL3N0eWx1cy9jb21wb25lbnRzL19zdGVwcGVycy5zdHlsJ1xuXG4vLyBNaXhpbnNcbmltcG9ydCB7IHByb3ZpZGUgYXMgUmVnaXN0cmFibGVQcm92aWRlIH0gZnJvbSAnLi4vLi4vbWl4aW5zL3JlZ2lzdHJhYmxlJ1xuaW1wb3J0IFRoZW1lYWJsZSBmcm9tICcuLi8uLi9taXhpbnMvdGhlbWVhYmxlJ1xuXG4vKiBAdnVlL2NvbXBvbmVudCAqL1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAndi1zdGVwcGVyJyxcblxuICBtaXhpbnM6IFtcbiAgICBSZWdpc3RyYWJsZVByb3ZpZGUoJ3N0ZXBwZXInKSxcbiAgICBUaGVtZWFibGVcbiAgXSxcblxuICBwcm92aWRlICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RlcENsaWNrOiB0aGlzLnN0ZXBDbGljayxcbiAgICAgIGlzVmVydGljYWw6IHRoaXMudmVydGljYWxcbiAgICB9XG4gIH0sXG5cbiAgcHJvcHM6IHtcbiAgICBub25MaW5lYXI6IEJvb2xlYW4sXG4gICAgYWx0TGFiZWxzOiBCb29sZWFuLFxuICAgIHZlcnRpY2FsOiBCb29sZWFuLFxuICAgIHZhbHVlOiBbTnVtYmVyLCBTdHJpbmddXG4gIH0sXG5cbiAgZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlucHV0VmFsdWU6IG51bGwsXG4gICAgICBpc0Jvb3RlZDogZmFsc2UsXG4gICAgICBzdGVwczogW10sXG4gICAgICBjb250ZW50OiBbXSxcbiAgICAgIGlzUmV2ZXJzZTogZmFsc2VcbiAgICB9XG4gIH0sXG5cbiAgY29tcHV0ZWQ6IHtcbiAgICBjbGFzc2VzICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICd2LXN0ZXBwZXInOiB0cnVlLFxuICAgICAgICAndi1zdGVwcGVyLS1pcy1ib290ZWQnOiB0aGlzLmlzQm9vdGVkLFxuICAgICAgICAndi1zdGVwcGVyLS12ZXJ0aWNhbCc6IHRoaXMudmVydGljYWwsXG4gICAgICAgICd2LXN0ZXBwZXItLWFsdC1sYWJlbHMnOiB0aGlzLmFsdExhYmVscyxcbiAgICAgICAgJ3Ytc3RlcHBlci0tbm9uLWxpbmVhcic6IHRoaXMubm9uTGluZWFyLFxuICAgICAgICAuLi50aGlzLnRoZW1lQ2xhc3Nlc1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICB3YXRjaDoge1xuICAgIGlucHV0VmFsdWUgKHZhbCwgcHJldikge1xuICAgICAgdGhpcy5pc1JldmVyc2UgPSBOdW1iZXIodmFsKSA8IE51bWJlcihwcmV2KVxuICAgICAgZm9yIChsZXQgaW5kZXggPSB0aGlzLnN0ZXBzLmxlbmd0aDsgLS1pbmRleCA+PSAwOykge1xuICAgICAgICB0aGlzLnN0ZXBzW2luZGV4XS50b2dnbGUodGhpcy5pbnB1dFZhbHVlKVxuICAgICAgfVxuICAgICAgZm9yIChsZXQgaW5kZXggPSB0aGlzLmNvbnRlbnQubGVuZ3RoOyAtLWluZGV4ID49IDA7KSB7XG4gICAgICAgIHRoaXMuY29udGVudFtpbmRleF0udG9nZ2xlKHRoaXMuaW5wdXRWYWx1ZSwgdGhpcy5pc1JldmVyc2UpXG4gICAgICB9XG5cbiAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JywgdGhpcy5pbnB1dFZhbHVlKVxuICAgICAgcHJldiAmJiAodGhpcy5pc0Jvb3RlZCA9IHRydWUpXG4gICAgfSxcbiAgICB2YWx1ZSAoKSB7XG4gICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiAodGhpcy5pbnB1dFZhbHVlID0gdGhpcy52YWx1ZSkpXG4gICAgfVxuICB9LFxuXG4gIG1vdW50ZWQgKCkge1xuICAgIHRoaXMuaW5wdXRWYWx1ZSA9IHRoaXMudmFsdWUgfHwgdGhpcy5zdGVwc1swXS5zdGVwIHx8IDFcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgcmVnaXN0ZXIgKGl0ZW0pIHtcbiAgICAgIGlmIChpdGVtLiRvcHRpb25zLm5hbWUgPT09ICd2LXN0ZXBwZXItc3RlcCcpIHtcbiAgICAgICAgdGhpcy5zdGVwcy5wdXNoKGl0ZW0pXG4gICAgICB9IGVsc2UgaWYgKGl0ZW0uJG9wdGlvbnMubmFtZSA9PT0gJ3Ytc3RlcHBlci1jb250ZW50Jykge1xuICAgICAgICBpdGVtLmlzVmVydGljYWwgPSB0aGlzLnZlcnRpY2FsXG4gICAgICAgIHRoaXMuY29udGVudC5wdXNoKGl0ZW0pXG4gICAgICB9XG4gICAgfSxcbiAgICB1bnJlZ2lzdGVyIChpdGVtKSB7XG4gICAgICBpZiAoaXRlbS4kb3B0aW9ucy5uYW1lID09PSAndi1zdGVwcGVyLXN0ZXAnKSB7XG4gICAgICAgIHRoaXMuc3RlcHMgPSB0aGlzLnN0ZXBzLmZpbHRlcihpID0+IGkgIT09IGl0ZW0pXG4gICAgICB9IGVsc2UgaWYgKGl0ZW0uJG9wdGlvbnMubmFtZSA9PT0gJ3Ytc3RlcHBlci1jb250ZW50Jykge1xuICAgICAgICBpdGVtLmlzVmVydGljYWwgPSB0aGlzLnZlcnRpY2FsXG4gICAgICAgIHRoaXMuY29udGVudCA9IHRoaXMuY29udGVudC5maWx0ZXIoaSA9PiBpICE9PSBpdGVtKVxuICAgICAgfVxuICAgIH0sXG4gICAgc3RlcENsaWNrIChzdGVwKSB7XG4gICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiAodGhpcy5pbnB1dFZhbHVlID0gc3RlcCkpXG4gICAgfVxuICB9LFxuXG4gIHJlbmRlciAoaCkge1xuICAgIHJldHVybiBoKCdkaXYnLCB7XG4gICAgICAnY2xhc3MnOiB0aGlzLmNsYXNzZXNcbiAgICB9LCB0aGlzLiRzbG90cy5kZWZhdWx0KVxuICB9XG59XG4iXX0=