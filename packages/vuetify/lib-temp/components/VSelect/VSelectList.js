import '../../stylus/components/_cards.styl';
// Components
import VCheckbox from '../VCheckbox';
import VDivider from '../VDivider';
import VSubheader from '../VSubheader';
import { VList, VListTile, VListTileAction, VListTileContent, VListTileTitle } from '../VList';
// Mixins
import Colorable from '../../mixins/colorable';
import Themeable from '../../mixins/themeable';
// Helpers
import { escapeHTML, getPropertyFromItem } from '../../util/helpers';
/* @vue/component */
export default {
    name: 'v-select-list',
    mixins: [
        Colorable,
        Themeable
    ],
    props: {
        action: Boolean,
        dense: Boolean,
        hideSelected: Boolean,
        items: {
            type: Array,
            default: () => []
        },
        itemAvatar: {
            type: [String, Array, Function],
            default: 'avatar'
        },
        itemDisabled: {
            type: [String, Array, Function],
            default: 'disabled'
        },
        itemText: {
            type: [String, Array, Function],
            default: 'text'
        },
        itemValue: {
            type: [String, Array, Function],
            default: 'value'
        },
        noDataText: String,
        noFilter: Boolean,
        searchInput: {
            default: null
        },
        selectedItems: {
            type: Array,
            default: () => []
        }
    },
    computed: {
        parsedItems() {
            return this.selectedItems.map(item => this.getValue(item));
        },
        tileActiveClass() {
            return Object.keys(this.setTextColor(this.color).class || {}).join(' ');
        },
        staticNoDataTile() {
            const tile = {
                on: {
                    mousedown: e => e.preventDefault() // Prevent onBlur from being called
                }
            };
            return this.$createElement(VListTile, tile, [
                this.genTileContent(this.noDataText)
            ]);
        }
    },
    methods: {
        genAction(item, inputValue) {
            const data = {
                on: {
                    click: e => {
                        e.stopPropagation();
                        this.$emit('select', item);
                    }
                }
            };
            return this.$createElement(VListTileAction, data, [
                this.$createElement(VCheckbox, {
                    props: {
                        color: this.color,
                        inputValue
                    }
                })
            ]);
        },
        genDivider(props) {
            return this.$createElement(VDivider, { props });
        },
        genFilteredText(text) {
            text = (text || '').toString();
            if (!this.searchInput || this.noFilter)
                return escapeHTML(text);
            const { start, middle, end } = this.getMaskedCharacters(text);
            return `${escapeHTML(start)}${this.genHighlight(middle)}${escapeHTML(end)}`;
        },
        genHeader(props) {
            return this.$createElement(VSubheader, { props }, props.header);
        },
        genHighlight(text) {
            return `<span class="v-list__tile__mask">${escapeHTML(text)}</span>`;
        },
        getMaskedCharacters(text) {
            const searchInput = (this.searchInput || '').toString().toLowerCase();
            const index = text.toLowerCase().indexOf(searchInput);
            if (index < 0)
                return { start: '', middle: text, end: '' };
            const start = text.slice(0, index);
            const middle = text.slice(index, index + searchInput.length);
            const end = text.slice(index + searchInput.length);
            return { start, middle, end };
        },
        genTile(item, disabled = null, avatar = false, value = this.hasItem(item)) {
            if (item === Object(item)) {
                avatar = this.getAvatar(item);
                disabled = disabled !== null
                    ? disabled
                    : this.getDisabled(item);
            }
            const tile = {
                on: {
                    mousedown: e => {
                        // Prevent onBlur from being called
                        e.preventDefault();
                    },
                    click: () => disabled || this.$emit('select', item)
                },
                props: {
                    activeClass: this.tileActiveClass,
                    avatar,
                    disabled,
                    ripple: true,
                    value
                }
            };
            if (!this.$scopedSlots.item) {
                return this.$createElement(VListTile, tile, [
                    this.action && !this.hideSelected && this.items.length > 0
                        ? this.genAction(item, value)
                        : null,
                    this.genTileContent(item)
                ]);
            }
            const parent = this;
            const scopedSlot = this.$scopedSlots.item({ parent, item, tile });
            return this.needsTile(scopedSlot)
                ? this.$createElement(VListTile, tile, [scopedSlot])
                : scopedSlot;
        },
        genTileContent(item) {
            const innerHTML = this.genFilteredText(this.getText(item));
            return this.$createElement(VListTileContent, [this.$createElement(VListTileTitle, {
                    domProps: { innerHTML }
                })]);
        },
        hasItem(item) {
            return this.parsedItems.indexOf(this.getValue(item)) > -1;
        },
        needsTile(tile) {
            return tile.componentOptions == null ||
                tile.componentOptions.Ctor.options.name !== 'v-list-tile';
        },
        getAvatar(item) {
            return Boolean(getPropertyFromItem(item, this.itemAvatar, false));
        },
        getDisabled(item) {
            return Boolean(getPropertyFromItem(item, this.itemDisabled, false));
        },
        getText(item) {
            return String(getPropertyFromItem(item, this.itemText, item));
        },
        getValue(item) {
            return getPropertyFromItem(item, this.itemValue, this.getText(item));
        }
    },
    render() {
        const children = [];
        for (const item of this.items) {
            if (this.hideSelected &&
                this.hasItem(item))
                continue;
            if (item == null)
                children.push(this.genTile(item));
            else if (item.header)
                children.push(this.genHeader(item));
            else if (item.divider)
                children.push(this.genDivider(item));
            else
                children.push(this.genTile(item));
        }
        children.length || children.push(this.$slots['no-data'] || this.staticNoDataTile);
        this.$slots['prepend-item'] && children.unshift(this.$slots['prepend-item']);
        this.$slots['append-item'] && children.push(this.$slots['append-item']);
        return this.$createElement('div', {
            staticClass: 'v-select-list v-card',
            'class': this.themeClasses
        }, [
            this.$createElement(VList, {
                props: {
                    dense: this.dense
                }
            }, children)
        ]);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlNlbGVjdExpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WU2VsZWN0L1ZTZWxlY3RMaXN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8scUNBQXFDLENBQUE7QUFFNUMsYUFBYTtBQUNiLE9BQU8sU0FBUyxNQUFNLGNBQWMsQ0FBQTtBQUNwQyxPQUFPLFFBQVEsTUFBTSxhQUFhLENBQUE7QUFDbEMsT0FBTyxVQUFVLE1BQU0sZUFBZSxDQUFBO0FBQ3RDLE9BQU8sRUFDTCxLQUFLLEVBQ0wsU0FBUyxFQUNULGVBQWUsRUFDZixnQkFBZ0IsRUFDaEIsY0FBYyxFQUNmLE1BQU0sVUFBVSxDQUFBO0FBRWpCLFNBQVM7QUFDVCxPQUFPLFNBQVMsTUFBTSx3QkFBd0IsQ0FBQTtBQUM5QyxPQUFPLFNBQVMsTUFBTSx3QkFBd0IsQ0FBQTtBQUU5QyxVQUFVO0FBQ1YsT0FBTyxFQUNMLFVBQVUsRUFDVixtQkFBbUIsRUFDcEIsTUFBTSxvQkFBb0IsQ0FBQTtBQUUzQixvQkFBb0I7QUFDcEIsZUFBZTtJQUNiLElBQUksRUFBRSxlQUFlO0lBRXJCLE1BQU0sRUFBRTtRQUNOLFNBQVM7UUFDVCxTQUFTO0tBQ1Y7SUFFRCxLQUFLLEVBQUU7UUFDTCxNQUFNLEVBQUUsT0FBTztRQUNmLEtBQUssRUFBRSxPQUFPO1FBQ2QsWUFBWSxFQUFFLE9BQU87UUFDckIsS0FBSyxFQUFFO1lBQ0wsSUFBSSxFQUFFLEtBQUs7WUFDWCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRTtTQUNsQjtRQUNELFVBQVUsRUFBRTtZQUNWLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDO1lBQy9CLE9BQU8sRUFBRSxRQUFRO1NBQ2xCO1FBQ0QsWUFBWSxFQUFFO1lBQ1osSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUM7WUFDL0IsT0FBTyxFQUFFLFVB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QTtRQUVqRixJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFBO1FBRTVFLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUE7UUFFdkUsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRTtZQUNoQyxXQUFXLEVBQUUsc0JBQXNCO1lBQ25DLE9BQU8sRUFBRSxJQUFJLENBQUMsWUFBWTtTQUMzQixFQUFFO1lBQ0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUU7Z0JBQ3pCLEtBQUssRUFBRTtvQkFDTCxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7aUJBQ2xCO2FBQ0YsRUFBRSxRQUFRLENBQUM7U0FDYixDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0YsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnLi4vLi4vc3R5bHVzL2NvbXBvbmVudHMvX2NhcmRzLnN0eWwnXG5cbi8vIENvbXBvbmVudHNcbmltcG9ydCBWQ2hlY2tib3ggZnJvbSAnLi4vVkNoZWNrYm94J1xuaW1wb3J0IFZEaXZpZGVyIGZyb20gJy4uL1ZEaXZpZGVyJ1xuaW1wb3J0IFZTdWJoZWFkZXIgZnJvbSAnLi4vVlN1YmhlYWRlcidcbmltcG9ydCB7XG4gIFZMaXN0LFxuICBWTGlzdFRpbGUsXG4gIFZMaXN0VGlsZUFjdGlvbixcbiAgVkxpc3RUaWxlQ29udGVudCxcbiAgVkxpc3RUaWxlVGl0bGVcbn0gZnJvbSAnLi4vVkxpc3QnXG5cbi8vIE1peGluc1xuaW1wb3J0IENvbG9yYWJsZSBmcm9tICcuLi8uLi9taXhpbnMvY29sb3JhYmxlJ1xuaW1wb3J0IFRoZW1lYWJsZSBmcm9tICcuLi8uLi9taXhpbnMvdGhlbWVhYmxlJ1xuXG4vLyBIZWxwZXJzXG5pbXBvcnQge1xuICBlc2NhcGVIVE1MLFxuICBnZXRQcm9wZXJ0eUZyb21JdGVtXG59IGZyb20gJy4uLy4uL3V0aWwvaGVscGVycydcblxuLyogQHZ1ZS9jb21wb25lbnQgKi9cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3Ytc2VsZWN0LWxpc3QnLFxuXG4gIG1peGluczogW1xuICAgIENvbG9yYWJsZSxcbiAgICBUaGVtZWFibGVcbiAgXSxcblxuICBwcm9wczoge1xuICAgIGFjdGlvbjogQm9vbGVhbixcbiAgICBkZW5zZTogQm9vbGVhbixcbiAgICBoaWRlU2VsZWN0ZWQ6IEJvb2xlYW4sXG4gICAgaXRlbXM6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdDogKCkgPT4gW11cbiAgICB9LFxuICAgIGl0ZW1BdmF0YXI6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIEFycmF5LCBGdW5jdGlvbl0sXG4gICAgICBkZWZhdWx0OiAnYXZhdGFyJ1xuICAgIH0sXG4gICAgaXRlbURpc2FibGVkOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBBcnJheSwgRnVuY3Rpb25dLFxuICAgICAgZGVmYXVsdDogJ2Rpc2FibGVkJ1xuICAgIH0sXG4gICAgaXRlbVRleHQ6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIEFycmF5LCBGdW5jdGlvbl0sXG4gICAgICBkZWZhdWx0OiAndGV4dCdcbiAgICB9LFxuICAgIGl0ZW1WYWx1ZToge1xuICAgICAgdHlwZTogW1N0cmluZywgQXJyYXksIEZ1bmN0aW9uXSxcbiAgICAgIGRlZmF1bHQ6ICd2YWx1ZSdcbiAgICB9LFxuICAgIG5vRGF0YVRleHQ6IFN0cmluZyxcbiAgICBub0ZpbHRlcjogQm9vbGVhbixcbiAgICBzZWFyY2hJbnB1dDoge1xuICAgICAgZGVmYXVsdDogbnVsbFxuICAgIH0sXG4gICAgc2VsZWN0ZWRJdGVtczoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICBkZWZhdWx0OiAoKSA9PiBbXVxuICAgIH1cbiAgfSxcblxuICBjb21wdXRlZDoge1xuICAgIHBhcnNlZEl0ZW1zICgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkSXRlbXMubWFwKGl0ZW0gPT4gdGhpcy5nZXRWYWx1ZShpdGVtKSlcbiAgICB9LFxuICAgIHRpbGVBY3RpdmVDbGFzcyAoKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5zZXRUZXh0Q29sb3IodGhpcy5jb2xvcikuY2xhc3MgfHwge30pLmpvaW4oJyAnKVxuICAgIH0sXG4gICAgc3RhdGljTm9EYXRhVGlsZSAoKSB7XG4gICAgICBjb25zdCB0aWxlID0ge1xuICAgICAgICBvbjoge1xuICAgICAgICAgIG1vdXNlZG93bjogZSA9PiBlLnByZXZlbnREZWZhdWx0KCkgLy8gUHJldmVudCBvbkJsdXIgZnJvbSBiZWluZyBjYWxsZWRcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudChWTGlzdFRpbGUsIHRpbGUsIFtcbiAgICAgICAgdGhpcy5nZW5UaWxlQ29udGVudCh0aGlzLm5vRGF0YVRleHQpXG4gICAgICBdKVxuICAgIH1cbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgZ2VuQWN0aW9uIChpdGVtLCBpbnB1dFZhbHVlKSB7XG4gICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICBvbjoge1xuICAgICAgICAgIGNsaWNrOiBlID0+IHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3NlbGVjdCcsIGl0ZW0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KFZMaXN0VGlsZUFjdGlvbiwgZGF0YSwgW1xuICAgICAgICB0aGlzLiRjcmVhdGVFbGVtZW50KFZDaGVja2JveCwge1xuICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBjb2xvcjogdGhpcy5jb2xvcixcbiAgICAgICAgICAgIGlucHV0VmFsdWVcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICBdKVxuICAgIH0sXG4gICAgZ2VuRGl2aWRlciAocHJvcHMpIHtcbiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KFZEaXZpZGVyLCB7IHByb3BzIH0pXG4gICAgfSxcbiAgICBnZW5GaWx0ZXJlZFRleHQgKHRleHQpIHtcbiAgICAgIHRleHQgPSAodGV4dCB8fCAnJykudG9TdHJpbmcoKVxuXG4gICAgICBpZiAoIXRoaXMuc2VhcmNoSW5wdXQgfHwgdGhpcy5ub0ZpbHRlcikgcmV0dXJuIGVzY2FwZUhUTUwodGV4dClcblxuICAgICAgY29uc3QgeyBzdGFydCwgbWlkZGxlLCBlbmQgfSA9IHRoaXMuZ2V0TWFza2VkQ2hhcmFjdGVycyh0ZXh0KVxuXG4gICAgICByZXR1cm4gYCR7ZXNjYXBlSFRNTChzdGFydCl9JHt0aGlzLmdlbkhpZ2hsaWdodChtaWRkbGUpfSR7ZXNjYXBlSFRNTChlbmQpfWBcbiAgICB9LFxuICAgIGdlbkhlYWRlciAocHJvcHMpIHtcbiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KFZTdWJoZWFkZXIsIHsgcHJvcHMgfSwgcHJvcHMuaGVhZGVyKVxuICAgIH0sXG4gICAgZ2VuSGlnaGxpZ2h0ICh0ZXh0KSB7XG4gICAgICByZXR1cm4gYDxzcGFuIGNsYXNzPVwidi1saXN0X190aWxlX19tYXNrXCI+JHtlc2NhcGVIVE1MKHRleHQpfTwvc3Bhbj5gXG4gICAgfSxcbiAgICBnZXRNYXNrZWRDaGFyYWN0ZXJzICh0ZXh0KSB7XG4gICAgICBjb25zdCBzZWFyY2hJbnB1dCA9ICh0aGlzLnNlYXJjaElucHV0IHx8ICcnKS50b1N0cmluZygpLnRvTG93ZXJDYXNlKClcbiAgICAgIGNvbnN0IGluZGV4ID0gdGV4dC50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc2VhcmNoSW5wdXQpXG5cbiAgICAgIGlmIChpbmRleCA8IDApIHJldHVybiB7IHN0YXJ0OiAnJywgbWlkZGxlOiB0ZXh0LCBlbmQ6ICcnIH1cblxuICAgICAgY29uc3Qgc3RhcnQgPSB0ZXh0LnNsaWNlKDAsIGluZGV4KVxuICAgICAgY29uc3QgbWlkZGxlID0gdGV4dC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2hJbnB1dC5sZW5ndGgpXG4gICAgICBjb25zdCBlbmQgPSB0ZXh0LnNsaWNlKGluZGV4ICsgc2VhcmNoSW5wdXQubGVuZ3RoKVxuICAgICAgcmV0dXJuIHsgc3RhcnQsIG1pZGRsZSwgZW5kIH1cbiAgICB9LFxuICAgIGdlblRpbGUgKFxuICAgICAgaXRlbSxcbiAgICAgIGRpc2FibGVkID0gbnVsbCxcbiAgICAgIGF2YXRhciA9IGZhbHNlLFxuICAgICAgdmFsdWUgPSB0aGlzLmhhc0l0ZW0oaXRlbSlcbiAgICApIHtcbiAgICAgIGlmIChpdGVtID09PSBPYmplY3QoaXRlbSkpIHtcbiAgICAgICAgYXZhdGFyID0gdGhpcy5nZXRBdmF0YXIoaXRlbSlcbiAgICAgICAgZGlzYWJsZWQgPSBkaXNhYmxlZCAhPT0gbnVsbFxuICAgICAgICAgID8gZGlzYWJsZWRcbiAgICAgICAgICA6IHRoaXMuZ2V0RGlzYWJsZWQoaXRlbSlcbiAgICAgIH1cblxuICAgICAgY29uc3QgdGlsZSA9IHtcbiAgICAgICAgb246IHtcbiAgICAgICAgICBtb3VzZWRvd246IGUgPT4ge1xuICAgICAgICAgICAgLy8gUHJldmVudCBvbkJsdXIgZnJvbSBiZWluZyBjYWxsZWRcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY2xpY2s6ICgpID0+IGRpc2FibGVkIHx8IHRoaXMuJGVtaXQoJ3NlbGVjdCcsIGl0ZW0pXG4gICAgICAgIH0sXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgYWN0aXZlQ2xhc3M6IHRoaXMudGlsZUFjdGl2ZUNsYXNzLFxuICAgICAgICAgIGF2YXRhcixcbiAgICAgICAgICBkaXNhYmxlZCxcbiAgICAgICAgICByaXBwbGU6IHRydWUsXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuJHNjb3BlZFNsb3RzLml0ZW0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoVkxpc3RUaWxlLCB0aWxlLCBbXG4gICAgICAgICAgdGhpcy5hY3Rpb24gJiYgIXRoaXMuaGlkZVNlbGVjdGVkICYmIHRoaXMuaXRlbXMubGVuZ3RoID4gMFxuICAgICAgICAgICAgPyB0aGlzLmdlbkFjdGlvbihpdGVtLCB2YWx1ZSlcbiAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgICB0aGlzLmdlblRpbGVDb250ZW50KGl0ZW0pXG4gICAgICAgIF0pXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXNcbiAgICAgIGNvbnN0IHNjb3BlZFNsb3QgPSB0aGlzLiRzY29wZWRTbG90cy5pdGVtKHsgcGFyZW50LCBpdGVtLCB0aWxlIH0pXG5cbiAgICAgIHJldHVybiB0aGlzLm5lZWRzVGlsZShzY29wZWRTbG90KVxuICAgICAgICA/IHRoaXMuJGNyZWF0ZUVsZW1lbnQoVkxpc3RUaWxlLCB0aWxlLCBbc2NvcGVkU2xvdF0pXG4gICAgICAgIDogc2NvcGVkU2xvdFxuICAgIH0sXG4gICAgZ2VuVGlsZUNvbnRlbnQgKGl0ZW0pIHtcbiAgICAgIGNvbnN0IGlubmVySFRNTCA9IHRoaXMuZ2VuRmlsdGVyZWRUZXh0KHRoaXMuZ2V0VGV4dChpdGVtKSlcblxuICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoVkxpc3RUaWxlQ29udGVudCxcbiAgICAgICAgW3RoaXMuJGNyZWF0ZUVsZW1lbnQoVkxpc3RUaWxlVGl0bGUsIHtcbiAgICAgICAgICBkb21Qcm9wczogeyBpbm5lckhUTUwgfVxuICAgICAgICB9KV1cbiAgICAgIClcbiAgICB9LFxuICAgIGhhc0l0ZW0gKGl0ZW0pIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlZEl0ZW1zLmluZGV4T2YodGhpcy5nZXRWYWx1ZShpdGVtKSkgPiAtMVxuICAgIH0sXG4gICAgbmVlZHNUaWxlICh0aWxlKSB7XG4gICAgICByZXR1cm4gdGlsZS5jb21wb25lbnRPcHRpb25zID09IG51bGwgfHxcbiAgICAgICAgdGlsZS5jb21wb25lbnRPcHRpb25zLkN0b3Iub3B0aW9ucy5uYW1lICE9PSAndi1saXN0LXRpbGUnXG4gICAgfSxcbiAgICBnZXRBdmF0YXIgKGl0ZW0pIHtcbiAgICAgIHJldHVybiBCb29sZWFuKGdldFByb3BlcnR5RnJvbUl0ZW0oaXRlbSwgdGhpcy5pdGVtQXZhdGFyLCBmYWxzZSkpXG4gICAgfSxcbiAgICBnZXREaXNhYmxlZCAoaXRlbSkge1xuICAgICAgcmV0dXJuIEJvb2xlYW4oZ2V0UHJvcGVydHlGcm9tSXRlbShpdGVtLCB0aGlzLml0ZW1EaXNhYmxlZCwgZmFsc2UpKVxuICAgIH0sXG4gICAgZ2V0VGV4dCAoaXRlbSkge1xuICAgICAgcmV0dXJuIFN0cmluZyhnZXRQcm9wZXJ0eUZyb21JdGVtKGl0ZW0sIHRoaXMuaXRlbVRleHQsIGl0ZW0pKVxuICAgIH0sXG4gICAgZ2V0VmFsdWUgKGl0ZW0pIHtcbiAgICAgIHJldHVybiBnZXRQcm9wZXJ0eUZyb21JdGVtKGl0ZW0sIHRoaXMuaXRlbVZhbHVlLCB0aGlzLmdldFRleHQoaXRlbSkpXG4gICAgfVxuICB9LFxuXG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSBbXVxuICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLml0ZW1zKSB7XG4gICAgICBpZiAodGhpcy5oaWRlU2VsZWN0ZWQgJiZcbiAgICAgICAgdGhpcy5oYXNJdGVtKGl0ZW0pXG4gICAgICApIGNvbnRpbnVlXG5cbiAgICAgIGlmIChpdGVtID09IG51bGwpIGNoaWxkcmVuLnB1c2godGhpcy5nZW5UaWxlKGl0ZW0pKVxuICAgICAgZWxzZSBpZiAoaXRlbS5oZWFkZXIpIGNoaWxkcmVuLnB1c2godGhpcy5nZW5IZWFkZXIoaXRlbSkpXG4gICAgICBlbHNlIGlmIChpdGVtLmRpdmlkZXIpIGNoaWxkcmVuLnB1c2godGhpcy5nZW5EaXZpZGVyKGl0ZW0pKVxuICAgICAgZWxzZSBjaGlsZHJlbi5wdXNoKHRoaXMuZ2VuVGlsZShpdGVtKSlcbiAgICB9XG5cbiAgICBjaGlsZHJlbi5sZW5ndGggfHwgY2hpbGRyZW4ucHVzaCh0aGlzLiRzbG90c1snbm8tZGF0YSddIHx8IHRoaXMuc3RhdGljTm9EYXRhVGlsZSlcblxuICAgIHRoaXMuJHNsb3RzWydwcmVwZW5kLWl0ZW0nXSAmJiBjaGlsZHJlbi51bnNoaWZ0KHRoaXMuJHNsb3RzWydwcmVwZW5kLWl0ZW0nXSlcblxuICAgIHRoaXMuJHNsb3RzWydhcHBlbmQtaXRlbSddICYmIGNoaWxkcmVuLnB1c2godGhpcy4kc2xvdHNbJ2FwcGVuZC1pdGVtJ10pXG5cbiAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgc3RhdGljQ2xhc3M6ICd2LXNlbGVjdC1saXN0IHYtY2FyZCcsXG4gICAgICAnY2xhc3MnOiB0aGlzLnRoZW1lQ2xhc3Nlc1xuICAgIH0sIFtcbiAgICAgIHRoaXMuJGNyZWF0ZUVsZW1lbnQoVkxpc3QsIHtcbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICBkZW5zZTogdGhpcy5kZW5zZVxuICAgICAgICB9XG4gICAgICB9LCBjaGlsZHJlbilcbiAgICBdKVxuICB9XG59XG4iXX0=