// Mixins
import Delayable from '../../mixins/delayable';
import Toggleable from '../../mixins/toggleable';
// Utilities
import mixins from '../../util/mixins';
import { consoleWarn } from '../../util/console';
export default mixins(Delayable, Toggleable
/* @vue/component */
).extend({
    name: 'v-hover',
    props: {
        disabled: {
            type: Boolean,
            default: false
        },
        value: {
            type: Boolean,
            default: undefined
        }
    },
    methods: {
        onMouseEnter() {
            this.runDelay('open', () => {
                this.isActive = true;
            });
        },
        onMouseLeave() {
            this.runDelay('close', () => {
                this.isActive = false;
            });
        }
    },
    render() {
        if (!this.$scopedSlots.default && this.value === undefined) {
            consoleWarn('v-hover is missing a default scopedSlot or bound value', this);
            return null;
        }
        let element;
        if (this.$scopedSlots.default) {
            element = this.$scopedSlots.default({ hover: this.isActive });
        }
        else if (this.$slots.default.length === 1) {
            element = this.$slots.default[0];
        }
        if (!element || typeof element === 'string' || Array.isArray(element)) {
            consoleWarn('v-hover should only contain a single element', this);
            return element;
        }
        if (!this.disabled) {
            this._g(element.data, {
                mouseenter: this.onMouseEnter,
                mouseleave: this.onMouseLeave
            });
        }
        return element;
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkhvdmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVkhvdmVyL1ZIb3Zlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTO0FBQ1QsT0FBTyxTQUFTLE1BQU0sd0JBQXdCLENBQUE7QUFDOUMsT0FBTyxVQUFVLE1BQU0seUJBQXlCLENBQUE7QUFFaEQsWUFBWTtBQUNaLE9BQU8sTUFBTSxNQUFNLG1CQUFtQixDQUFBO0FBQ3RDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUtoRCxlQUFlLE1BQU0sQ0FDbkIsU0FBUyxFQUNULFVBQVU7QUFDVixvQkFBb0I7Q0FDckIsQ0FBQyxNQUFNLENBQUM7SUFDUCxJQUFJLEVBQUUsU0FBUztJQUVmLEtBQUssRUFBRTtRQUNMLFFBQVEsRUFBRTtZQUNSLElBQUksRUFBRSxPQUFPO1lBQ2IsT0FBTyxFQUFFLEtBQUs7U0FDZjtRQUNELEtBQUssRUFBRTtZQUNMLElBQUksRUFBRSxPQUFPO1lBQ2IsT0FBTyxFQUFFLFNBQVM7U0FDbkI7S0FDRjtJQUVELE9BQU8sRUFBRTtRQUNQLFlBQVk7WUFDVixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7Z0JBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFBO1lBQ3RCLENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQztRQUNELFlBQVk7WUFDVixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7Z0JBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFBO1lBQ3ZCLENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQztLQUNGO0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUMxRCxXQUFXLENBQUMsd0RBQXdELEVBQUUsSUFBSSxDQUFDLENBQUE7WUFFM0UsT0FBTyxJQUFXLENBQUE7U0FDbkI7UUFFRCxJQUFJLE9BQWdFLENBQUE7UUFFcEUsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRTtZQUM3QixPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7U0FDOUQ7YUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDM0MsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQ2pDO1FBRUQsSUFBSSxDQUFDLE9BQU8sSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNyRSxXQUFXLENBQUMsOENBQThDLEVBQUUsSUFBSSxDQUFDLENBQUE7WUFFakUsT0FBTyxPQUFjLENBQUE7U0FDdEI7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFLLEVBQUU7Z0JBQ3JCLFVBQVUsRUFBRSxJQUFJLENBQUMsWUFBWTtnQkFDN0IsVUFBVSxFQUFFLElBQUksQ0FBQyxZQUFZO2FBQzlCLENBQUMsQ0FBQTtTQUNIO1FBRUQsT0FBTyxPQUFPLENBQUE7SUFDaEIsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIE1peGluc1xuaW1wb3J0IERlbGF5YWJsZSBmcm9tICcuLi8uLi9taXhpbnMvZGVsYXlhYmxlJ1xuaW1wb3J0IFRvZ2dsZWFibGUgZnJvbSAnLi4vLi4vbWl4aW5zL3RvZ2dsZWFibGUnXG5cbi8vIFV0aWxpdGllc1xuaW1wb3J0IG1peGlucyBmcm9tICcuLi8uLi91dGlsL21peGlucydcbmltcG9ydCB7IGNvbnNvbGVXYXJuIH0gZnJvbSAnLi4vLi4vdXRpbC9jb25zb2xlJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUsIFZOb2RlQ2hpbGRyZW5BcnJheUNvbnRlbnRzIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgZGVmYXVsdCBtaXhpbnMoXG4gIERlbGF5YWJsZSxcbiAgVG9nZ2xlYWJsZVxuICAvKiBAdnVlL2NvbXBvbmVudCAqL1xuKS5leHRlbmQoe1xuICBuYW1lOiAndi1ob3ZlcicsXG5cbiAgcHJvcHM6IHtcbiAgICBkaXNhYmxlZDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICB2YWx1ZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH1cbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgb25Nb3VzZUVudGVyICgpIHtcbiAgICAgIHRoaXMucnVuRGVsYXkoJ29wZW4nLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuaXNBY3RpdmUgPSB0cnVlXG4gICAgICB9KVxuICAgIH0sXG4gICAgb25Nb3VzZUxlYXZlICgpIHtcbiAgICAgIHRoaXMucnVuRGVsYXkoJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2VcbiAgICAgIH0pXG4gICAgfVxuICB9LFxuXG4gIHJlbmRlciAoKTogVk5vZGUge1xuICAgIGlmICghdGhpcy4kc2NvcGVkU2xvdHMuZGVmYXVsdCAmJiB0aGlzLnZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnNvbGVXYXJuKCd2LWhvdmVyIGlzIG1pc3NpbmcgYSBkZWZhdWx0IHNjb3BlZFNsb3Qgb3IgYm91bmQgdmFsdWUnLCB0aGlzKVxuXG4gICAgICByZXR1cm4gbnVsbCBhcyBhbnlcbiAgICB9XG5cbiAgICBsZXQgZWxlbWVudDogVk5vZGUgfCBWTm9kZUNoaWxkcmVuQXJyYXlDb250ZW50cyB8IHN0cmluZyB8IHVuZGVmaW5lZFxuXG4gICAgaWYgKHRoaXMuJHNjb3BlZFNsb3RzLmRlZmF1bHQpIHtcbiAgICAgIGVsZW1lbnQgPSB0aGlzLiRzY29wZWRTbG90cy5kZWZhdWx0KHsgaG92ZXI6IHRoaXMuaXNBY3RpdmUgfSlcbiAgICB9IGVsc2UgaWYgKHRoaXMuJHNsb3RzLmRlZmF1bHQubGVuZ3RoID09PSAxKSB7XG4gICAgICBlbGVtZW50ID0gdGhpcy4kc2xvdHMuZGVmYXVsdFswXVxuICAgIH1cblxuICAgIGlmICghZWxlbWVudCB8fCB0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheShlbGVtZW50KSkge1xuICAgICAgY29uc29sZVdhcm4oJ3YtaG92ZXIgc2hvdWxkIG9ubHkgY29udGFpbiBhIHNpbmdsZSBlbGVtZW50JywgdGhpcylcblxuICAgICAgcmV0dXJuIGVsZW1lbnQgYXMgYW55XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLl9nKGVsZW1lbnQuZGF0YSEsIHtcbiAgICAgICAgbW91c2VlbnRlcjogdGhpcy5vbk1vdXNlRW50ZXIsXG4gICAgICAgIG1vdXNlbGVhdmU6IHRoaXMub25Nb3VzZUxlYXZlXG4gICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiBlbGVtZW50XG4gIH1cbn0pXG4iXX0=