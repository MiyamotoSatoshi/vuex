import * as easingPatterns from '../../../util/easing-patterns';
const defaults = {
    duration: 500,
    offset: 0,
    easing: 'easeInOutCubic'
};
function getDocumentHeight() {
    return Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight);
}
function getWindowHeight() {
    return window.innerHeight ||
        (document.documentElement || document.body).clientHeight;
}
function isVueComponent(obj) {
    return obj != null && obj._isVue;
}
function getTargetLocation(target, settings) {
    let location;
    if (isVueComponent(target)) {
        target = target.$el;
    }
    if (target instanceof Element) {
        location = target.getBoundingClientRect().top + window.pageYOffset;
    }
    else if (typeof target === 'string') {
        const targetEl = document.querySelector(target);
        if (!targetEl)
            throw new TypeError(`Target element "${target}" not found.`);
        location = targetEl.getBoundingClientRect().top + window.pageYOffset;
    }
    else if (typeof target === 'number') {
        location = target;
    }
    else {
        const type = target == null ? target : target.constructor.name;
        throw new TypeError(`Target must be a Selector/Number/DOMElement/VueComponent, received ${type} instead.`);
    }
    return Math.round(Math.min(Math.max(location + settings.offset, 0), getDocumentHeight() - getWindowHeight()));
}
export default function goTo(target, options) {
    return new Promise((resolve, reject) => {
        if (typeof window === 'undefined')
            return reject('Window is undefined');
        const settings = Object.assign({}, defaults, options);
        const startTime = performance.now();
        const startLocation = window.pageYOffset;
        const targetLocation = getTargetLocation(target, settings);
        const distanceToScroll = targetLocation - startLocation;
        const easingFunction = typeof settings.easing === 'function' ? settings.easing : easingPatterns[settings.easing];
        if (!easingFunction)
            throw new TypeError(`Easing function '${settings.easing}' not found.`);
        function step(currentTime) {
            const progressPercentage = Math.min(1, ((currentTime - startTime) / settings.duration));
            const targetPosition = Math.floor(startLocation + distanceToScroll * easingFunction(progressPercentage));
            window.scrollTo(0, targetPosition);
            if (Math.round(window.pageYOffset) === targetLocation ||
                progressPercentage === 1) {
                return resolve(target);
            }
            window.requestAnimationFrame(step);
        }
        window.requestAnimationFrame(step);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29Uby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1Z1ZXRpZnkvdXRpbC9nb1RvLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxjQUFjLE1BQU0sK0JBQStCLENBQUE7QUFFL0QsTUFBTSxRQUFRLEdBQUc7SUFDZixRQUFRLEVBQUUsR0FBRztJQUNiLE1BQU0sRUFBRSxDQUFDO0lBQ1QsTUFBTSxFQUFFLGdCQUFnQjtDQUN6QixDQUFBO0FBRUQsU0FBUyxpQkFBaUI7SUFDeEIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUNiLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUMxQixRQUFRLENBQUMsZUFBZSxDQUFDLFlBQVksRUFDckMsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQzFCLFFBQVEsQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUNyQyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksRUFDMUIsUUFBUSxDQUFDLGVBQWUsQ0FBQyxZQUFZLENBQ3RDLENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBUyxlQUFlO0lBQ3RCLE9BQU8sTUFBTSxDQUFDLFdBQVc7UUFDdkIsQ0FBQyxRQUFRLENBQUMsZUFBZSxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUE7QUFDNUQsQ0FBQztBQUVELFNBQVMsY0FBYyxDQUFFLEdBQUc7SUFDMUIsT0FBTyxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUE7QUFDbEMsQ0FBQztBQUVELFNBQVMsaUJBQWlCLENBQUUsTUFBTSxFQUFFLFFBQVE7SUFDMUMsSUFBSSxRQUFRLENBQUE7SUFFWixJQUFJLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUMxQixNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQTtLQUNwQjtJQUVELElBQUksTUFBTSxZQUFZLE9BQU8sRUFBRTtRQUM3QixRQUFRLEdBQUcsTUFB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Q0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNwQyxDQUFDO1FBRUQsTUFBTSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3BDLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGVhc2luZ1BhdHRlcm5zIGZyb20gJy4uLy4uLy4uL3V0aWwvZWFzaW5nLXBhdHRlcm5zJ1xuXG5jb25zdCBkZWZhdWx0cyA9IHtcbiAgZHVyYXRpb246IDUwMCxcbiAgb2Zmc2V0OiAwLFxuICBlYXNpbmc6ICdlYXNlSW5PdXRDdWJpYydcbn1cblxuZnVuY3Rpb24gZ2V0RG9jdW1lbnRIZWlnaHQgKCkge1xuICByZXR1cm4gTWF0aC5tYXgoXG4gICAgZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQsXG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCxcbiAgICBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodCxcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0LFxuICAgIGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0LFxuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHRcbiAgKVxufVxuXG5mdW5jdGlvbiBnZXRXaW5kb3dIZWlnaHQgKCkge1xuICByZXR1cm4gd2luZG93LmlubmVySGVpZ2h0IHx8XG4gICAgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fCBkb2N1bWVudC5ib2R5KS5jbGllbnRIZWlnaHRcbn1cblxuZnVuY3Rpb24gaXNWdWVDb21wb25lbnQgKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqLl9pc1Z1ZVxufVxuXG5mdW5jdGlvbiBnZXRUYXJnZXRMb2NhdGlvbiAodGFyZ2V0LCBzZXR0aW5ncykge1xuICBsZXQgbG9jYXRpb25cblxuICBpZiAoaXNWdWVDb21wb25lbnQodGFyZ2V0KSkge1xuICAgIHRhcmdldCA9IHRhcmdldC4kZWxcbiAgfVxuXG4gIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgbG9jYXRpb24gPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0XG4gIH0gZWxzZSBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCB0YXJnZXRFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KVxuICAgIGlmICghdGFyZ2V0RWwpIHRocm93IG5ldyBUeXBlRXJyb3IoYFRhcmdldCBlbGVtZW50IFwiJHt0YXJnZXR9XCIgbm90IGZvdW5kLmApXG4gICAgbG9jYXRpb24gPSB0YXJnZXRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXRcbiAgfSBlbHNlIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnbnVtYmVyJykge1xuICAgIGxvY2F0aW9uID0gdGFyZ2V0XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgdHlwZSA9IHRhcmdldCA9PSBudWxsID8gdGFyZ2V0IDogdGFyZ2V0LmNvbnN0cnVjdG9yLm5hbWVcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBUYXJnZXQgbXVzdCBiZSBhIFNlbGVjdG9yL051bWJlci9ET01FbGVtZW50L1Z1ZUNvbXBvbmVudCwgcmVjZWl2ZWQgJHt0eXBlfSBpbnN0ZWFkLmApXG4gIH1cblxuICByZXR1cm4gTWF0aC5yb3VuZChcbiAgICBNYXRoLm1pbihcbiAgICAgIE1hdGgubWF4KGxvY2F0aW9uICsgc2V0dGluZ3Mub2Zmc2V0LCAwKSxcbiAgICAgIGdldERvY3VtZW50SGVpZ2h0KCkgLSBnZXRXaW5kb3dIZWlnaHQoKVxuICAgIClcbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnb1RvICh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiByZWplY3QoJ1dpbmRvdyBpcyB1bmRlZmluZWQnKVxuXG4gICAgY29uc3Qgc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0cywgb3B0aW9ucylcbiAgICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKVxuICAgIGNvbnN0IHN0YXJ0TG9jYXRpb24gPSB3aW5kb3cucGFnZVlPZmZzZXRcbiAgICBjb25zdCB0YXJnZXRMb2NhdGlvbiA9IGdldFRhcmdldExvY2F0aW9uKHRhcmdldCwgc2V0dGluZ3MpXG4gICAgY29uc3QgZGlzdGFuY2VUb1Njcm9sbCA9IHRhcmdldExvY2F0aW9uIC0gc3RhcnRMb2NhdGlvblxuICAgIGNvbnN0IGVhc2luZ0Z1bmN0aW9uID0gdHlwZW9mIHNldHRpbmdzLmVhc2luZyA9PT0gJ2Z1bmN0aW9uJyA/IHNldHRpbmdzLmVhc2luZyA6IGVhc2luZ1BhdHRlcm5zW3NldHRpbmdzLmVhc2luZ11cblxuICAgIGlmICghZWFzaW5nRnVuY3Rpb24pIHRocm93IG5ldyBUeXBlRXJyb3IoYEVhc2luZyBmdW5jdGlvbiAnJHtzZXR0aW5ncy5lYXNpbmd9JyBub3QgZm91bmQuYClcblxuICAgIGZ1bmN0aW9uIHN0ZXAgKGN1cnJlbnRUaW1lKSB7XG4gICAgICBjb25zdCBwcm9ncmVzc1BlcmNlbnRhZ2UgPSBNYXRoLm1pbigxLCAoKGN1cnJlbnRUaW1lIC0gc3RhcnRUaW1lKSAvIHNldHRpbmdzLmR1cmF0aW9uKSlcbiAgICAgIGNvbnN0IHRhcmdldFBvc2l0aW9uID0gTWF0aC5mbG9vcihzdGFydExvY2F0aW9uICsgZGlzdGFuY2VUb1Njcm9sbCAqIGVhc2luZ0Z1bmN0aW9uKHByb2dyZXNzUGVyY2VudGFnZSkpXG5cbiAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCB0YXJnZXRQb3NpdGlvbilcblxuICAgICAgaWYgKFxuICAgICAgICBNYXRoLnJvdW5kKHdpbmRvdy5wYWdlWU9mZnNldCkgPT09IHRhcmdldExvY2F0aW9uIHx8XG4gICAgICAgIHByb2dyZXNzUGVyY2VudGFnZSA9PT0gMVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKHRhcmdldClcbiAgICAgIH1cblxuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwKVxuICAgIH1cblxuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcClcbiAgfSlcbn1cbiJdfQ==