import en from '../../../locale/en';
import { getObjectValueByPath } from '../../../util/helpers';
import { consoleError, consoleWarn } from '../../../util/console';
const LANG_PREFIX = '$vuetify.';
const fallback = Symbol('Lang fallback');
function getTranslation(locale, key, usingFallback = false) {
    const shortKey = key.replace(LANG_PREFIX, '');
    let translation = getObjectValueByPath(locale, shortKey, fallback);
    if (translation === fallback) {
        if (usingFallback) {
            consoleError(`Translation key "${shortKey}" not found in fallback`);
            translation = key;
        }
        else {
            consoleWarn(`Translation key "${shortKey}" not found, falling back to default`);
            translation = getTranslation(en, key, true);
        }
    }
    return translation;
}
export default function lang(config = {}) {
    return {
        locales: Object.assign({ en }, config.locales),
        current: config.current || 'en',
        t(key, ...params) {
            if (!key.startsWith(LANG_PREFIX))
                return key;
            if (config.t)
                return config.t(key, ...params);
            const translation = getTranslation(this.locales[this.current], key);
            return translation.replace(/\{(\d+)\}/g, (match, index) => {
                return String(params[+index]);
            });
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1Z1ZXRpZnkvbWl4aW5zL2xhbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFDbkMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUE7QUFHNUQsT0FBTyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQUVqRSxNQUFNLFdBQVcsR0FBRyxXQUFXLENBQUE7QUFDL0IsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFBO0FBRXhDLFNBQVMsY0FBYyxDQUFFLE1BQXFCLEVBQUUsR0FBVyxFQUFFLGFBQWEsR0FBRyxLQUFLO0lBQ2hGLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQzdDLElBQUksV0FBVyxHQUFHLG9CQUFvQixDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUE2QixDQUFBO0lBRTlGLElBQUksV0FBVyxLQUFLLFFBQVEsRUFBRTtRQUM1QixJQUFJLGFBQWEsRUFBRTtZQUNqQixZQUFZLENBQUMsb0JBQW9CLFFBQVEseUJBQXlCLENBQUMsQ0FBQTtZQUNuRSxXQUFXLEdBQUcsR0FBRyxDQUFBO1NBQ2xCO2FBQU07WUFDTCxXQUFXLENBQUMsb0JBQW9CLFFBQVEsc0NBQXNDLENBQUMsQ0FBQTtZQUMvRSxXQUFXLEdBQUcsY0FBYyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUE7U0FDNUM7S0FDRjtJQUVELE9BQU8sV0FBVyxDQUFBO0FBQ3BCLENBQUM7QUFFRCxNQUFNLENBQUMsT0FBTyxVQUFVLElBQUksQ0FBRSxTQUEwQixFQUFFO0lBQ3hELE9BQU87UUFDTCxPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDOUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLElBQUksSUFBSTtRQUMvQixDQUFDLENBQUUsR0FBRyxFQUFFLEdBQUcsTUFBTTtZQUNmLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQztnQkFBRSxPQUFPLEdBQUcsQ0FBQTtZQUU1QyxJQUFJLE1BQU0sQ0FBQyxDQUFDO2dCQUFFLE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQTtZQUU3QyxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUE7WUFFbkUsT0FBTyxXQUFXLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDLEtBQWEsRUFBRSxLQUFhLEVBQUUsRUFBRTtnQkFDeEUsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtZQUMvQixDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUM7S0FDRixDQUFBO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBlbiBmcm9tICcuLi8uLi8uLi9sb2NhbGUvZW4nXG5pbXBvcnQgeyBnZXRPYmplY3RWYWx1ZUJ5UGF0aCB9IGZyb20gJy4uLy4uLy4uL3V0aWwvaGVscGVycydcbmltcG9ydCB7IFZ1ZXRpZnlVc2VPcHRpb25zIGFzIE9wdGlvbnMgfSBmcm9tICd0eXBlcydcbmltcG9ydCB7IFZ1ZXRpZnlMYW5ndWFnZSwgVnVldGlmeUxvY2FsZSB9IGZyb20gJ3R5cGVzL2xhbmcnXG5pbXBvcnQgeyBjb25zb2xlRXJyb3IsIGNvbnNvbGVXYXJuIH0gZnJvbSAnLi4vLi4vLi4vdXRpbC9jb25zb2xlJ1xuXG5jb25zdCBMQU5HX1BSRUZJWCA9ICckdnVldGlmeS4nXG5jb25zdCBmYWxsYmFjayA9IFN5bWJvbCgnTGFuZyBmYWxsYmFjaycpXG5cbmZ1bmN0aW9uIGdldFRyYW5zbGF0aW9uIChsb2NhbGU6IFZ1ZXRpZnlMb2NhbGUsIGtleTogc3RyaW5nLCB1c2luZ0ZhbGxiYWNrID0gZmFsc2UpOiBzdHJpbmcge1xuICBjb25zdCBzaG9ydEtleSA9IGtleS5yZXBsYWNlKExBTkdfUFJFRklYLCAnJylcbiAgbGV0IHRyYW5zbGF0aW9uID0gZ2V0T2JqZWN0VmFsdWVCeVBhdGgobG9jYWxlLCBzaG9ydEtleSwgZmFsbGJhY2spIGFzIHN0cmluZyB8IHR5cGVvZiBmYWxsYmFja1xuXG4gIGlmICh0cmFuc2xhdGlvbiA9PT0gZmFsbGJhY2spIHtcbiAgICBpZiAodXNpbmdGYWxsYmFjaykge1xuICAgICAgY29uc29sZUVycm9yKGBUcmFuc2xhdGlvbiBrZXkgXCIke3Nob3J0S2V5fVwiIG5vdCBmb3VuZCBpbiBmYWxsYmFja2ApXG4gICAgICB0cmFuc2xhdGlvbiA9IGtleVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlV2FybihgVHJhbnNsYXRpb24ga2V5IFwiJHtzaG9ydEtleX1cIiBub3QgZm91bmQsIGZhbGxpbmcgYmFjayB0byBkZWZhdWx0YClcbiAgICAgIHRyYW5zbGF0aW9uID0gZ2V0VHJhbnNsYXRpb24oZW4sIGtleSwgdHJ1ZSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJhbnNsYXRpb25cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGFuZyAoY29uZmlnOiBPcHRpb25zWydsYW5nJ10gPSB7fSk6IFZ1ZXRpZnlMYW5ndWFnZSB7XG4gIHJldHVybiB7XG4gICAgbG9jYWxlczogT2JqZWN0LmFzc2lnbih7IGVuIH0sIGNvbmZpZy5sb2NhbGVzKSxcbiAgICBjdXJyZW50OiBjb25maWcuY3VycmVudCB8fCAnZW4nLFxuICAgIHQgKGtleSwgLi4ucGFyYW1zKSB7XG4gICAgICBpZiAoIWtleS5zdGFydHNXaXRoKExBTkdfUFJFRklYKSkgcmV0dXJuIGtleVxuXG4gICAgICBpZiAoY29uZmlnLnQpIHJldHVybiBjb25maWcudChrZXksIC4uLnBhcmFtcylcblxuICAgICAgY29uc3QgdHJhbnNsYXRpb24gPSBnZXRUcmFuc2xhdGlvbih0aGlzLmxvY2FsZXNbdGhpcy5jdXJyZW50XSwga2V5KVxuXG4gICAgICByZXR1cm4gdHJhbnNsYXRpb24ucmVwbGFjZSgvXFx7KFxcZCspXFx9L2csIChtYXRjaDogc3RyaW5nLCBpbmRleDogc3RyaW5nKSA9PiB7XG4gICAgICAgIHJldHVybiBTdHJpbmcocGFyYW1zWytpbmRleF0pXG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuIl19