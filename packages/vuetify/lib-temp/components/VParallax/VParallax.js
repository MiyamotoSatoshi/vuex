// Style
import '../../stylus/components/_parallax.styl';
// Mixins
import Translatable from '../../mixins/translatable';
import mixins from '../../util/mixins';
/* @vue/component */
export default mixins(Translatable).extend({
    name: 'v-parallax',
    props: {
        alt: String,
        height: {
            type: [String, Number],
            default: 500
        },
        src: String
    },
    data: () => ({
        isBooted: false
    }),
    computed: {
        styles() {
            return {
                display: 'block',
                opacity: this.isBooted ? 1 : 0,
                transform: `translate(-50%, ${this.parallax}px)`
            };
        }
    },
    watch: {
        parallax() {
            this.isBooted = true;
        }
    },
    mounted() {
        this.init();
    },
    methods: {
        init() {
            const img = this.$refs.img;
            if (!img)
                return;
            if (img.complete) {
                this.translate();
                this.listeners();
            }
            else {
                img.addEventListener('load', () => {
                    this.translate();
                    this.listeners();
                }, false);
            }
        },
        objHeight() {
            return this.$refs.img.naturalHeight;
        }
    },
    render(h) {
        const imgData = {
            staticClass: 'v-parallax__image',
            style: this.styles,
            attrs: {
                src: this.src
            },
            ref: 'img'
        };
        if (this.alt)
            imgData.attrs.alt = this.alt;
        const container = h('div', {
            staticClass: 'v-parallax__image-container'
        }, [
            h('img', imgData)
        ]);
        const content = h('div', {
            staticClass: 'v-parallax__content'
        }, this.$slots.default);
        return h('div', {
            staticClass: 'v-parallax',
            style: {
                height: `${this.height}px`
            },
            on: this.$listeners
        }, [container, content]);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVlBhcmFsbGF4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVlBhcmFsbGF4L1ZQYXJhbGxheC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxRQUFRO0FBQ1IsT0FBTyx3Q0FBd0MsQ0FBQTtBQUUvQyxTQUFTO0FBQ1QsT0FBTyxZQUFZLE1BQU0sMkJBQTJCLENBQUE7QUFLcEQsT0FBTyxNQUFzQixNQUFNLG1CQUFtQixDQUFBO0FBUXRELG9CQUFvQjtBQUNwQixlQUFlLE1BQU0sQ0FBNEMsWUFBWSxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3BGLElBQUksRUFBRSxZQUFZO0lBRWxCLEtBQUssRUFBRTtRQUNMLEdBQUcsRUFBRSxNQUFNO1FBQ1gsTUFBTSxFQUFFO1lBQ04sSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztZQUN0QixPQUFPLEVBQUUsR0FBRztTQUNiO1FBQ0QsR0FBRyxFQUFFLE1BQU07S0FDWjtJQUVELElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ1gsUUFBUSxFQUFFLEtBQUs7S0FDaEIsQ0FBQztJQUVGLFFBQVEsRUFBRTtRQUNSLE1BQU07WUFDSixPQUFPO2dCQUNMLE9BQU8sRUFBRSxPQUFPO2dCQUNoQixPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM5QixTQUFTLEVBQUUsbUJBQW1CLElBQUksQ0FBQyxRQUFRLEtBQUs7YUFDakQsQ0FBQTtRQUNILENBQUM7S0FDRjtJQUVELEtBQUssRUFBRTtRQUNMLFFBQVE7WUFDTixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQTtRQUN0QixDQUFDO0tBQ0Y7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFBO0lBQ2IsQ0FBQztJQUVELE9BQU8sRUFBRTtRQUNQLElBQUk7WUFDRixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQTtZQUUxQixJQUFJLENBQUMsR0FBRztnQkFBRSxPQUFNO1lBRWhCLElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRTtnQkFDaEIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFBO2dCQUNoQixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUE7YUFDakI7aUJBQU07Z0JBQ0wsR0FBRyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7b0JBQ2hDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQTtvQkFDaEIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFBO2dCQUNsQixDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUE7YUFDVjtRQUNILENBQUM7UUFDRCxTQUFTO1lBQ1AsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUE7UUFDckMsQ0FBQztLQUNGO0lBRUQsTUFBTSxDQUFFLENBQUM7UUFDUCxNQUFNLE9BQU8sR0FBYztZQUN6QixXQUFXLEVBQUUsbUJBQW1CO1lBQ2hDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNsQixLQUFLLEVBQUU7Z0JBQ0wsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO2FBQ2Q7WUFDRCxHQUFHLEVBQUUsS0FBSztTQUNYLENBQUE7UUFFRCxJQUFJLElBQUksQ0FBQyxHQUFHO1lBQUUsT0FBTyxDQUFDLEtBQU0sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQTtRQUUzQyxNQUFNLFNBQVMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFO1lBQ3pCLFdBQVcsRUFBRSw2QkFBNkI7U0FDM0MsRUFBRTtZQUNELENBQUMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDO1NBQ2xCLENBQUMsQ0FBQTtRQUVGLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUU7WUFDdkIsV0FBVyxFQUFFLHFCQUFxQjtTQUNuQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFdkIsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFO1lBQ2QsV0FBVyxFQUFFLFlBQVk7WUFDekIsS0FBSyxFQUFFO2dCQUNMLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLElBQUk7YUFDM0I7WUFDRCxFQUFFLEVBQUUsSUFBSSxDQUFDLFVBQVU7U0FDcEIsRUFBRSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFBO0lBQzFCLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTdHlsZVxuaW1wb3J0ICcuLi8uLi9zdHlsdXMvY29tcG9uZW50cy9fcGFyYWxsYXguc3R5bCdcblxuLy8gTWl4aW5zXG5pbXBvcnQgVHJhbnNsYXRhYmxlIGZyb20gJy4uLy4uL21peGlucy90cmFuc2xhdGFibGUnXG5cbi8vIFR5cGVzXG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcbmltcG9ydCB7IFZOb2RlLCBWTm9kZURhdGEgfSBmcm9tICd2dWUvdHlwZXMvdm5vZGUnXG5pbXBvcnQgbWl4aW5zLCB7IEV4dHJhY3RWdWUgfSBmcm9tICcuLi8uLi91dGlsL21peGlucydcblxuaW50ZXJmYWNlIG9wdGlvbnMgZXh0ZW5kcyBWdWUge1xuICAkcmVmczoge1xuICAgIGltZzogSFRNTEltYWdlRWxlbWVudFxuICB9XG59XG5cbi8qIEB2dWUvY29tcG9uZW50ICovXG5leHBvcnQgZGVmYXVsdCBtaXhpbnM8b3B0aW9ucyAmIEV4dHJhY3RWdWU8dHlwZW9mIFRyYW5zbGF0YWJsZT4+KFRyYW5zbGF0YWJsZSkuZXh0ZW5kKHtcbiAgbmFtZTogJ3YtcGFyYWxsYXgnLFxuXG4gIHByb3BzOiB7XG4gICAgYWx0OiBTdHJpbmcsXG4gICAgaGVpZ2h0OiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogNTAwXG4gICAgfSxcbiAgICBzcmM6IFN0cmluZ1xuICB9LFxuXG4gIGRhdGE6ICgpID0+ICh7XG4gICAgaXNCb290ZWQ6IGZhbHNlXG4gIH0pLFxuXG4gIGNvbXB1dGVkOiB7XG4gICAgc3R5bGVzICgpOiBvYmplY3Qge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgb3BhY2l0eTogdGhpcy5pc0Jvb3RlZCA/IDEgOiAwLFxuICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoLTUwJSwgJHt0aGlzLnBhcmFsbGF4fXB4KWBcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgd2F0Y2g6IHtcbiAgICBwYXJhbGxheCAoKSB7XG4gICAgICB0aGlzLmlzQm9vdGVkID0gdHJ1ZVxuICAgIH1cbiAgfSxcblxuICBtb3VudGVkICgpIHtcbiAgICB0aGlzLmluaXQoKVxuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBpbml0ICgpIHtcbiAgICAgIGNvbnN0IGltZyA9IHRoaXMuJHJlZnMuaW1nXG5cbiAgICAgIGlmICghaW1nKSByZXR1cm5cblxuICAgICAgaWYgKGltZy5jb21wbGV0ZSkge1xuICAgICAgICB0aGlzLnRyYW5zbGF0ZSgpXG4gICAgICAgIHRoaXMubGlzdGVuZXJzKClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGltZy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICAgICAgIHRoaXMudHJhbnNsYXRlKClcbiAgICAgICAgICB0aGlzLmxpc3RlbmVycygpXG4gICAgICAgIH0sIGZhbHNlKVxuICAgICAgfVxuICAgIH0sXG4gICAgb2JqSGVpZ2h0ICgpIHtcbiAgICAgIHJldHVybiB0aGlzLiRyZWZzLmltZy5uYXR1cmFsSGVpZ2h0XG4gICAgfVxuICB9LFxuXG4gIHJlbmRlciAoaCk6IFZOb2RlIHtcbiAgICBjb25zdCBpbWdEYXRhOiBWTm9kZURhdGEgPSB7XG4gICAgICBzdGF0aWNDbGFzczogJ3YtcGFyYWxsYXhfX2ltYWdlJyxcbiAgICAgIHN0eWxlOiB0aGlzLnN0eWxlcyxcbiAgICAgIGF0dHJzOiB7XG4gICAgICAgIHNyYzogdGhpcy5zcmNcbiAgICAgIH0sXG4gICAgICByZWY6ICdpbWcnXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYWx0KSBpbWdEYXRhLmF0dHJzIS5hbHQgPSB0aGlzLmFsdFxuXG4gICAgY29uc3QgY29udGFpbmVyID0gaCgnZGl2Jywge1xuICAgICAgc3RhdGljQ2xhc3M6ICd2LXBhcmFsbGF4X19pbWFnZS1jb250YWluZXInXG4gICAgfSwgW1xuICAgICAgaCgnaW1nJywgaW1nRGF0YSlcbiAgICBdKVxuXG4gICAgY29uc3QgY29udGVudCA9IGgoJ2RpdicsIHtcbiAgICAgIHN0YXRpY0NsYXNzOiAndi1wYXJhbGxheF9fY29udGVudCdcbiAgICB9LCB0aGlzLiRzbG90cy5kZWZhdWx0KVxuXG4gICAgcmV0dXJuIGgoJ2RpdicsIHtcbiAgICAgIHN0YXRpY0NsYXNzOiAndi1wYXJhbGxheCcsXG4gICAgICBzdHlsZToge1xuICAgICAgICBoZWlnaHQ6IGAke3RoaXMuaGVpZ2h0fXB4YFxuICAgICAgfSxcbiAgICAgIG9uOiB0aGlzLiRsaXN0ZW5lcnNcbiAgICB9LCBbY29udGFpbmVyLCBjb250ZW50XSlcbiAgfVxufSlcbiJdfQ==