{
  "props": {
    "active": "Controls the **active** state of the item. This is typically used to highlight the component",
    "activeClass": "The class applied to the component when it is in an active state",
    "appendIcon": "Creates a [v-icon](/api/v-icon/) component after default content in the **append** slot",
    "attach": "Specifies which DOM element that this component should detach to. String can be any valid querySelector and Object can be any valid Node. This attaches to the root `v-app` component by default",
    "auto": "Centers list on selected element",
    "activeColor": "The applied color when the component is in an active state",
    "appendAvatar": "Appends a [v-avatar](/components/avatars/) component after default content in the **append** slot",
    "hideNoData": "Hides the menu when there are no options to show.  Useful for preventing the menu from opening before results are fetched asynchronously.  Also has the effect of opening the menu when the `items` array changes if not already open.",
    "prependAvatar": "Prepends a [v-avatar](/components/avatars/) component in the **prepend** slot before default content",
    "menu": "Renders with the menu open by default",
    "menuIcon": "Sets the the spin icon",
    "bgColor": "Applies specified color to the control's background. Used on components that also support the **color** prop. - supports utility colors (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)",
    "clearable": "Allows for the component to be cleared",
    "color": "Applies specified color to the control - supports utility colors (for example `success` or `purple`) or css color (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)",
    "contentClass": "Applies a custom class to the detached element. This is useful because the content is moved to the beginning of the `v-app` component (unless the **attach** prop is provided) and is not targetable by classes passed directly on the component",
    "disabled": "Removes the ability to click or target the component",
    "density": "Adjusts the vertical height used by the component.",
    "falseValue": "Sets value for falsy state",
    "eager": "Forces the component's content to render when it mounts. This is useful if you have content that will not be rendered in the DOM that you want crawled for SEO.",
    "fullWidth": "Sets the component width to 100%",
    "height": "Sets the height for the component",
    "icon": "Apply a specific icon using the [v-icon](/components/icons/) component.",
    "image": "Apply a specific image using [v-img](/components/images/).",
    "items": "An array of strings or objects used for automatically generating children components",
    "label": "Sets the text of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component",
    "mandatory": "Forces at least one item to always be selected (if available).",
    "link": "Designates that the component is a link. This is automatic when using the href or to prop.",
    "name": "Sets the component's name attribute.",
    "start": "Applies margin at the end of the component.",
    "counter": "Creates counter for input length; if no number is specified, it defaults to 25. Does not apply any validation.",
    "persistentCounter": "Forces counter to always be visible",
    "end": "Applies margin at the start of the component.",
    "noDataText": "Text shown when no items are provided to the component",
    "modelValue": "The v-model value of the component. If component supports the **multiple** prop, this defaults to an empty array",
    "modelModifiers": "**FOR INTERNAL USE ONLY**",
    "persistent": "Clicking outside or pressing **esc** key will not dismiss the dialog",
    "prependIcon": "Creates a [v-icon](/api/v-icon/) component in the **prepend** slot before default content",
    "ripple": "Applies the [v-ripple](/directives/ripple) directive.",
    "selectedClass": "Configure the active CSS class applied when an item is selected.",
    "size": "Sets the height and width of the component.",
    "symbol": "The [Symbol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol) used to hook into group functionality for components like [v-btn-toggle](/components/btn-toggle) and [v-bottom-navigation](/components/bottom-navigations/) ",
    "messages": "Displays a list of messages or a single message if using a string",
    "tag": "Specify a custom tag used on the root element",
    "textColor": "Applies a specified color to the control text - supports utility colors (for example `success` or `purple`) or css color (for example `success` or `purple`) or css color (`#033` or `rgba(255, 0, 0, 0.5)`). Find a list of built-in classes on the [colors page](/styles/colors#material-colors)",
    "text": "Specify content text for the component.",
    "search": "Text input used to filter items.",
    "title": "Specify a title text for the component.",
    "subtitle": "Specify a subtitle text for the component.",
    "trueValue": "Sets value for truthy state",
    "valueComparator": "Apply a custom comparison algorithm used for values",
    "variant": "Applies a distinct style to the component",
    "width": "Sets the width for the component",
    "mode": "Sets the transition mode (does not apply to transition-group). You can find more information on the Vue documentation [for transition modes](https://vuejs.org/v2/api/#transition).",
    "origin": "Sets the transition origin on the element. You can find more information on the MDN documentation [for transition origin](https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin).",
    "group": "Creates a `transition-group` component. [vue docs](https://vuejs.org/v2/api/#transition-group)",
    "hideOnLeave": "Hides the leaving element (no exit animation)",
    "leaveAbsolute": "Absolutely positions the leaving element (useful for [FLIP](https://aerotwist.com/blog/flip-your-animations/))"
  },
  "slots": {
    "activator": "When used, will activate the component when clicked (or hover for specific components). This manually stops the event propagation. Without this slot, if you open the component through its model, you will need to manually stop the event propagation",
    "append": "Adds an item inside the input and after input content",
    "appendInner": "Adds an item inside the input content",
    "chip": "Slot for custom chip when using the [chip](#property-chip) prop",
    "details": "Slot for custom input details to modifying the display of [messages](#props-messages).",
    "default": "The default Vue slot.",
    "label": "The default slot of the [v-label](/api/v-label/) or [v-field-label](/api/v-field-label/) component",
    "loader": "Slot for custom loader (displayed when [loading](#props-loading) prop is equal to true)",
    "prepend": "Adds an item outside the input and before input content",
    "prependInner": "Adds an item inside the input content",
    "progress": "Slot for custom progress linear (displayed when **loading** prop is not equal to Boolean False)",
    "text": "Slot for the component's text content",
    "title": "Slot for the component's title content",
    "no-data": "Defines content for when no items are provided",
    "subtitle": "Slot for the component's subtitle content",
    "append-item": "Adds an item after menu content",
    "item": "Define a custom item appearance",
    "prepend-item": "Adds an item before menu content",
    "selection": "Define a custom selection appearance"
  },
  "events": {
    "click": "Event that is emitted when the component is clicked",
    "click:close": "Emitted when close icon is clicked",
    "click:append": "Emitted when appended icon is clicked",
    "click:appendInner": "Emitted when appended inner icon is clicked",
    "click:prepend": "Emitted when prepended icon is clicked",
    "click:prependInner": "Emitted when prepended inner icon is clicked",
    "click:clear": "Emitted when clear icon is clicked",
    "update:search": "Event emitted when the search value changes",
    "update:focused": "Event that is emitted when the component's focus state changes",
    "update:menu": "Event that is emitted when the component's menu state changes",
    "input": "The updated bound model",
    "update:modelValue": "Event that is emitted when the component's model changes",
    "group:selected": "Event that is emitted when an item is selected within a group."
  },
  "exposed": {
    "filteredItems": "The current array of items based upon the current search text.",
    "isFocused": "Returns true if the input is focused.",
    "isPristine": "Returns true if the input has not been modified in any way.",
    "menu": "Returns true if the menu is currently open.",
    "search": "The current search text.",
    "select": "The function used to select an items. The first argument expects the value of the item."
  }
}
