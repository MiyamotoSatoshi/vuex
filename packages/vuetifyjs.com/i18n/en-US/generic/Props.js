export default {
  absolute: 'Position the element absolutely',
  activeClass: `Class bound when component is active. **warning** Depending upon the component, this could cause side effects. If you need to add a custom class on top of a default, just do <code>active-class="default-class your-class"</code>`,
  activator: 'Designate a custom activator when the activator slot is not used. String can be any valid querySelector and Object can be any valid Node',
  allowOverflow: 'Removes overflow re-positioning for the content',
  app: 'Designates the component as part of the application layout. Used for dynamically adjusting content sizing',
  append: `Vue Router router-link prop`,
  appendIcon: 'Append an icon to the form component, uses same syntax as <code>v-icon</code>',
  appendIconCb: 'Callback for appended icon when clicked',
  auto: 'Centers list on selected element',
  bottom: 'Align the component towards the bottom',
  box: 'Applies the alternate box input style',
  clearable: 'Add input clear functionality, default icon is Material Icons **clear**',
  color: 'Applies specified color to the control',
  contentClass: 'Applies a custom class to the detached element. This is useful because the content is moved to the end of the app and is not targettable by classes passed directly on the component.',
  dark: 'Applies the dark theme variant',
  disabled: 'Route item is disabled',
  dontFillMaskBlanks: 'Disables the automatic character display when typing',
  error: 'Puts the input in a manual error state',
  errorMessages: 'Puts the input in an error state and passes through custom error messsages. Will be combined with any validations that occur from the **rules** prop. This field will not trigger validation',
  exact: 'Exactly match the link. Without this, "/" will match every route',
  exactActiveClass: 'Vue Router router-link prop',
  falseValue: 'Sets value for falsy state',
  fullWidth: 'Forces 100% width',
  fixed: 'Position the element fixed',
  hideDetails: 'Hides hint, validation errors',
  hint: 'Hint text',
  href: 'Will designate the component tag to <code>&lt;a&gt;</code>',
  id: 'Sets the DOM id on the component',
  label: 'Sets input label',
  lazy: 'Conditionally renders content on mounted. Will only render content if activated',
  left: 'Align the component towards the left',
  light: 'Applies the light theme variant',
  loading: `Displays linear progress bar. Can either be a String which specifies which color is applied to the progress bar (any material color or theme color - primary, secondary, success, info, warning, error) or a Boolean which uses the component **color** (set by color prop - if it's supported by the component) or the primary color`,
  mask: 'Apply a custom character mask to the input. See mask table above for more information',
  max: 'Sets maximum width',
  maxHeight: 'Sets the maximum height for the content',
  maxWidth: `Sets the maximum width for the content`,
  min: 'Sets minimum width',
  minWidth: `Sets the minimum width for the content`,
  mobileBreakPoint: 'Sets the designated mobile breakpoint',
  mode: 'Sets the transition mode (does not apply to transition-group)',
  nudgeBottom: 'Nudge the content to the bottom',
  nudgeLeft: 'Nudge the content to the left',
  nudgeRight: 'Nudge the content to the right',
  nudgeTop: 'Nudge the content to the top',
  nudgeWidth: 'Nudge the content width',
  nuxt: 'Specifies the link is a nuxt-link',
  offsetOverflow: 'Causes the component to flip to the opposite side when repositioned due to overflow',
  origin: 'Sets the transition origin',
  placeholder: `Sets the input's placeholder text`,
  persistent: 'Clicking outside will not dismiss the dialog',
  persistentHint: 'Forces hint visible',
  positionX: 'Used to position the content when not using an activator slot',
  positionY: 'Used to position the content when not using an activator slot',
  prependIcon: 'Prepend an icon to the form component, uses same syntax as <code>v-icon</code>',
  prependIconCb: 'Callback for prepended icon when clicked',
  readonly: 'Puts input in readonly state',
  replace: 'Vue Router router-link prop',
  returnMaskedValue: 'Returns the unmodified masked string',
  required: 'Designates the input as required. Adds an asertisk to end of label. Does not perform any validation.',
  right: 'Align the component towards the right',
  ripple: 'Applies the <code>v-ripple</code> directive',
  rules: 'Array of functions that return either True or a String with an error message',
  singleLine: 'Label does not move on focus/dirty',
  solo: 'Changes the style of the input',
  tabindex: 'Tabindex of input',
  tag: 'Specify a custom tag to use on the component',
  target: 'Specify the target attribute, only works with anchor tag.',
  textColor: 'Applies a specified color to the control text',
  to: 'Will designate the component tag to <code>&lt;router-link&gt;</code>',
  toggleKeys: 'Array of key codes that will toggle the input (if it supports toggling)',
  top: 'Align the content towards the top',
  trueValue: 'Sets value for truthy state',
  transition: 'Sets the component transition. Can be one of the built in transitions or your own.',
  value: 'Controls visibility',
  validateOnBlur: 'Delays validation until blur event',
  width: 'The width the content',
  zIndex: 'The z-index used for the component'
}
