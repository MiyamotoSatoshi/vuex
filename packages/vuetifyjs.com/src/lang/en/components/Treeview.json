{
  "header": "# Treeview",
  "headerText": "The `v-treeview` component is useful for displaying large amounts of nested data.",
  "examples": {
    "usage": {
      "desc": "A basic example"
    },
    "fileExplorer": {
      "header": "### Scoped slots",
      "desc": "Using scoped slots we are able to create an intuitive file explorer. Apart from the `prepend` slot, there is also one for the `label`, and an `append` slot."
    },
    "directory": {
      "header": "### Async items",
      "desc": "You can dynamically load child data by supplying a _Promise_ callback to the `load-children` prop. This callback will be executed the first time a user tries to expand an item that has a children property that is an empty array."
    },
    "hotspots": {
      "header": "### Custom selectable icons",
      "desc": "Customize the **on**, **off** and **indeterminate** icons for your selectable tree. Combine with other advanced functionality like API loaded items."
    }
  },
  "props": {
    "v-treeview": {
      "activatable": "Allows user to mark a node as active by clicking on it",
      "active": "Syncable prop that allows one to control which nodes are active. The array consists of the `item-key` of each active item.",
      "activeClass": "The class applied to the node when active",
      "expandIcon": "Icon used to indicate that a node can be expanded",
      "hoverable": "Applies a hover class when mousing over nodes",
      "indeterminateIcon": "Icon used when node is in an indeterminate state",
      "itemChildren": "Property on supplied `items` that contains its children",
      "itemKey": "Property on supplied `items` used to keep track of node state. The value of this property has to be unique among all items.",
      "itemText": "Property on supplied `items` that contains its label text",
      "items": "An array of items used to build the treeview",
      "loadChildren": "A function used when dynamically loading children. If this prop is set, then the supplied function will be run if expanding an item that has a `item-children` property that is an empty array. Supports returning a Promise.",
      "loadingIcon": "Icon used when node is in a loading state",
      "multipleActive": "When `true`, allows user to have multiple active nodes at the same time",
      "offIcon": "Icon used when node is not selected",
      "onIcon": "Icon used when leaf node is selected or when a branch node is fully selected",
      "open": "Syncable prop that allows one to control which nodes are open. The array consists of the `item-key` of each open item.",
      "openAll": "When `true` will cause all branch nodes to be opened when component is mounted",
      "openOnClick": "When `true` will cause nodes to be opened by clicking anywhere on it, instead of only opening by clicking on expand icon. When using this prop with `activatable` you will be unable to mark nodes with children as active.",
      "selectable": "Will render a checkbox next to each node allowing them to be selected",
      "selectedColor": "The color of the selection checkbox",
      "transition": "Applies a transition when nodes are opened and closed",
      "value": "Allows one to control which nodes are selected. The array consists of the `item-key` of each selected item. Is used with `@input` event to allow for `v-model` binding."
    }
  },
  "scopedSlots": {
    "v-treeview": {
      "append": "Appends content after label",
      "label": "Label content",
      "prepend": "Prepends content before label"
    }
  }
}
